name: Download Artifacts from JFrog Artifactory

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: false
        default: '1.7.9'  # You can specify a default version if desired
  push:
    branches:
      - main  # Adjust this to your desired branch

jobs:
  download:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine bump2version
        git config --global user.name "IDM Tools"
        git config --global user.name "idmtools@idmod.org"
    - name: Set up JFrog CLI
      run: |
        curl -fL https://getcli.jfrog.io | sh
        sudo mv jfrog /usr/local/bin/jfrog

    - name: Configure JFrog CLI
      env:
        JFROG_URL: https://packages.idmod.org:443/artifactory/
        JFROG_USER: ${{ secrets.PYPI_STAGING_USERNAME }}
        JFROG_PASSWORD: ${{ secrets.PYPI_STAGING_PASSWORD }}
        VERSION: ${{ github.event.inputs.version }}
      run: |
        jfrog config add myartifactory --artifactory-url=$JFROG_URL --user=$JFROG_USER --access-token=$JFROG_PASSWORD

    - name: Create downloadSpec.json
      if: github.event.inputs.version != ''
      run: |
        VERSION=${{ github.event.inputs.version || '1.7.9' }}
        ARTIFACT_PATH="idm-pypi-staging/idmtools*/${VERSION}/"
        DOWNLOAD_PATH="dist/"
        echo '{
          "files": [
            {
              "pattern": "'"$ARTIFACT_PATH"'",
              "target": "'"$DOWNLOAD_PATH"'"
            }
          ]
        }' > downloadSpec.json
        cat downloadSpec.json
    - name: Download Artifacts
      if: github.event.inputs.version != ''
      run: |
        jfrog rt dl --server-id=myartifactory --spec=downloadSpec.json
        ls -lR dist/
    - name: Build and publish
      if: github.event.inputs.version != ''
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        find dist -name '*.gz' -or -name '*.whl' -exec twine upload --skip-existing {} +
      
