# This workflow uploads idmtools-cli to staging only after PR approval or pushes to dev/release*

name: "Staging: idmtools-cli"

on:
  push:
    branches:
      - dev
      - release*
    paths:
      - 'idmtools_cli/**'
  pull_request:
    branches:
      - dev
      - release*
    types: [ready_for_review, synchronize]
    paths:
      - 'idmtools_cli/**'
      - '.github/workflows/staging-idmtools-cli.yml'
  pull_request_review:
    types: [ submitted ]
jobs:
  check-approval:
    name: Check PR approval
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.check.outputs.approved }}
    steps:
      - name: Checkout code (needed for Git operations)
        uses: actions/checkout@v4
      - name: Set up GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Fetch PR approvals
        id: check
        run: |
          PR_NUMBER=${{ github.event.pull_request.number || github.event.pull_request_review.pull_request.number }}
          APPROVED=$(gh pr view $PR_NUMBER --json reviews --jq '
            .reviews | map(select(.state == "APPROVED")) | length >= 1')
          echo "approved=$APPROVED" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-cli-staging:
    name: Deploy idmtools-cli to staging
    needs: [check-approval]
    if: github.event_name == 'push' || needs.check-approval.outputs.approved == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine bump2version build
          git config --global user.name "IDM Tools"
          git config --global user.email "idmtools@idmod.org"

      - name: Build and publish
        working-directory: idmtools_cli
        env:
          TWINE_REPOSITORY_URL: https://packages.idmod.org/api/pypi/idm-pypi-staging/
          TWINE_USERNAME: ${{ secrets.PYPI_STAGING_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_STAGING_PASSWORD }}
        run: |
          python -m build
          twine upload dist/*
