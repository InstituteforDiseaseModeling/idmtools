<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="2" file="test_api.py" name="test_api.TestAPI-20190807203934" skipped="0" tests="5"
           time="32.708" timestamp="2019-08-07T20:40:50">
    <testcase classname="test_api.TestAPI" file="test_api.py" line="113" name="test_experiment_filtering" time="23.260"
              timestamp="2019-08-07T20:40:40">
        <system-out>
            <![CDATA[2019-08-07 20:40:24,449 INFO sqlalchemy.engine.base.Engine select version()
2019-08-07 20:40:24,450 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:24,474 INFO sqlalchemy.engine.base.Engine select current_schema()
2019-08-07 20:40:24,476 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:24,486 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:40:24,488 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:24,494 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:40:24,496 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:24,500 INFO sqlalchemy.engine.base.Engine show standard_conforming_strings
2019-08-07 20:40:24,502 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:24,513 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24,515 INFO sqlalchemy.engine.base.Engine {'name': 'job_status'}
2019-08-07 20:40:24,526 INFO sqlalchemy.engine.base.Engine 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:40:24,528 INFO sqlalchemy.engine.base.Engine {'typname': 'status'}
2019-08-07 20:40:24,547 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,556 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,557 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'AAAAA', 'param_1': 1}
2019-08-07 20:40:24,570 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,577 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,583 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,588 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'BBBBB', 'param_1': 1}
2019-08-07 20:40:24,602 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,614 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,619 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,621 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'CCCCC', 'param_1': 1}
2019-08-07 20:40:24,629 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,636 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,642 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,645 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'DDDDD', 'param_1': 1}
2019-08-07 20:40:24,653 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,671 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,677 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,679 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'EEEEE', 'param_1': 1}
2019-08-07 20:40:24,694 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,705 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:40:24,711 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24,713 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'FFFFF', 'param_1': 1}
2019-08-07 20:40:24,721 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:40:24,755 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24,757 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:40:24,768 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:40:24,770 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'b'}
2019-08-07 20:40:24,856 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24,857 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:40:24,866 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:40:24,868 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:40:25,222 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:25,223 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:40:25,234 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:40:25,235 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'c'}
2019-08-07 20:40:25,273 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:25,274 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:40:25,284 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:40:25,285 INFO sqlalchemy.engine.base.Engine {}

[K]]>        </system-out>
        <system-err>
            <![CDATA[2019-08-07 20:40:18 sahara root[5365] INFO Generating grammar tables from /usr/lib/python3.7/lib2to3/Grammar.txt
2019-08-07 20:40:18 sahara root[5365] INFO Generating grammar tables from /usr/lib/python3.7/lib2to3/PatternGrammar.txt
2019-08-07 20:40:19 sahara docker.utils.config[5365] DEBUG Trying paths: ['/home/clinton/.docker/config.json', '/home/clinton/.dockercfg']
2019-08-07 20:40:19 sahara docker.utils.config[5365] DEBUG Found file at path: /home/clinton/.docker/config.json
2019-08-07 20:40:19 sahara docker.auth[5365] DEBUG Found 'auths' section
2019-08-07 20:40:19 sahara docker.auth[5365] DEBUG Found entry (registry='docker.packages.idmod.org', username='ccollins@idmod.org')
2019-08-07 20:40:19 sahara docker.auth[5365] DEBUG Found entry (registry='iazdvfil01.azurecr.io', username='iazdvfil01')
2019-08-07 20:40:19 sahara docker.auth[5365] DEBUG Found entry (registry='idm-docker-production.packages.idmod.org', username='ccollins@idmod.org')
2019-08-07 20:40:19 sahara docker.auth[5365] DEBUG Found entry (registry='idm-docker-staging.packages.idmod.org', username='ccollins@idmod.org')
2019-08-07 20:40:19 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Ensuring postgres is running
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO select version()
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO select current_schema()
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO show standard_conforming_strings
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'name': 'job_status'}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'typname': 'status'}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'AAAAA', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'BBBBB', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'CCCCC', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'DDDDD', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'EEEEE', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO BEGIN (implicit)
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'uuid_1': 'FFFFF', 'param_1': 1}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO COMMIT
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'tags_1': 'a', 'param_1': 'b'}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:40:24 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:24 sahara flask.app[5365] ERROR   experiment_id    data_path  ...                           updated progress
0         AAAAA  /data/AAAAA  ...  2019-08-08 03:38:24.269971+00:00       []

[1 rows x 7 columns]
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO {'tags_1': 'a', 'param_1': 'c'}
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:40:25 sahara sqlalchemy.engine.base.Engine[5365] INFO {}
2019-08-07 20:40:25 sahara flask.app[5365] ERROR Empty DataFrame
Columns: [experiment_id, data_path, tags, extra_details, created, updated, progress]
Index: []
2019-08-07 20:40:25 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Ensuring redis is running
2019-08-07 20:40:25 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Stopping container idmtools_redis
2019-08-07 20:40:26 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Removing container idmtools_redis
2019-08-07 20:40:26 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Ensuring postgres is running
2019-08-07 20:40:26 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Stopping container idmtools_postgres
2019-08-07 20:40:36 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Removing container idmtools_postgres
2019-08-07 20:40:36 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Ensuring worker is running
2019-08-07 20:40:36 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Stopping container idmtools_workers
2019-08-07 20:40:40 sahara idmtools_platform_local.docker.DockerOperations[5365] DEBUG Removing container idmtools_workers
]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="69" name="test_fetch_one_experiment_works"
              time="0.449" timestamp="2019-08-07T20:40:49">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[2019-08-07 20:40:49 sahara flask.app[5365] ERROR   experiment_id    data_path  ...              updated progress
0         AAAAA  /data/AAAAA  ...  2019-08-08 03:40:18       []

[1 rows x 7 columns]
]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="102" name="test_fetch_one_simulation_works"
              time="0.224" timestamp="2019-08-07T20:40:49">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="50" name="test_fetch_experiments" time="8.546"
              timestamp="2019-08-07T20:40:49">
        <failure message="'AD9AFQ8I' != 'BBBBB'
- AD9AFQ8I
+ BBBBB
" type="AssertionError">
            <![CDATA[Traceback (most recent call last):
  File "/home/clinton/development/work/idmtools/idmtools_platform_local/tests/test_api.py", line 64, in test_fetch_experiments
    self.assertEqual(data[1]['experiment_id'], 'BBBBB')
AssertionError: 'AD9AFQ8I' != 'BBBBB'
- AD9AFQ8I
+ BBBBB

]]>        </failure>
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[2019-08-07 20:40:41 sahara flask.app[5365] ERROR   experiment_id  ...          progress
0      WZULCZQD  ...  [{'created': 1}]
1      EA8V8OQI  ...                []
2         DDDDD  ...  [{'created': 2}]
3         BBBBB  ...  [{'created': 1}]
4      AD9AFQ8I  ...     [{'done': 1}]

[5 rows x 7 columns]
]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="79" name="test_fetch_simulations" time="0.230"
              timestamp="2019-08-07T20:40:50">
        <failure message="'492FQS55' != 'CCCCC'
- 492FQS55
+ CCCCC
" type="AssertionError">
            <![CDATA[Traceback (most recent call last):
  File "/home/clinton/development/work/idmtools/idmtools_platform_local/tests/test_api.py", line 90, in test_fetch_simulations
    self.assertEqual(data[0]['simulation_uid'], 'CCCCC')
AssertionError: '492FQS55' != 'CCCCC'
- 492FQS55
+ CCCCC

]]>        </failure>
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
</testsuite>
