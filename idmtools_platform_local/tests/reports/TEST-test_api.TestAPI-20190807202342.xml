<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="2" file="test_api.py" name="test_api.TestAPI-20190807202342" skipped="0" tests="5"
           time="21.839" timestamp="2019-08-07T20:24:50">
    <testcase classname="test_api.TestAPI" file="test_api.py" line="113" name="test_experiment_filtering" time="20.292"
              timestamp="2019-08-07T20:24:49">
        <system-out>
            <![CDATA[2019-08-07 20:24:36,233 INFO sqlalchemy.engine.base.Engine select version()
2019-08-07 20:24:36,234 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,254 INFO sqlalchemy.engine.base.Engine select current_schema()
2019-08-07 20:24:36,255 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,264 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:24:36,267 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,274 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:24:36,279 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,284 INFO sqlalchemy.engine.base.Engine show standard_conforming_strings
2019-08-07 20:24:36,287 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,298 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:24:36,299 INFO sqlalchemy.engine.base.Engine {'name': 'job_status'}
2019-08-07 20:24:36,307 INFO sqlalchemy.engine.base.Engine 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:24:36,308 INFO sqlalchemy.engine.base.Engine {'typname': 'status'}
2019-08-07 20:24:36,315 INFO sqlalchemy.engine.base.Engine CREATE TYPE status AS ENUM ('created', 'in_progress', 'canceled', 'failed', 'done')
2019-08-07 20:24:36,316 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,323 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,329 INFO sqlalchemy.engine.base.Engine 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:24:36,330 INFO sqlalchemy.engine.base.Engine {'typname': 'status'}
2019-08-07 20:24:36,342 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE job_status (
	uuid VARCHAR NOT NULL, 
	parent_uuid VARCHAR, 
	status status NOT NULL, 
	data_path VARCHAR NOT NULL, 
	tags JSON, 
	extra_details JSON, 
	created TIMESTAMP WITH TIME ZONE DEFAULT now(), 
	updated TIMESTAMP WITH TIME ZONE, 
	PRIMARY KEY (uuid), 
	UNIQUE (uuid)
)


2019-08-07 20:24:36,344 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:36,360 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,385 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,392 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,393 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'AAAAA', 'param_1': 1}
2019-08-07 20:24:36,405 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,406 INFO sqlalchemy.engine.base.Engine {'uuid': 'AAAAA', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/AAAAA', 'tags': '{"a": "b", "c": "d"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 404335), 'updated': None}
2019-08-07 20:24:36,410 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,419 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,425 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,426 INFO sqlalchemy.engine.base.Engine {'param_1': 'AAAAA'}
2019-08-07 20:24:36,436 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,437 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/AAAAA', 'tags': '{"a": "b", "c": "d"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'AAAAA'}
2019-08-07 20:24:36,443 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,461 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,469 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,470 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'BBBBB', 'param_1': 1}
2019-08-07 20:24:36,481 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,483 INFO sqlalchemy.engine.base.Engine {'uuid': 'BBBBB', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/BBBBB', 'tags': '{"e": "f", "g": "h"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 477946), 'updated': None}
2019-08-07 20:24:36,487 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,494 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,501 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,502 INFO sqlalchemy.engine.base.Engine {'param_1': 'BBBBB'}
2019-08-07 20:24:36,510 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,511 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/BBBBB', 'tags': '{"e": "f", "g": "h"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'BBBBB'}
2019-08-07 20:24:36,524 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,536 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,543 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,544 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'CCCCC', 'param_1': 1}
2019-08-07 20:24:36,555 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,556 INFO sqlalchemy.engine.base.Engine {'uuid': 'CCCCC', 'parent_uuid': 'BBBBB', 'status': 'created', 'data_path': '/data/CCCCC', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 553299), 'updated': None}
2019-08-07 20:24:36,560 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,567 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,571 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,572 INFO sqlalchemy.engine.base.Engine {'param_1': 'CCCCC'}
2019-08-07 20:24:36,586 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,588 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/CCCCC', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'CCCCC'}
2019-08-07 20:24:36,593 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,606 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,611 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,614 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'DDDDD', 'param_1': 1}
2019-08-07 20:24:36,633 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,634 INFO sqlalchemy.engine.base.Engine {'uuid': 'DDDDD', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/DDDD', 'tags': '{"e": "f", "c": "d"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 631923), 'updated': None}
2019-08-07 20:24:36,639 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,652 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,658 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,662 INFO sqlalchemy.engine.base.Engine {'param_1': 'DDDDD'}
2019-08-07 20:24:36,672 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,673 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/DDDD', 'tags': '{"e": "f", "c": "d"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'DDDDD'}
2019-08-07 20:24:36,677 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,690 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,696 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,697 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'EEEEE', 'param_1': 1}
2019-08-07 20:24:36,710 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,711 INFO sqlalchemy.engine.base.Engine {'uuid': 'EEEEE', 'parent_uuid': 'DDDDD', 'status': 'created', 'data_path': '/data/EEEEE', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 709714), 'updated': None}
2019-08-07 20:24:36,719 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,727 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,732 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,733 INFO sqlalchemy.engine.base.Engine {'param_1': 'EEEEE'}
2019-08-07 20:24:36,746 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,747 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/EEEEE', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'EEEEE'}
2019-08-07 20:24:36,752 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,764 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,770 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:24:36,772 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'FFFFF', 'param_1': 1}
2019-08-07 20:24:36,784 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:24:36,785 INFO sqlalchemy.engine.base.Engine {'uuid': 'FFFFF', 'parent_uuid': 'DDDDD', 'status': 'created', 'data_path': '/data/FFFFF', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 24, 36, 783973), 'updated': None}
2019-08-07 20:24:36,789 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,799 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:24:36,804 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:24:36,805 INFO sqlalchemy.engine.base.Engine {'param_1': 'FFFFF'}
2019-08-07 20:24:36,816 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:24:36,818 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/FFFFF', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'FFFFF'}
2019-08-07 20:24:36,822 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:24:36,863 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:24:36,864 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:24:36,876 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:24:36,877 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'b'}
2019-08-07 20:24:36,967 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:24:36,968 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:24:36,977 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:24:36,978 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:24:37,363 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:24:37,364 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:24:37,375 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:24:37,376 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'c'}
2019-08-07 20:24:37,418 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:24:37,419 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:24:37,427 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:24:37,428 INFO sqlalchemy.engine.base.Engine {}

[K]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="69" name="test_fetch_one_experiment_works"
              time="0.466" timestamp="2019-08-07T20:24:50">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="102" name="test_fetch_one_simulation_works"
              time="0.218" timestamp="2019-08-07T20:24:50">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="50" name="test_fetch_experiments" time="0.636"
              timestamp="2019-08-07T20:24:49">
        <failure message="'4AF35X3R' != 'AAAAA'
- 4AF35X3R
+ AAAAA
" type="AssertionError">
            <![CDATA[Traceback (most recent call last):
  File "/home/clinton/development/work/idmtools/idmtools_platform_local/tests/test_api.py", line 61, in test_fetch_experiments
    self.assertEqual(data[0]['experiment_id'], 'AAAAA')
AssertionError: '4AF35X3R' != 'AAAAA'
- 4AF35X3R
+ AAAAA

]]>        </failure>
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="79" name="test_fetch_simulations" time="0.227"
              timestamp="2019-08-07T20:24:50">
        <failure message="'ASZ8LD86' != 'CCCCC'
- ASZ8LD86
+ CCCCC
" type="AssertionError">
            <![CDATA[Traceback (most recent call last):
  File "/home/clinton/development/work/idmtools/idmtools_platform_local/tests/test_api.py", line 90, in test_fetch_simulations
    self.assertEqual(data[0]['simulation_uid'], 'CCCCC')
AssertionError: 'ASZ8LD86' != 'CCCCC'
- ASZ8LD86
+ CCCCC

]]>        </failure>
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
</testsuite>
