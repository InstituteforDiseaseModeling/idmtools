<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="1" file="test_api.py" name="test_api.TestAPI-20190807203115" skipped="0" tests="5"
           time="22.382" timestamp="2019-08-07T20:32:14">
    <testcase classname="test_api.TestAPI" file="test_api.py" line="113" name="test_experiment_filtering" time="20.458"
              timestamp="2019-08-07T20:32:13">
        <system-out>
            <![CDATA[2019-08-07 20:31:59,601 INFO sqlalchemy.engine.base.Engine select version()
2019-08-07 20:31:59,602 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,631 INFO sqlalchemy.engine.base.Engine select current_schema()
2019-08-07 20:31:59,632 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,639 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:31:59,640 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,644 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2019-08-07 20:31:59,645 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,646 INFO sqlalchemy.engine.base.Engine show standard_conforming_strings
2019-08-07 20:31:59,647 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,656 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:31:59,657 INFO sqlalchemy.engine.base.Engine {'name': 'job_status'}
2019-08-07 20:31:59,668 INFO sqlalchemy.engine.base.Engine 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:31:59,670 INFO sqlalchemy.engine.base.Engine {'typname': 'status'}
2019-08-07 20:31:59,685 INFO sqlalchemy.engine.base.Engine CREATE TYPE status AS ENUM ('created', 'in_progress', 'canceled', 'failed', 'done')
2019-08-07 20:31:59,688 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,704 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,710 INFO sqlalchemy.engine.base.Engine 
            SELECT EXISTS (
                SELECT * FROM pg_catalog.pg_type t
                WHERE t.typname = %(typname)s
                AND pg_type_is_visible(t.oid)
                )
                
2019-08-07 20:31:59,713 INFO sqlalchemy.engine.base.Engine {'typname': 'status'}
2019-08-07 20:31:59,726 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE job_status (
	uuid VARCHAR NOT NULL, 
	parent_uuid VARCHAR, 
	status status NOT NULL, 
	data_path VARCHAR NOT NULL, 
	tags JSON, 
	extra_details JSON, 
	created TIMESTAMP WITH TIME ZONE DEFAULT now(), 
	updated TIMESTAMP WITH TIME ZONE, 
	PRIMARY KEY (uuid), 
	UNIQUE (uuid)
)


2019-08-07 20:31:59,727 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:31:59,746 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,777 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:31:59,792 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:31:59,795 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'AAAAA', 'param_1': 1}
2019-08-07 20:31:59,820 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:31:59,822 INFO sqlalchemy.engine.base.Engine {'uuid': 'AAAAA', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/AAAAA', 'tags': '{"a": "b", "c": "d"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 31, 59, 817704), 'updated': None}
2019-08-07 20:31:59,833 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,843 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:31:59,852 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:31:59,853 INFO sqlalchemy.engine.base.Engine {'param_1': 'AAAAA'}
2019-08-07 20:31:59,866 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:31:59,868 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/AAAAA', 'tags': '{"a": "b", "c": "d"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'AAAAA'}
2019-08-07 20:31:59,876 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,894 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:31:59,906 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:31:59,909 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'BBBBB', 'param_1': 1}
2019-08-07 20:31:59,920 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:31:59,921 INFO sqlalchemy.engine.base.Engine {'uuid': 'BBBBB', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/BBBBB', 'tags': '{"e": "f", "g": "h"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 31, 59, 918124), 'updated': None}
2019-08-07 20:31:59,925 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,937 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:31:59,947 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:31:59,948 INFO sqlalchemy.engine.base.Engine {'param_1': 'BBBBB'}
2019-08-07 20:31:59,959 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:31:59,960 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/BBBBB', 'tags': '{"e": "f", "g": "h"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'BBBBB'}
2019-08-07 20:31:59,967 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:31:59,979 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:31:59,984 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:31:59,985 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'CCCCC', 'param_1': 1}
2019-08-07 20:31:59,994 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:31:59,995 INFO sqlalchemy.engine.base.Engine {'uuid': 'CCCCC', 'parent_uuid': 'BBBBB', 'status': 'created', 'data_path': '/data/CCCCC', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 31, 59, 992556), 'updated': None}
2019-08-07 20:32:00,001 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,014 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,020 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:32:00,021 INFO sqlalchemy.engine.base.Engine {'param_1': 'CCCCC'}
2019-08-07 20:32:00,034 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:32:00,037 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/CCCCC', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'CCCCC'}
2019-08-07 20:32:00,043 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,053 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,059 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:32:00,061 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'DDDDD', 'param_1': 1}
2019-08-07 20:32:00,073 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:32:00,074 INFO sqlalchemy.engine.base.Engine {'uuid': 'DDDDD', 'parent_uuid': None, 'status': 'created', 'data_path': '/data/DDDD', 'tags': '{"e": "f", "c": "d"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 32, 0, 73394), 'updated': None}
2019-08-07 20:32:00,078 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,088 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,094 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:32:00,095 INFO sqlalchemy.engine.base.Engine {'param_1': 'DDDDD'}
2019-08-07 20:32:00,106 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:32:00,107 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/DDDD', 'tags': '{"e": "f", "c": "d"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'DDDDD'}
2019-08-07 20:32:00,115 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,125 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,132 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:32:00,133 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'EEEEE', 'param_1': 1}
2019-08-07 20:32:00,141 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:32:00,143 INFO sqlalchemy.engine.base.Engine {'uuid': 'EEEEE', 'parent_uuid': 'DDDDD', 'status': 'created', 'data_path': '/data/EEEEE', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 32, 0, 140892), 'updated': None}
2019-08-07 20:32:00,153 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,167 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,173 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:32:00,174 INFO sqlalchemy.engine.base.Engine {'param_1': 'EEEEE'}
2019-08-07 20:32:00,183 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:32:00,185 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/EEEEE', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'EEEEE'}
2019-08-07 20:32:00,189 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,199 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,204 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.data_path AS job_status_data_path, job_status.tags AS job_status_tags, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(uuid_1)s 
 LIMIT %(param_1)s
2019-08-07 20:32:00,208 INFO sqlalchemy.engine.base.Engine {'uuid_1': 'FFFFF', 'param_1': 1}
2019-08-07 20:32:00,216 INFO sqlalchemy.engine.base.Engine INSERT INTO job_status (uuid, parent_uuid, status, data_path, tags, extra_details, created, updated) VALUES (%(uuid)s, %(parent_uuid)s, %(status)s, %(data_path)s, %(tags)s, %(extra_details)s, %(created)s, %(updated)s)
2019-08-07 20:32:00,217 INFO sqlalchemy.engine.base.Engine {'uuid': 'FFFFF', 'parent_uuid': 'DDDDD', 'status': 'created', 'data_path': '/data/FFFFF', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{}', 'created': datetime.datetime(2019, 8, 8, 3, 32, 0, 215694), 'updated': None}
2019-08-07 20:32:00,221 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,228 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2019-08-07 20:32:00,233 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid AS job_status_uuid, job_status.parent_uuid AS job_status_parent_uuid, job_status.status AS job_status_status, job_status.extra_details AS job_status_extra_details, job_status.created AS job_status_created, job_status.updated AS job_status_updated 
FROM job_status 
WHERE job_status.uuid = %(param_1)s
2019-08-07 20:32:00,234 INFO sqlalchemy.engine.base.Engine {'param_1': 'FFFFF'}
2019-08-07 20:32:00,241 INFO sqlalchemy.engine.base.Engine UPDATE job_status SET data_path=%(data_path)s, tags=%(tags)s, extra_details=%(extra_details)s, updated=now() WHERE job_status.uuid = %(job_status_uuid)s
2019-08-07 20:32:00,242 INFO sqlalchemy.engine.base.Engine {'data_path': '/data/FFFFF', 'tags': '{"i": "j", "k": "l"}', 'extra_details': '{"simulation_type": "Python"}', 'job_status_uuid': 'FFFFF'}
2019-08-07 20:32:00,246 INFO sqlalchemy.engine.base.Engine COMMIT
2019-08-07 20:32:00,317 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:32:00,319 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:32:00,359 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:32:00,360 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'b'}
2019-08-07 20:32:00,505 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:32:00,507 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:32:00,521 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:32:00,523 INFO sqlalchemy.engine.base.Engine {}
2019-08-07 20:32:00,930 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:32:00,931 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.create ... (21 characters truncated) ...  \nFROM job_status \nWHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> :tags_1) AS VARCHAR) = :param_1 ORDER BY job_status.uuid DESC'}
2019-08-07 20:32:00,949 INFO sqlalchemy.engine.base.Engine SELECT job_status.uuid, job_status.parent_uuid, job_status.status, job_status.data_path, job_status.tags, job_status.extra_details, job_status.created, job_status.updated 
FROM job_status 
WHERE job_status.parent_uuid IS NULL AND CAST((job_status.tags ->> %(tags_1)s) AS VARCHAR) = %(param_1)s ORDER BY job_status.uuid DESC
2019-08-07 20:32:00,952 INFO sqlalchemy.engine.base.Engine {'tags_1': 'a', 'param_1': 'c'}
2019-08-07 20:32:00,993 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2019-08-07 20:32:00,994 INFO sqlalchemy.engine.base.Engine {'name': 'SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total \nFROM job_status \nWHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status'}
2019-08-07 20:32:01,003 INFO sqlalchemy.engine.base.Engine SELECT job_status.parent_uuid, job_status.status, count(job_status.status) AS total 
FROM job_status 
WHERE job_status.parent_uuid IS NOT NULL GROUP BY job_status.parent_uuid, job_status.status
2019-08-07 20:32:01,004 INFO sqlalchemy.engine.base.Engine {}

[K]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="69" name="test_fetch_one_experiment_works"
              time="0.578" timestamp="2019-08-07T20:32:14">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="102" name="test_fetch_one_simulation_works"
              time="0.221" timestamp="2019-08-07T20:32:14">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="79" name="test_fetch_simulations" time="0.416"
              timestamp="2019-08-07T20:32:14">
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
    <testcase classname="test_api.TestAPI" file="test_api.py" line="50" name="test_fetch_experiments" time="0.708"
              timestamp="2019-08-07T20:32:13">
        <failure message="'2X7BSH1H' != 'AAAAA'
- 2X7BSH1H
+ AAAAA
" type="AssertionError">
            <![CDATA[Traceback (most recent call last):
  File "/home/clinton/development/work/idmtools/idmtools_platform_local/tests/test_api.py", line 61, in test_fetch_experiments
    self.assertEqual(data[0]['experiment_id'], 'AAAAA')
AssertionError: '2X7BSH1H' != 'AAAAA'
- 2X7BSH1H
+ AAAAA

]]>        </failure>
        <system-out>
            <![CDATA[]]>        </system-out>
        <system-err>
            <![CDATA[]]>        </system-err>
    </testcase>
</testsuite>
