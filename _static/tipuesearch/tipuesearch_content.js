var tipuesearch_info = 'Generated by gti.py on 2020-06-23 22:20:08.400038';
var tipuesearch = {"pages": [{"title": "idmtools.utils.display.settings module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.display.settings.html", "text": "idmtools.utils.display.settings module \u00b6"}, {"title": "idmtools_platform_comps.ssmt_operations.simulation_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_operations.simulation_operations.html", "text": "idmtools_platform_comps.ssmt_operations.simulation_operations module \u00b6 class idmtools_platform_comps.ssmt_operations.simulation_operations. SSMTPlatformSimulationOperations ( platform: COMPSPlatform , platform_type: Type = <class 'COMPS.Data.Simulation.Simulation'> ) \u00b6 Bases: idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations get_assets ( simulation: idmtools.entities.simulation.Simulation, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Fetch the files associated with a simulation Parameters simulation \u2013 Simulation files \u2013 List of files to download **kwargs \u2013 Returns Dictionary of filename -> ByteArray platform = None \u00b6"}, {"title": "idmtools_platform_local.platform_operations.experiment_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.platform_operations.experiment_operations.html", "text": "idmtools_platform_local.platform_operations.experiment_operations module \u00b6 class idmtools_platform_local.platform_operations.experiment_operations. LocalPlatformExperimentOperations ( platform: 'LocalPlatform' , platform_type: type = <class 'idmtools_platform_local.platform_operations.uitils.ExperimentDict'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations platform : 'LocalPlatform' = None \u00b6 platform_type \u00b6 alias of idmtools_platform_local.platform_operations.uitils.ExperimentDict get ( experiment_id: uuid.UUID , **kwargs ) \u2192 idmtools_platform_local.platform_operations.uitils.ExperimentDict \u00b6 Get the experiment object by id Parameters experiment_id \u2013 Id **kwargs \u2013 Returns Experiment Dict object platform_create ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 Dict \u00b6 Create an experiment. Parameters experiment \u2013 Experiment to create **kwargs \u2013 Returns Created experiment object and UUID get_children ( experiment: Dict , **kwargs ) \u2192 List[idmtools_platform_local.platform_operations.uitils.SimulationDict] \u00b6 Get children for an experiment Parameters experiment \u2013 Experiment to get chidren for **kwargs \u2013 Returns List of simulation dicts get_parent ( experiment: Any , **kwargs ) \u2192 None \u00b6 Experiment on local platform have no parents so return None Parameters experiment \u2013 **kwargs \u2013 Returns: platform_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Run the experiment Parameters experiment \u2013 experiment to run Returns: send_assets ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Sends assets for specified experiment Parameters experiment \u2013 Experiment to send assets for Returns: refresh_status ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Refresh status of experiment Parameters experiment \u2013 Experiment to refresh status for Returns: static from_experiment ( experiment: idmtools.entities.experiment.Experiment ) \u2192 Dict \u00b6 Create a experiment dictionary from Experiment object Parameters experiment \u2013 Experiment object Returns Experiment as a local platform dict to_entity ( experiment: Dict , children: bool = True , **kwargs ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Convert an ExperimentDict to an Experiment Parameters experiment \u2013 Experiment to convert **kwargs \u2013 Returns object as an IExperiment object list_assets ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List assets for a sim Parameters experiment \u2013 Experiment object Returns:"}, {"title": "idmtools.services.platforms module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.services.platforms.html", "text": "idmtools.services.platforms module \u00b6 class idmtools.services.platforms. PlatformPersistService \u00b6 Bases: idmtools.services.ipersistance_service.IPersistenceService cache_name = 'platforms' \u00b6"}, {"title": "idmtools_platform_local.cli.experiment module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.cli.experiment.html", "text": "idmtools_platform_local.cli.experiment module \u00b6 idmtools_platform_local.cli.experiment. prettify_experiment ( experiment: Dict[str, Any] ) \u00b6 Prettifies a JSON Experiment object for printing on a console. This includes - Making a pretty progress bar - URL-ifying the data paths - sorting the columns Parameters experiment \u2013 JSON representation of the Experiment(from API) Returns: idmtools_platform_local.cli.experiment. status ( id: Optional[str], tags: Optional[List[Tuple[str, str]]] ) \u00b6 List the status of experiment(s) with the ability to filter by experiment id and tags Parameters id ( Optional [ str ] ) \u2013 Optional ID of the experiment you want to filter by tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 Optional list of tuples in form of tag_name tag_value to user to filter experiments with idmtools_platform_local.cli.experiment. extra_commands ( ) \u00b6 This ensures our local platform specific commands are loaded"}, {"title": "idmtools_platform_local.infrastructure.workers module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.workers.html", "text": "idmtools_platform_local.infrastructure.workers module \u00b6 idmtools_platform_local.infrastructure.workers. get_worker_image_default ( ) \u00b6 class idmtools_platform_local.infrastructure.workers. WorkersContainer ( container_name: str = 'idmtools_workers' , image: str = 'docker-production.packages.idmod.org/idmtools/local_workers:1.2.0' , client: docker.client.DockerClient = None , config_prefix: str = 'workers_' , network: str = None , host_data_directory: str = None , postgres_port: int = 5432 , redis_port: int = 6379 , ui_port: int = 5000 , mem_limit: str = '16g' , mem_reservation: str = '64m' , run_as: str = None , debug_api: bool = True , data_volume_name: str = None ) \u00b6 Bases: idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer host_data_directory : str = None \u00b6 postgres_port : int = 5432 \u00b6 redis_port : int = 6379 \u00b6 ui_port : int = 5000 \u00b6 mem_limit : str = '16g' \u00b6 mem_reservation : str = '64m' \u00b6 run_as : str = None \u00b6 debug_api : bool = True \u00b6 image : str = 'docker-production.packages.idmod.org/idmtools/local_workers:1.2.0' \u00b6 container_name : str = 'idmtools_workers' \u00b6 data_volume_name : str = None \u00b6 config_prefix : str = 'workers_' \u00b6 get_configuration ( ) \u2192 Dict \u00b6 create ( spinner=None ) \u2192 docker.models.containers.Container \u00b6"}, {"title": "idmtools_platform_local.internals.ui.controllers.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.controllers.utils.html", "text": "idmtools_platform_local.internals.ui.controllers.utils module \u00b6 idmtools_platform_local.internals.ui.controllers.utils. validate_tags ( tags ) \u00b6"}, {"title": "idmtools.builders.csv_simulation_builder module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.builders.csv_simulation_builder.html", "text": "idmtools.builders.csv_simulation_builder module \u00b6 class idmtools.builders.csv_simulation_builder. CsvExperimentBuilder \u00b6 Bases: idmtools.builders.simulation_builder.SimulationBuilder Class that represents an experiment builder. Examples \"\"\" This file demonstrates how to use CsvExperimentBuilder in PythonExperiment's builder. then adding the builder to PythonExperiment. We first load a csv file from local dir which contains parameters/values to sweep then sweep parameters based in csv file with CsvExperimentBuilder the csv file basically already lists all possible combinations of parameters you wan to sweep Paramaters names(header) and values in csv file a,b,c,d 1,2,3, 1,3,1, 2,2,3,4 2,2,2,5 2,,3,6 Expect sims with parameters: sim1: {a:1, b:2, c:3} sim2: {a:1, b:3, c:1} sim3: {a:2, b:2, c:3, d:4} sim4: {a:2, b:2, c:2, d:5} sim5: {a:2, c:3, d:6} <-- no 'b' This builder can be used to test or simple scenarios. for example, you may only want to test list of parameter combinations, and do not care about anything else, you can list them in csv file so you do not have to go through traditional sweep method(i.e ExperimentBuilder's) \"\"\" import os import sys from functools import partial import numpy as np from idmtools.builders import CsvExperimentBuilder from idmtools.core.platform_factory import platform from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH # define function partials to be used during sweeps setA = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"a\" ) setB = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"b\" ) setC = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"c\" ) setD = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"d\" ) if __name__ == \"__main__\" : # define what platform we want to use. Here we use a context manager but if you prefer you can # use objects such as Platform('COMPS2') instead with platform ( 'COMPS2' ): # define our base task base_task = JSONConfiguredPythonTask ( script_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model1.py\" ), parameters = dict ( c = 'c-value' )) # define our input csv sweep base_path = os . path . abspath ( os . path . join ( COMMON_INPUT_PATH , \"builder\" )) file_path = os . path . join ( base_path , 'sweeps.csv' ) builder = CsvExperimentBuilder () func_map = { 'a' : setA , 'b' : setB , 'c' : setC , 'd' : setD } type_map = { 'a' : np . int , 'b' : np . int , 'c' : np . int , 'd' : np . int } builder . add_sweeps_from_file ( file_path , func_map , type_map ) # now define we want to create a series of simulations using the base task and the sweep ts = TemplatedSimulations . from_task ( base_task ) # optionally we could update the base simulation metdata here # ts.base_simulations.tags['example'] 'yes' ts . add_builder ( builder ) # define our experiment with its metadata experiment = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 } ) # run the experiment and wait. By default run does not wait # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts experiment . run ( wait_until_done = True ) # use system status as the exit code sys . exit ( 0 if experiment . succeeded else - 1 ) add_sweeps_from_file ( file_path , func_map=None , type_map=None , sep=' , ' ) \u00b6"}, {"title": "idmtools.entities.suite module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.suite.html", "text": "idmtools.entities.suite module \u00b6 class idmtools.entities.suite. Suite ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , experiments: idmtools.core.interfaces.entity_container.EntityContainer = <factory> , description: str = None ) \u00b6 Bases: idmtools.core.interfaces.inamed_entity.INamedEntity , abc.ABC Class that represents a generic suite (a collection of experiments). Parameters experiments \u2013 The child items of this suite. experiments : EntityContainer = None \u00b6 item_type : idmtools.core.enums.ItemType = 1 \u00b6 description : str = None \u00b6 add_experiment ( experiment: Experiment ) \u2192 NoReturn \u00b6 Add an experiment to the suite :param experiment: the experiment to be linked to suite display ( ) \u00b6 pre_creation ( ) \u00b6 Called before the actual creation of the entity. post_creation ( ) \u00b6 Called after the actual creation of the entity. property done \u00b6 Return if an suite has finished executing Returns True if all experiments have ran, False otherwise property succeeded \u00b6 Return if an suite has succeeded. An suite is succeeded when all experiments have succeeded Returns True if all experiments have succeeded, False otherwise run ( wait_until_done: bool = False , platform: IPlatform = None , **run_opts ) \u2192 NoReturn \u00b6 Runs an experiment on a platform Parameters wait_until_done \u2013 Whether we should wait on experiment to finish running as well. Defaults to False platform \u2013 Platform object to use. If not specified, we first check object for platform object then the context ( current ) \u2013 **run_opts \u2013 Options to pass to the platform Returns None wait ( timeout: int = None , refresh_interval=None , platform: IPlatform = None ) \u00b6 Wait on an experiment to finish running Parameters timeout \u2013 Timeout to wait refresh_interval \u2013 How often to refresh object platform \u2013 Platform. If not specified, we try to determine this from context Returns: to_dict ( ) \u2192 Dict \u00b6"}, {"title": "idmtools_platform_comps.comps_operations.experiment_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.experiment_operations.html", "text": "idmtools_platform_comps.comps_operations.experiment_operations module \u00b6 class idmtools_platform_comps.comps_operations.experiment_operations. CompsPlatformExperimentOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.Experiment.Experiment'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations platform : 'COMPSPlatform' = None \u00b6 platform_type \u00b6 alias of COMPS.Data.Experiment.Experiment get ( experiment_id: uuid.UUID , columns: Optional[List[str]] = None , load_children: Optional[List[str]] = None , query_criteria: Optional[COMPS.Data.QueryCriteria.QueryCriteria] = None , **kwargs ) \u2192 COMPS.Data.Experiment.Experiment \u00b6 Fetch experiments from COMPS Parameters experiment_id \u2013 Experiment ID columns \u2013 Optional Columns. If not provided, id, name, and suite_id are fetched load_children \u2013 Optional Children. If not provided, tags and configuration are specified query_criteria \u2013 Optional QueryCriteria **kwargs \u2013 Returns COMPSExperiment with items pre_create ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 NoReturn \u00b6 Pre-create for Experiment. At moment, validation related to COMPS is all that is done Parameters experiment \u2013 Experiment to run pre-create for **kwargs \u2013 Returns: platform_create ( experiment: idmtools.entities.experiment.Experiment , num_cores: Optional[int] = None , executable_path: Optional[str] = None , command_arg: Optional[str] = None , priority: Optional[str] = None , check_command: bool = True ) \u2192 COMPS.Data.Experiment.Experiment \u00b6 Create Experiment on the COMPS Platform Parameters experiment \u2013 IDMTools Experiment to create num_cores \u2013 Optional num of cores to allocate using MPI executable_path \u2013 Executable path command_arg \u2013 Command Argument priority \u2013 Priority of command check_command \u2013 Run task hooks on item Returns COMPSExperiment that was created post_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Ran after experiment. Nothing is done on comps other that alerting the user to the item Parameters experiment \u2013 Experiment to run post run item **kwargs \u2013 Returns None get_children ( experiment: COMPS.Data.Experiment.Experiment , columns: Optional[List[str]] = None , children: Optional[List[str]] = None , **kwargs ) \u2192 List[COMPS.Data.Simulation.Simulation] \u00b6 Get children for a COMPSExperiment Parameters experiment \u2013 Experiment to get children of Comps Experiment columns \u2013 Columns to fetch. If not provided, id, name, experiment_id, and state will be loaded children \u2013 Children to load. If not provided, Tags will be loaded **kwargs \u2013 Returns Simulations belonging to the Experiment get_parent ( experiment: COMPS.Data.Experiment.Experiment , **kwargs ) \u2192 COMPS.Data.Suite.Suite \u00b6 Get Parent of experiment Parameters experiment \u2013 Experiment to get parent of **kwargs \u2013 Returns Suite of the experiment platform_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Run experiment on COMPS. Here we commission the experiment Parameters experiment \u2013 Experiment to run **kwargs \u2013 Returns None send_assets ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Send assets related to the experiment Parameters experiment \u2013 Experiment to send assets for **kwargs \u2013 Returns None refresh_status ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Reload status for experiment(load simulations) Parameters experiment \u2013 Experiment to load status for **kwargs \u2013 Returns None to_entity ( experiment: COMPS.Data.Experiment.Experiment , parent: Optional[COMPS.Data.Suite.Suite] = None , children: bool = True , **kwargs ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Converts a COMPSExperiment to an idmtools Experiment Parameters experiment \u2013 COMPS Experiment objet to convert parent \u2013 Optional suite parent children \u2013 Should we load children objects? **kwargs \u2013 Returns Experiment get_assets_from_comps_experiment ( experiment: COMPS.Data.Experiment.Experiment ) \u2192 Optional[idmtools.assets.asset_collection.AssetCollection] \u00b6 platform_list_asset ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6"}, {"title": "idmtools.entities.iplatform_ops package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.html", "text": "idmtools.entities.iplatform_ops package \u00b6 Submodules \u00b6 idmtools.entities.iplatform_ops.iplatform_asset_collection_operations module idmtools.entities.iplatform_ops.iplatform_experiment_operations module idmtools.entities.iplatform_ops.iplatform_simulation_operations module idmtools.entities.iplatform_ops.iplatform_suite_operations module idmtools.entities.iplatform_ops.iplatform_workflowitem_operations module idmtools.entities.iplatform_ops.utils module Module contents \u00b6"}, {"title": "idmtools_platform_comps.cli package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.cli.html", "text": "idmtools_platform_comps.cli package \u00b6 Submodules \u00b6 idmtools_platform_comps.cli.cli_functions module idmtools_platform_comps.cli.comps module idmtools_platform_comps.cli.utils module Module contents \u00b6"}, {"title": "Search results \u2014 IDM-Tools  documentation", "tags": "", "url": "./search-local.html", "text": "Search results \u00b6"}, {"title": "idmtools.entities.command_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.command_task.html", "text": "idmtools.entities.command_task module \u00b6 class idmtools.entities.command_task. CommandTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, gather_common_asset_hooks: List[Callable[[idmtools.entities.itask.ITask], idmtools.assets.asset_collection.AssetCollection]] = <factory>, gather_transient_asset_hooks: List[Callable[[idmtools.entities.itask.ITask], idmtools.assets.asset_collection.AssetCollection]] = <factory> ) \u00b6 Bases: idmtools.entities.itask.ITask gather_common_asset_hooks : List[Callable[[ITask], AssetCollection]] = None \u00b6 Hooks to gather common assets gather_transient_asset_hooks : List[Callable[[ITask], AssetCollection]] = None \u00b6 Defines an extensible simple task that implements functionality through optional supplied use hooks gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather common(experiment-level) assets for task Returns AssetCollection containing common assets gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather transient(experiment-level) assets for task Returns AssetCollection containing transient assets reload_from_simulation ( simulation: Simulation ) \u00b6 Optional hook that is called when loading simulations from a platform class idmtools.entities.command_task. CommandTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools.entities.command_task.CommandTask \u00b6 Get instance of CommandTask with configuration Parameters configuration \u2013 configuration for CommandTask Returns CommandTask with configuration get_description ( ) \u2192 str \u00b6 Get description of plugin Returns Plugin description get_example_urls ( ) \u2192 List[str] \u00b6 Get example urls related to CommandTask Returns List of urls that have examples related to CommandTask get_type ( ) \u2192 Type[idmtools.entities.command_task.CommandTask] \u00b6 Get task type provided by plugin Returns CommandTask"}, {"title": "idmtools_platform_comps.utils.python_version module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.python_version.html", "text": "idmtools_platform_comps.utils.python_version module \u00b6 idmtools_platform_comps.utils.python_version. platform_task_hooks ( task , platform ) \u00b6 Update task with new python command: python3 :param task: PythonTask or CommandTask :param platform: the platform user uses Returns: re-build task"}, {"title": "idmtools_models.r package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.r.html", "text": "idmtools_models.r package \u00b6 Submodules \u00b6 idmtools_models.r.json_r_task module idmtools_models.r.r_task module Module contents \u00b6"}, {"title": "idmtools_platform_comps.utils.python_requirements_ac.install_requirements module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.python_requirements_ac.install_requirements.html", "text": "idmtools_platform_comps.utils.python_requirements_ac.install_requirements module \u00b6 idmtools_platform_comps.utils.python_requirements_ac.install_requirements. install_packages_from_requirements ( python_paths=None ) \u00b6 Install our packages to a local directory :param requirements_file: requirements file :param python_paths: system Python path Returns: None"}, {"title": "idmtools_platform_local.internals.tasks package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.tasks.html", "text": "idmtools_platform_local.internals.tasks package \u00b6"}, {"title": "idmtools.services package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.services.html", "text": "idmtools.services package \u00b6 Submodules \u00b6 idmtools.services.ipersistance_service module idmtools.services.platforms module Module contents \u00b6"}, {"title": "idmtools_platform_local.infrastructure.redis module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.redis.html", "text": "idmtools_platform_local.infrastructure.redis module \u00b6 class idmtools_platform_local.infrastructure.redis. RedisContainer ( container_name: str = 'idmtools_redis' , image: str = 'redis:5.0.4-alpine' , client: docker.client.DockerClient = None , config_prefix: str = 'redis_' , network: str = None , host_data_directory: str = None , mem_limit: str = '256m' , mem_reservation: str = '64m' , run_as: str = None , port: int = 6379 , data_volume_name: str = None ) \u00b6 Bases: idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer host_data_directory : str = None \u00b6 mem_limit : str = '256m' \u00b6 mem_reservation : str = '64m' \u00b6 run_as : str = None \u00b6 port : int = 6379 \u00b6 image : str = 'redis:5.0.4-alpine' \u00b6 data_volume_name : str = None \u00b6 container_name : str = 'idmtools_redis' \u00b6 config_prefix : str = 'redis_' \u00b6 get_configuration ( ) \u2192 dict \u00b6"}, {"title": "idmtools.utils.collections module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.collections.html", "text": "idmtools.utils.collections module \u00b6 idmtools.utils.collections. cut_iterable_to ( obj: Iterable , to: int ) \u2192 Tuple[Union[List, Mapping], int] \u00b6 Cut an iterable to a certain length. Parameters obj \u2013 The iterable to cut. to \u2013 The number of elements to return. Returns A list or dictionary (depending on the type of object) of elements and the remaining elements in the original list or dictionary. class idmtools.utils.collections. ParentIterator ( lst , parent: IEntity ) \u00b6 Bases: collections.abc.Iterator , typing.Generic append ( item ) \u00b6 class idmtools.utils.collections. ResetGenerator ( generator_init ) \u00b6 Bases: collections.abc.Iterator , typing.Generic Iterator that counts upward forever. next_gen ( ) \u00b6 idmtools.utils.collections. duplicate_list_of_generators ( lst: List[Generator] ) \u00b6 Copy a list of iterators using tee :param lst: List of generators Returns Tuple with duplicate of iterators"}, {"title": "idmtools.entities.relation_type module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.relation_type.html", "text": "idmtools.entities.relation_type module \u00b6 class idmtools.entities.relation_type. RelationType \u00b6 Bases: enum.Enum An enumeration representing the type of relationship for related entities DependsOn = 0 \u00b6 Created = 1 \u00b6"}, {"title": "0.1.0 \u2014 IDM-Tools  documentation", "tags": "", "url": "./changelog_0.1.0.html", "text": "0.1.0 \u00b6 Analyzers \u00b6 #0060 - Analyzer base class Bugs \u00b6 #0095 - idmtools is not working for python 3.6 #0096 - pytest (and pytest-runner) should be installed by setup #0105 - UnicodeDecodeError when run python example in LocalPlatform mode #0114 - It should be possible to set base_simulation in the PythonExperiment constructor #0115 - PythonSimulation constructor should abstract the parameters dict #0124 - Can not run teststest_python_simulation.py from console #0125 - relative_path for AssetCollection does not work #0126 - Same test in issue #125 does not working for localPlatform #0129 - new python model root node changed from \u201cconfig\u201d to \u201cparameters\u201d #0137 - PythonExperiment fails if pass assets #0138 - test_sir.py does not set parameter #0142 - experiment.batch_simulations seems not to be batching #0143 - COMPSPlatform\u2019s refresh_experiment_status() get called too much from ExperimentManager\u2019s wait_till_done() mathod #0150 - missing pandas package #0151 - log throw error from IPersistanceService.py\u2019s save method #0161 - tests/test_python_simulation.py\u2019s test_add_dirs_to_assets_comps() return different asset files for windows and linux #0171 - Workflow: fix loop detection #0203 - Running new builds on Linux fails in Bamboo due to datapostgres-data file folder permissions #0206 - test_python_simulation.py failed for all local test in windows CLI \u00b6 #0007 - Command line functions definition #0118 - Add the printing of children in the EntityContainer Configuration \u00b6 #0047 - Configuration file read on a per-folder basis #0048 - Validation for the configuration file #0049 - Configuration file is setting correct parameters in platform Core \u00b6 #0006 - Service catalog #0014 - Package organization and pre-requisites #0081 - Allows the sweeps to be created in arms #0087 - Raise an exception if we have 2 files with the same relative path in the asset collection #0091 - Refactor the Experiment/Simulation objects to not persist the simulations #0092 - Generalize the simulations/experiments for Experiment/Suite #0102 - [Local Runner] Retrieve simulations for experiment #0107 - LocalPlatform does not detect duplicate files in AssetCollectionFile for pythonExperiment #0140 - Fetch simulations at runtime #0148 - Add python tasks #0180 - switch prettytable for tabulate Documentation \u00b6 #0004 - Notebooks exploration for examples #0085 - Setup Sphinx and GitHub pages for the docs #0090 - \u201cDevelopment installation steps\u201d missing some steps Models \u00b6 #0008 - Which models support out of the box? #0136 - Create an envelope argument for the PythonSimulation Platforms \u00b6 #0068 - [Local Runner] Simulation status monitoring #0069 - [Local Runner] Database #0094 - Batch and parallelize simulation creation in the COMPSPlatform"}, {"title": "idmtools_platform_local.internals.ui.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.utils.html", "text": "idmtools_platform_local.internals.ui.utils module \u00b6 class idmtools_platform_local.internals.ui.utils. DateTimeEncoder ( * , skipkeys=False , ensure_ascii=True , check_circular=True , allow_nan=True , sort_keys=False , indent=None , separators=None , default=None ) \u00b6 Bases: flask.json.JSONEncoder default ( o ) \u00b6 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this: def default ( self , o ): try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) return JSONEncoder . default ( self , o )"}, {"title": "idmtools.core.cache_enabled module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.cache_enabled.html", "text": "idmtools.core.cache_enabled module \u00b6 class idmtools.core.cache_enabled. CacheEnabled \u00b6 Bases: object Allows a class to leverage Diskcache and expose a cache property. initialize_cache ( shards: Optional[int] = None , eviction_policy=None ) \u00b6 Initialize cache Parameters shards ( Optional [ int ] , optional ) \u2013 How many shards. It is best to set this when multi-procressing Defaults to None. eviction_policy ( [ type ] , optional ) \u2013 See Diskcache docs. Defaults to None. cleanup_cache ( ) \u00b6 property cache \u00b6"}, {"title": "idmtools.utils.filter_simulations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.filter_simulations.html", "text": "idmtools.utils.filter_simulations module \u00b6 class idmtools.utils.filter_simulations. FilterItem \u00b6 Bases: object static filter_item ( platform: idmtools.entities.iplatform.IPlatform , item: idmtools.core.interfaces.ientity.IEntity , skip_sims=[] , max_simulations: int = None , **kwargs ) \u00b6 Filter simulations from Experiment or Suite, by default it filter status with Succeeded. If user wants to filter by other status, it also can be done, for example: filter_item ( platform , exp , status = EntityStatus . FAILED If user wants to filter by tags, it also can be done, for example: filter_item ( platform , exp , tags = { 'Run_Number' : '2' }) Parameters platform \u2013 item \u2013 skip_sims \u2013 list of sim ids max_simulations \u2013 kwargs \u2013 extra filters Returns: list of simulation ids classmethod filter_item_by_id ( platform: idmtools.entities.iplatform.IPlatform , item_id: uuid.UUID , item_type: idmtools.core.enums.ItemType = <ItemType.EXPERIMENT: 2> , skip_sims=[] , max_simulations: int = None , **kwargs ) \u00b6 Filter simulations from Experiment or Suite :param platform: COMPSPlatform :param item_id: Experiment/Suite id :param item_type: Experiment or Suite :param skip_sims: list of sim ids :param max_simulations: #sims to be returned :param kwargs: extra filters Returns: list of simulation ids"}, {"title": "idmtools_platform_local.infrastructure package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.html", "text": "idmtools_platform_local.infrastructure package \u00b6 Submodules \u00b6 idmtools_platform_local.infrastructure.base_service_container module idmtools_platform_local.infrastructure.docker_io module idmtools_platform_local.infrastructure.postgres module idmtools_platform_local.infrastructure.redis module idmtools_platform_local.infrastructure.service_manager module idmtools_platform_local.infrastructure.workers module Module contents \u00b6"}, {"title": "idmtools_platform_local.infrastructure.service_manager module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.service_manager.html", "text": "idmtools_platform_local.infrastructure.service_manager module \u00b6 class idmtools_platform_local.infrastructure.service_manager. DockerServiceManager ( client: docker.client.DockerClient , host_data_directory: str = '/home/runner/.local_data' , network: str = 'idmtools' , redis_image: str = 'redis:5.0.4-alpine' , heartbeat_timeout: int = 15 , redis_port: int = 6379 , runtime: Union[str , NoneType] = 'runc' , redis_mem_limit: str = '256m' , redis_mem_reservation: str = '32m' , postgres_image: str = 'postgres:11.4' , postgres_mem_limit: str = '128m' , postgres_mem_reservation: str = '32m' , postgres_port: Union[str , NoneType] = 5432 , workers_image: str = None , workers_ui_port: int = 5000 , workers_mem_limit: str = None , workers_mem_reservation: str = '64m' , run_as: Union[str , NoneType] = None , _services: Dict[str , idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer] = None ) \u00b6 Bases: object client : DockerClient = None \u00b6 host_data_directory : str = '/home/runner/.local_data' \u00b6 network : str = 'idmtools' \u00b6 redis_image : str = 'redis:5.0.4-alpine' \u00b6 heartbeat_timeout : int = 15 \u00b6 redis_port : int = 6379 \u00b6 runtime : Optional[str] = 'runc' \u00b6 redis_mem_limit : str = '256m' \u00b6 redis_mem_reservation : str = '32m' \u00b6 postgres_image : str = 'postgres:11.4' \u00b6 postgres_mem_limit : str = '128m' \u00b6 postgres_mem_reservation : str = '32m' \u00b6 postgres_port : Optional[str] = 5432 \u00b6 workers_image : str = None \u00b6 workers_ui_port : int = 5000 \u00b6 workers_mem_limit : str = None \u00b6 workers_mem_reservation : str = '64m' \u00b6 run_as : Optional[str] = None \u00b6 init_services ( ) \u00b6 cleanup ( delete_data: bool = False , tear_down_brokers: bool = False ) \u2192 NoReturn \u00b6 Stops the containers and removes the network. Optionally the postgres data container can be deleted as well as closing any active Redis connections Parameters delete_data \u2013 Delete postgres data tear_down_brokers \u2013 True to close redis brokers, false otherwise Returns NoReturn static setup_broker ( heartbeat_timeout ) \u00b6 static restart_brokers ( heartbeat_timeout ) \u00b6 create_services ( spinner=None ) \u2192 NoReturn \u00b6 Create all the components of our Our architecture is as depicted in the UML diagram below Returns (NoReturn) wait_on_ports_to_open ( ports: List[str], wait_between_tries: Union[int, float] = 0.2, max_retries: int = 5, sleep_after: Union[int, float] = 0.5 ) \u2192 bool \u00b6 Polls list of port attributes(eg postgres_port, redis_port and checks if they are currently open. We use this to verify postgres/redis are ready for our workers Parameters ports \u2013 List of port attributes wait_between_tries \u2013 Time between port checks max_retries \u2013 Max checks sleep_after \u2013 Sleep after all our found open(Postgres starts accepting connections before actually ready) Returns True if ports are ready stop_services ( spinner=None ) \u2192 NoReturn \u00b6 Stops all running IDM Tools services Returns (NoReturn) get ( container_name: str , create=True ) \u2192 docker.models.containers.Container \u00b6 Get the server with specified name Parameters container_name \u2013 Name of container create \u2013 Create if it doesn\u2019t exists Returns: get_container_config ( service: idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer , opts=None ) \u00b6 Get the container config for the service Parameters service \u2013 Service to get config for opts \u2013 Opts to Extract. Should be a fields object Returns: restart_all ( spinner=None ) \u2192 NoReturn \u00b6 Restart all the services IDM-Tools services Returns (NoReturn) static is_port_open ( host: str , port: int ) \u2192 bool \u00b6 Check if a port is open Parameters host \u2013 Host to check port \u2013 Port to check Returns True if port is open, False otherwise static stop_service_and_wait ( service ) \u2192 bool \u00b6 Stop server and wait Parameters service \u2013 Service to stop Returns: get_network ( ) \u2192 docker.models.networks.Network \u00b6 Fetches the IDM Tools network Returns (Network) Return Docker network object"}, {"title": "idmtools.analysis.analyze_manager module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.analyze_manager.html", "text": "idmtools.analysis.analyze_manager module \u00b6 idmtools.analysis.analyze_manager. pool_worker_initializer ( func , analyzers , cache , platform: IPlatform ) \u2192 NoReturn \u00b6 Initialize the pool worker, which allows the process pool to associate the analyzers, cache, and path mapping to the function executed to retrieve data. Using an initializer improves performance. Parameters func \u2013 The function that the pool will call. analyzers \u2013 The list of all analyzers to run. cache \u2013 The cache object. platform \u2013 The platform to communicate with to retrieve files from. Returns None class idmtools.analysis.analyze_manager. AnalyzeManager ( platform: IPlatform = None, configuration: dict = None, ids: List[Tuple[Union[str, uuid.UUID], idmtools.core.enums.ItemType]] = None, analyzers: List[idmtools.entities.ianalyzer.IAnalyzer] = None, working_dir: str = '/home/runner/work/idmtools/idmtools/idmtools/docs', partial_analyze_ok: bool = False, max_items: Optional[int] = None, verbose: bool = True, force_manager_working_directory: bool = False, exclude_ids: List[Union[str, uuid.UUID]] = None, analyze_failed_items: bool = False ) \u00b6 Bases: idmtools.core.cache_enabled.CacheEnabled ANALYZE_TIMEOUT = 28800 \u00b6 WAIT_TIME = 1.15 \u00b6 EXCEPTION_KEY = '__EXCEPTION__' \u00b6 exception TimeOutException \u00b6 Bases: Exception exception ItemsNotReady \u00b6 Bases: Exception add_item ( item: idmtools.core.interfaces.ientity.IEntity ) \u2192 NoReturn \u00b6 Add an additional item for analysis. Parameters item \u2013 The new item to add for analysis. Returns None add_analyzer ( analyzer: idmtools.entities.ianalyzer.IAnalyzer ) \u2192 NoReturn \u00b6 Add another analyzer to use on the items to be analyzed. Parameters analyzer \u2013 An analyzer object ( IAnalyzer ). Returns: analyze ( ) \u2192 bool \u00b6 Process the provided items with the provided analyzers. This is the main driver method of AnalyzeManager . Returns True on success; False on failure/exception."}, {"title": "idmtools_platform_comps.comps_cli module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_cli.html", "text": "idmtools_platform_comps.comps_cli module \u00b6 class idmtools_platform_comps.comps_cli. CompsCLI \u00b6 Bases: idmtools_cli.iplatform_cli.IPlatformCLI get_experiment_status ( *args , **kwargs ) \u2192 NoReturn \u00b6 Parameters id \u2013 tags \u2013 Returns: get_simulation_status ( *args , **kwargs ) \u2192 NoReturn \u00b6 Parameters id \u2013 experiment_id \u2013 status \u2013 tags \u2013 Returns: get_platform_information ( ) \u2192 dict \u00b6 class idmtools_platform_comps.comps_cli. COMPSCLISpecification \u00b6 Bases: idmtools_cli.iplatform_cli.PlatformCLISpecification get ( configuration: dict ) \u2192 idmtools_platform_comps.comps_cli.CompsCLI \u00b6 Factor that should return a new platform using the passed in configuration :param configuration: Returns: get_additional_commands ( ) \u2192 NoReturn \u00b6 get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description."}, {"title": "idmtools_platform_local.cli.local module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.cli.local.html", "text": "idmtools_platform_local.cli.local module \u00b6 class idmtools_platform_local.cli.local. LocalCliContext ( config=None ) \u00b6 Bases: object do : idmtools_platform_local.infrastructure.docker_io.DockerIO = None \u00b6 sm : idmtools_platform_local.infrastructure.service_manager.DockerServiceManager = None \u00b6 idmtools_platform_local.cli.local. cli_command_type \u00b6 alias of idmtools_platform_local.cli.local.LocalCliContext idmtools_platform_local.cli.local. stop_services ( cli_context: idmtools_platform_local.cli.local.LocalCliContext , delete_data ) \u00b6 idmtools_platform_local.cli.local. container_status_text ( name , container ) \u00b6"}, {"title": "idmtools.core.experiment_factory module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.experiment_factory.html", "text": "idmtools.core.experiment_factory module \u00b6 class idmtools.core.experiment_factory. ExperimentFactory \u00b6 Bases: object DEFAULT_KEY = 'idmtools.entities.experiment.Experiment' \u00b6 create ( key , fallback=None , **kwargs ) \u2192 idmtools.entities.experiment.Experiment \u00b6"}, {"title": "idmtools.config.idm_config_parser module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.config.idm_config_parser.html", "text": "idmtools.config.idm_config_parser module \u00b6 idmtools.config.idm_config_parser. initialization ( error=False , force=False ) \u00b6 class idmtools.config.idm_config_parser. IdmConfigParser \u00b6 Bases: object Class that parses an INI configuration file. classmethod retrieve_dict_config_block ( field_type , section ) \u2192 Dict[str, Any] \u00b6 classmethod retrieve_settings ( ) \u00b6 classmethod get_section ( *args , **kwargs ) \u00b6 classmethod get_option ( *args , **kwargs ) \u00b6 classmethod ensure_init ( dir_path: str = '.' , file_name: str = 'idmtools.ini' , error: bool = False , force=False ) \u2192 None \u00b6 Verify that the INI file loaded and a configparser instance is available. Parameters dir_path \u2013 The directory to search for the INI configuration file. file_name \u2013 The configuration file name to search for. Returns None Raises ValueError \u2013 If the config file is found but cannot be parsed classmethod get_config_path ( *args , **kwargs ) \u00b6 classmethod display_config_path ( *args , **kwargs ) \u00b6 classmethod view_config_file ( *args , **kwargs ) \u00b6 classmethod display_config_block_details ( block ) \u00b6 Display the values of a config block Parameters block \u2013 Block to print Returns None classmethod has_section ( *args , **kwargs ) \u00b6 classmethod has_option ( ) \u00b6 classmethod found_ini ( ) \u2192 bool \u00b6 Did we find the config? Returns True if did, False Otherwise classmethod clear_instance ( ) \u2192 None \u00b6 Uninitialize and clean the IdmConfigParser instance. Returns None"}, {"title": "idmtools.core.system_information module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.system_information.html", "text": "idmtools.core.system_information module \u00b6 idmtools.core.system_information. get_data_directory ( ) \u2192 str \u00b6 idmtools.core.system_information. get_filtered_environment_vars ( exclude=None ) \u00b6 class idmtools.core.system_information. SystemInformation ( data_directory: Union[str , NoneType] = '/home/runner/.local_data' , user: Union[str , NoneType] = 'runner' , python_version: str = '3.7.7' , python_build: str = ('default' , 'Jun 9 2020 16:52:41') , python_packages: List[str] = <factory> , environment_variables: Dict[str , str] = <factory> , os_name: str = 'Linux' , hostname: str = 'fv-az95' , system_version: str = '#29~18.04.1-Ubuntu SMP Fri Jun 5 14:32:34 UTC 2020' , system_architecture: str = 'x86_64' , system_processor: str = 'x86_64' , system_architecture_details: str = ('64bit' , '') , default_docket_socket_path: str = '/var/run/docker.sock' , cwd: str = '/home/runner/work/idmtools/idmtools/idmtools/docs' , user_group_str: str = '1000:1000' , version: str = '1.2.0.0' ) \u00b6 Bases: object data_directory : Optional[str] = '/home/runner/.local_data' \u00b6 user : Optional[str] = 'runner' \u00b6 python_version : str = '3.7.7' \u00b6 python_build : str = ('default', 'Jun 9 2020 16:52:41') \u00b6 python_implementation = 'CPython' \u00b6 python_packages : List[str] = None \u00b6 environment_variables : Dict[str, str] = None \u00b6 os_name : str = 'Linux' \u00b6 hostname : str = 'fv-az95' \u00b6 system_version : str = '#29~18.04.1-Ubuntu SMP Fri Jun 5 14:32:34 UTC 2020' \u00b6 system_architecture : str = 'x86_64' \u00b6 system_processor : str = 'x86_64' \u00b6 system_architecture_details : str = ('64bit', '') \u00b6 default_docket_socket_path : str = '/var/run/docker.sock' \u00b6 cwd : str = '/home/runner/work/idmtools/idmtools/idmtools/docs' \u00b6 user_group_str : str = '1000:1000' \u00b6 version : str = '1.2.0.0' \u00b6 class idmtools.core.system_information. LinuxSystemInformation ( data_directory: Union[str , NoneType] = '/home/runner/.local_data' , user: Union[str , NoneType] = 'runner' , python_version: str = '3.7.7' , python_build: str = ('default' , 'Jun 9 2020 16:52:41') , python_packages: List[str] = <factory> , environment_variables: Dict[str , str] = <factory> , os_name: str = 'Linux' , hostname: str = 'fv-az95' , system_version: str = '#29~18.04.1-Ubuntu SMP Fri Jun 5 14:32:34 UTC 2020' , system_architecture: str = 'x86_64' , system_processor: str = 'x86_64' , system_architecture_details: str = ('64bit' , '') , default_docket_socket_path: str = '/var/run/docker.sock' , cwd: str = '/home/runner/work/idmtools/idmtools/idmtools/docs' , user_group_str: str = <factory> , version: str = '1.2.0.0' ) \u00b6 Bases: idmtools.core.system_information.SystemInformation class idmtools.core.system_information. WindowsSystemInformation ( data_directory: Optional[str] = '/home/runner/.local_data' , user: Optional[str] = 'runner' , python_version: str = '3.7.7' , python_build: str = ('default' , 'Jun 9 2020 16:52:41') , python_packages: List[str] = <factory> , environment_variables: Dict[str , str] = <factory> , os_name: str = 'Linux' , hostname: str = 'fv-az95' , system_version: str = '#29~18.04.1-Ubuntu SMP Fri Jun 5 14:32:34 UTC 2020' , system_architecture: str = 'x86_64' , system_processor: str = 'x86_64' , system_architecture_details: str = ('64bit' , '') , default_docket_socket_path: str = '/var/run/docker.sock' , cwd: str = '/home/runner/work/idmtools/idmtools/idmtools/docs' , user_group_str: str = '1000:1000' , version: str = '1.2.0.0' ) \u00b6 Bases: idmtools.core.system_information.SystemInformation default_docket_socket_path : str = '//var/run/docker.sock' \u00b6 idmtools.core.system_information. get_system_information ( ) \u2192 idmtools.core.system_information.SystemInformation \u00b6 Fetch the system-appropriate information inspection object. Returns SystemInformation with platform-specific implementation."}, {"title": "idmtools.utils.decorators module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.decorators.html", "text": "idmtools.utils.decorators module \u00b6 class idmtools.utils.decorators. abstractstatic ( function ) \u00b6 Bases: staticmethod A decorator for defining a method both as static and abstract. idmtools.utils.decorators. optional_decorator ( decorator: Callable, condition: Union[bool, Callable[[], bool]] ) \u00b6 class idmtools.utils.decorators. SingletonDecorator ( klass ) \u00b6 Bases: object Wraps a class in a singleton decorator. Example In the below example, we would print out 99 since z is referring to the same object as x : class Thing : y = 14 Thing = SingletonDecorator ( Thing ) x = Thing () x . y = 99 z = Thing () print ( z . y ) class idmtools.utils.decorators. LoadOnCallSingletonDecorator ( klass ) \u00b6 Bases: object Additional class decorator that creates a singleton instance only when a method or attribute is accessed. This is useful for expensive tasks like loading plugin factories that should only be executed when finally needed and not on declaration. Examples import time class ExpensiveFactory : def __init__ (): time . sleep ( 1000 ) self . items = [ 'a' , 'b' , 'c' ] def get_items (): return self . items ExpensiveFactory = LoadOnCallSingletonDecorator ( ExpensiveFactory ) ExpensiveFactory . get_items () ensure_created ( ) \u00b6 idmtools.utils.decorators. cache_for ( ttl=datetime.timedelta(seconds=60) ) \u00b6 idmtools.utils.decorators. optional_yaspin_load ( *yargs , **ykwargs ) \u2192 Callable \u00b6 Adds a CLI spinner to a function if: yaspin package is present. NO_SPINNER environment variable is not defined. Parameters *yargs \u2013 Arguments to pass to yaspin constructor. **ykwargs \u2013 Keyword arguments to pass to yaspin constructor. Examples @optional_yaspin_load ( text = \"Loading test\" , color = \"yellow\" ) def test (): time . sleep ( 100 ) Returns A callable wrapper function. class idmtools.utils.decorators. ParallelizeDecorator ( queue=None , pool_type: Optional[Type[concurrent.futures._base.Executor]] = <class 'concurrent.futures.thread.ThreadPoolExecutor'> ) \u00b6 Bases: object ParallelizeDecorator allows you to easily parallelize a group of code. A simple of example would be Examples op_queue = ParallelizeDecorator () class Ops : op_queue . parallelize def heavy_op (): time . sleep ( 10 ) def do_lots_of_heavy (): futures = [ self . heavy_op () for i in range ( 100 )] results = op_queue . get_results ( futures ) parallelize ( func ) \u00b6 join ( ) \u00b6 get_results ( futures , ordered=False ) \u00b6"}, {"title": "DTK-Tools example analyzer \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-convert-dtk.html", "text": "DTK-Tools example analyzer \u00b6 The following DTK-Tools example performs analysis on simulation output data in .csv files and returns the result data in a .csv file: import os import pandas as pd from simtools.Analysis.BaseAnalyzers import BaseAnalyzer from simtools.Analysis.AnalyzeManager import AnalyzeManager from simtools.SetupParser import SetupParser class CSVAnalyzer ( BaseAnalyzer ): def __init__ ( self , filenames , parse = True ): super () . __init__ ( parse = parse , filenames = filenames ) if not all ([ 'csv' in os . path . splitext ( f )[ 1 ] . lower () for f in self . filenames ]): raise Exception ( 'Please ensure all filenames provided to CSVAnalyzer have a csv extension.' ) def initialize ( self ): if not os . path . exists ( os . path . join ( self . working_dir , \"output_csv\" )): os . mkdir ( os . path . join ( self . working_dir , \"output_csv\" )) def select_simulation_data ( self , data , simulation ): concatenated_df = pd . concat ( list ( data . values ()), axis = 0 , ignore_index = True , sort = True ) return concatenated_df def finalize ( self , all_data : dict ) -> dict : results = pd . concat ( list ( all_data . values ()), axis = 0 , keys = [ k . id for k in all_data . keys ()], names = [ 'SimId' ]) results . index = results . index . droplevel ( 1 ) results . to_csv ( os . path . join ( \"output_csv\" , self . __class__ . __name__ + '.csv' )) if __name__ == \"__main__\" : SetupParser . init ( selected_block = 'HPC' , setup_file = \"simtools.ini\" ) filenames = [ 'output/c.csv' ] analyzers = [ CSVAnalyzer ( filenames = filenames )] manager = AnalyzeManager ( '9311af40-1337-ea11-a2be-f0921c167861' , analyzers = analyzers ) manager . analyze ()"}, {"title": "DTK-Tools converted to IDM-Tools \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-convert-idmt.html", "text": "DTK-Tools converted to IDM-Tools \u00b6 The following converted from DTK-Tools to IDM-Tools example performs analysis on simulation output data in .csv files and returns the result data in a .csv file: import os import pandas as pd from idmtools.entities import IAnalyzer from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.core import ItemType from idmtools.core.platform_factory import Platform class CSVAnalyzer ( IAnalyzer ): def __init__ ( self , filenames , parse = True ): super () . __init__ ( parse = parse , filenames = filenames ) if not all ([ 'csv' in os . path . splitext ( f )[ 1 ] . lower () for f in self . filenames ]): raise Exception ( 'Please ensure all filenames provided to CSVAnalyzer have a csv extension.' ) def initialize ( self ): if not os . path . exists ( os . path . join ( self . working_dir , \"output_csv\" )): os . mkdir ( os . path . join ( self . working_dir , \"output_csv\" )) def map ( self , data , simulation ): concatenated_df = pd . concat ( list ( data . values ()), axis = 0 , ignore_index = True , sort = True ) return concatenated_df def reduce ( self , all_data ): results = pd . concat ( list ( all_data . values ()), axis = 0 , keys = [ k . id for k in all_data . keys ()], names = [ 'SimId' ]) results . index = results . index . droplevel ( 1 ) results . to_csv ( os . path . join ( \"output_csv\" , self . __class__ . __name__ + '.csv' )) if __name__ == '__main__' : platform = Platform ( 'COMPS' ) filenames = [ 'output/c.csv' ] analyzers = [ CSVAnalyzer ( filenames = filenames )] experiment_id = '9311af40-1337-ea11-a2be-f0921c167861' manager = AnalyzeManager ( configuration = {}, partial_analyze_ok = True , platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () You can quickly see this analyzer in use by running the included example_analysis_CSVAnalyzer example class."}, {"title": "idmtools.core.context module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.context.html", "text": "idmtools.core.context module \u00b6 idmtools.core.context. set_current_platform ( platform: IPlatform ) \u00b6 idmtools.core.context. remove_current_platform ( ) \u00b6"}, {"title": "idmtools_platform_local.config module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.config.html", "text": "idmtools_platform_local.config module \u00b6 idmtools_platform_local.config. get_api_path ( ) \u00b6"}, {"title": "idmtools_platform_local.status module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.status.html", "text": "idmtools_platform_local.status module \u00b6 class idmtools_platform_local.status. Status \u00b6 Bases: enum.Enum Our status enum for jobs created = 'created' \u00b6 in_progress = 'in_progress' \u00b6 canceled = 'canceled' \u00b6 failed = 'failed' \u00b6 done = 'done' \u00b6"}, {"title": "idmtools.builders.yaml_simulation_builder module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.builders.yaml_simulation_builder.html", "text": "idmtools.builders.yaml_simulation_builder module \u00b6 class idmtools.builders.yaml_simulation_builder. YamlSimulationBuilder \u00b6 Bases: idmtools.builders.arm_simulation_builder.ArmSimulationBuilder Class that represents an experiment builder. Examples \"\"\" This file demonstrates how to use YamlExperimentBuilder in PythonExperiment's builder. then adding the builder to PythonExperiment. We first load a yaml file from local dir which contains parameters/values to sweep then sweep parameters based in yaml file with YamlExperimentBuilder Behind the scenes, we are using arm sweep, each group is treated with SweepArm and then add to builder Parameters in yaml file group1: - a: 1 - b: 2 - c: [3, 4] - d: [5, 6] group2: - c: [3, 4] - d: [5, 6, 7] Expect sims with parameters: sim1: {a:1, b:2, c:3, d:5} sim2: {a:1, b:2, c:3, d:6} sim3: {a:1, b:2, c:4, d:5} sim4: {a:1, b:2, c:4, d:6} sim5: {c:3, d:5} sim6: {c:3, d:6} sim7: {c:3, d:7} sim8: {c:4, d:5} sim9: {c:4, d:6} sim10: {c:4, d:7} This builder is very similar with ArmExperimentBuilder. but in more direct way. you just need list all cared parameter combinations in yaml file, and let builder do the job \"\"\" import os import sys from functools import partial from idmtools.builders import YamlSimulationBuilder from idmtools.core.platform_factory import platform from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH # define function partials to be used during sweeps setA = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"a\" ) setB = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"b\" ) setC = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"c\" ) setD = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"d\" ) if __name__ == \"__main__\" : # define what platform we want to use. Here we use a context manager but if you prefer you can # use objects such as Platform('COMPS2') instead with platform ( 'COMPS2' ): # define our base task base_task = JSONConfiguredPythonTask ( script_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model1.py\" ), parameters = dict ( c = 'c-value' )) # define our input csv sweep base_path = os . path . abspath ( os . path . join ( COMMON_INPUT_PATH , \"builder\" )) file_path = os . path . join ( base_path , 'sweeps.yaml' ) builder = YamlSimulationBuilder () # define a list of functions to map the specific yaml values func_map = { 'a' : setA , 'b' : setB , 'c' : setC , 'd' : setD } builder . add_sweeps_from_file ( file_path , func_map ) # now define we want to create a series of simulations using the base task and the sweep ts = TemplatedSimulations . from_task ( base_task ) # optionally we could update the base simulation metdata here # ts.base_simulations.tags['example'] 'yes' ts . add_builder ( builder ) # define our experiment from our template and add some metadata to the experiment experiment = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 } ) # run the experiment and wait. By default run does not wait # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts experiment . run ( wait_until_done = True ) # use system status as the exit code sys . exit ( 0 if experiment . succeeded else - 1 ) add_sweeps_from_file ( file_path , func_map=None , sweep_type=<ArmType.cross: 0> ) \u00b6"}, {"title": "Cookiecutter example projects \u2014 IDM-Tools  documentation", "tags": "", "url": "./cookiecutters.html", "text": "Cookiecutter example projects \u00b6 Landing page to link to Cookiecutter projects."}, {"title": "idmtools.entities.iplatform module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform.html", "text": "idmtools.entities.iplatform module \u00b6 class idmtools.entities.iplatform. IPlatform ( _uid: uuid.UUID = None ) \u00b6 Bases: idmtools.core.interfaces.iitem.IItem , idmtools.core.cache_enabled.CacheEnabled Interface defining a platform. A platform needs to implement basic operation such as: Creating experiment Creating simulation Commissioning File handling platform_type_map : Dict[Type, idmtools.core.enums.ItemType] = None \u00b6 supported_types : Set[ItemType] = None \u00b6 static get_caller ( ) \u00b6 Trace the stack and find the caller. Returns The direct caller. validate_inputs_types ( ) \u2192 NoReturn \u00b6 Validate user inputs and case attributes with the correct data types. Returns None get_item ( item_id: Union[str, uuid.UUID], item_type: idmtools.core.enums.ItemType = None, force: bool = False, raw: bool = False, **kwargs ) \u2192 Any \u00b6 Retrieve an object from the platform. This function is cached; force allows you to force the refresh of the cache. If no object_type is passed, the function will try all the types (experiment, suite, simulation). Parameters item_id \u2013 The ID of the object to retrieve. item_type \u2013 The type of the object to be retrieved. force \u2013 If True, force the object fetching from the platform. raw \u2013 Return either an IDM-Tools object or a platform object. Returns The object found on the platform or None. Raises ValueError \u2013 If the item type is not supported get_children ( item_id: uuid.UUID , item_type: idmtools.core.enums.ItemType , force: bool = False , raw: bool = False , item: Any = None , **kwargs ) \u2192 Any \u00b6 Retrieve the children of a given object. Parameters item_id \u2013 The ID of the object for which we want the children. force \u2013 If True, force the object fetching from the platform. raw \u2013 Return either an IDM-Tools object or a platform object. item_type \u2013 Pass the type of the object for quicker retrieval. item \u2013 optional platform or idm item to use instead of loading Returns The children of the object or None. get_children_by_object ( parent: idmtools.core.interfaces.ientity.IEntity ) \u2192 List[idmtools.core.interfaces.ientity.IEntity] \u00b6 Returns a list of children for an entity Parameters parent \u2013 Parent object Returns List of children get_parent_by_object ( child: idmtools.core.interfaces.ientity.IEntity ) \u2192 idmtools.core.interfaces.ientity.IEntity \u00b6 Parent of object Parameters child \u2013 Child object to find parent for Returns Returns parent object get_parent ( item_id: uuid.UUID , item_type: idmtools.core.enums.ItemType = None , force: bool = False , raw: bool = False , **kwargs ) \u00b6 Retrieve the parent of a given object. Parameters item_id \u2013 The ID of the object for which we want the parent. force \u2013 If True, force the object fetching from the platform. raw \u2013 Return either an IDM-Tools object or a platform object. item_type \u2013 Pass the type of the object for quicker retrieval. Returns The parent of the object or None. get_cache_key ( force , item_id , item_type , kwargs , raw , prefix='p' ) \u00b6 create_items ( items: Union[List[idmtools.core.interfaces.ientity.IEntity], idmtools.core.interfaces.ientity.IEntity] ) \u2192 List[idmtools.core.interfaces.ientity.IEntity] \u00b6 Create items (simulations, experiments, or suites) on the platform. The function will batch the items based on type and call the self._create_batch for creation :param items: The list of items to create. Returns List of item IDs created. run_items ( items: Union[idmtools.core.interfaces.ientity.IEntity, List[idmtools.core.interfaces.ientity.IEntity]], **kwargs ) \u00b6 Run items on the platform. :param items: Returns: flatten_item ( item: idmtools.core.interfaces.ientity.IEntity ) \u2192 List[idmtools.core.interfaces.ientity.IEntity] \u00b6 Flatten an item: resolve the children until getting to the leaves. For example, for an experiment, will return all the simulations. For a suite, will return all the simulations contained in the suites experiments. Parameters item \u2013 Which item to flatten Returns List of leaves refresh_status ( item: idmtools.core.interfaces.ientity.IEntity ) \u2192 NoReturn \u00b6 Populate the platform item and specified item with its status. Parameters item \u2013 The item to check status for. get_files ( item: idmtools.core.interfaces.ientity.IEntity, files: Union[Set[str], List[str]], output: str = None ) \u2192 Union[Dict[str, Dict[str, bytearray]], Dict[str, bytearray]] \u00b6 Get files for a platform entity Parameters item \u2013 Item to fetch files for files \u2013 List of file names to get output \u2013 save files to Returns For simulations, this returns a dictionary with filename as key and values being binary data from file or a dict. For experiments, this returns a dictionary with key as sim id and then the values as a dict of the simulations described above get_files_by_id ( item_id: uuid.UUID, item_type: idmtools.core.enums.ItemType, files: Union[Set[str], List[str]], output: str = None ) \u2192 Union[Dict[str, Dict[str, bytearray]], Dict[str, bytearray]] \u00b6 Get files by item id (UUID) :param item_id: COMPS Item, say, Simulation Id or WorkItem Id :param item_type: Item Type :param files: List of files to retrieve :param output: save files to Returns: dict with key/value: file_name/file_content are_requirements_met ( requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] ) \u2192 bool \u00b6 Does the platform support the list of requirements Parameters requirements \u2013 Requirements Returns True if all the requirements are supported is_task_supported ( task: idmtools.entities.itask.ITask ) \u2192 bool \u00b6 Is a task supported on this platform. This depends on the task properly setting its requirements. See idmtools.entities.itask.ITask.platform_requirements and idmtools.entities.platform_requirements.PlatformRequirements Parameters task \u2013 Task to check support of Returns True if the task is supported, False otherwise. wait_till_done ( item: Union[idmtools.entities.experiment.Experiment, idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.suite.Suite], timeout: int = 86400, refresh_interval: int = 5, progress: bool = True ) \u00b6 Wait for the experiment to be done. Parameters item \u2013 Experiment/Workitem to wait on refresh_interval \u2013 How long to wait between polling. timeout \u2013 How long to wait before failing. progress \u2013 Should we display progress See also idmtools.entities.iplatform.IPlatform.wait_till_done_progress() idmtools.entities.iplatform.IPlatform.__wait_until_done_progress_callback() idmtools.entities.iplatform.IPlatform.__wait_till_callback() wait_till_done_progress ( item: Union[idmtools.entities.experiment.Experiment, idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.suite.Suite], timeout: int = 86400, refresh_interval: int = 5 ) \u00b6 Wait on an item to complete with progress bar Parameters item \u2013 Item to monitor timeout \u2013 Timeout on waiting refresh_interval \u2013 How often to refresh Returns None See also idmtools.entities.iplatform.IPlatform.__wait_until_done_progress_callback() idmtools.entities.iplatform.IPlatform.wait_till_done() idmtools.entities.iplatform.IPlatform.__wait_till_callback() get_related_items ( item: idmtools.entities.iworkflow_item.IWorkflowItem , relation_type: idmtools.entities.relation_type.RelationType ) \u2192 Dict[str, Dict[str, str]] \u00b6 Retrieve all related objects :param item: SSMTWorkItem :param relation_type: Depends or Create Returns: dict with key the object type"}, {"title": "idmtools_platform_local package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.html", "text": "idmtools_platform_local package \u00b6 Subpackages \u00b6 idmtools_platform_local.cli package Submodules idmtools_platform_local.cli.experiment module idmtools_platform_local.cli.local module idmtools_platform_local.cli.simulation module idmtools_platform_local.cli.utils module Module contents idmtools_platform_local.client package Submodules idmtools_platform_local.client.base module idmtools_platform_local.client.experiments_client module idmtools_platform_local.client.healthcheck_client module idmtools_platform_local.client.simulations_client module Module contents idmtools_platform_local.infrastructure package Submodules idmtools_platform_local.infrastructure.base_service_container module idmtools_platform_local.infrastructure.docker_io module idmtools_platform_local.infrastructure.postgres module idmtools_platform_local.infrastructure.redis module idmtools_platform_local.infrastructure.service_manager module idmtools_platform_local.infrastructure.workers module Module contents idmtools_platform_local.internals package Subpackages idmtools_platform_local.internals.data package Submodules idmtools_platform_local.internals.data.job_status module Module contents idmtools_platform_local.internals.tasks package idmtools_platform_local.internals.ui package Subpackages idmtools_platform_local.internals.ui.controllers package Submodules idmtools_platform_local.internals.ui.controllers.experiments module idmtools_platform_local.internals.ui.controllers.healthcheck module idmtools_platform_local.internals.ui.controllers.simulations module idmtools_platform_local.internals.ui.controllers.utils module Module contents Submodules idmtools_platform_local.internals.ui.app module idmtools_platform_local.internals.ui.config module idmtools_platform_local.internals.ui.utils module Module contents idmtools_platform_local.internals.workers package Submodules idmtools_platform_local.internals.workers.brokers module idmtools_platform_local.internals.workers.database module idmtools_platform_local.internals.workers.run module idmtools_platform_local.internals.workers.run_broker module idmtools_platform_local.internals.workers.utils module Module contents Module contents idmtools_platform_local.platform_operations package Submodules idmtools_platform_local.platform_operations.experiment_operations module idmtools_platform_local.platform_operations.simulation_operations module idmtools_platform_local.platform_operations.uitils module Module contents Submodules \u00b6 idmtools_platform_local.config module idmtools_platform_local.local_cli module idmtools_platform_local.local_platform module idmtools_platform_local.plugin_info module idmtools_platform_local.status module Module contents \u00b6"}, {"title": "Developer installation \u2014 IDM-Tools  documentation", "tags": "", "url": "./dev-installation.html", "text": "Developer installation \u00b6 Follow the steps below if you will make changes to the IDM-Tools source code to add new functionality. Install IDM-Tools \u00b6 Install a Git client such as Git Bash or the Git GUI. Open a command prompt and clone the IDM-Tools GitHub repository to a local directory using the following command: git clone https : // github . com / InstituteforDiseaseModeling / idmtools . git To work from the latest approved code, work from the \u201cmaster\u201d branch. To work from the latest code under active development, work from the \u201cdev\u201d branch. Open a command prompt and create a virtual environment in any directory you choose. The command below names the environment \u201cidmtools\u201d, but you may use any desired name: python - m venv idmtools Activate the virtual environment: On Windows, enter the following: idmtools \\ Scripts \\ activate On Linux, enter the following: source idmtools / bin / activate In the base directory of the cloned GitHub repository, run the setup script. On Windows, enter the following: pip install py - make pymake setup - dev On Linux, enter the following: make setup - dev To verify that IDM-Tools is installed, enter the following command: idmtools -- help You should see a list of available cookie cutter projects and command-line options. For source completion and indexing, set the package paths in your IDE. In PyCharm, select the following directories then right-click and select Mark Directory as > Source Root . idmtools/idmtools_core idmtools/idmtools_cli idmtools/idmtools_platform_local idmtools/idmtools_platform_comps idmtools/idmtools_model_emod idmtools/idmtools_models idmtools/idmtools_test See CLI reference for more information on the command-line interface available for interacting with IDM-Tools. Start the Docker client \u00b6 Create a Docker network named idmtools_network in the idmtools_local_runner directory using the following commands: cd idmtools_platform_local docker network create idmtools_network Note The drive where you create the network most be shared with Docker. Open Docker and then under Settings > Shared Drives , verify that the drive is shared. Start the local Docker runner using the following commands, depending on your operating system. On Windows, enter the following. Include the first line only if the data/redis-data directory is not already present: mkdir data \\ redis - data docker - compose down - v docker - compose build docker - compose up - d On Linux, enter the following: sudo docker - compose down - v sudo docker - compose build sudo ./ start . sh Open a browser and navigate to http://localhost:5000/data/ . Note If your password has changed since running Docker, you will need to update your credentials. Open Docker Desktop > Settings > Resources > File sharing and reset your credentials. Run tests \u00b6 If you want to run tests on the code, do the following. You can add new tests to the GitHub repository and they will be run using the same commands. Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org . Login to COMPS by navigating to the IDM-Tools root directory and entering the following at a command prompt: python dev_scripts \\ create_auth_token_args . py -- comps_url https : // comps2 . idmod . org -- username yourcomps_user -- password yourcomps_password If you are running the local platform with the nightly IDM-Tools build, enter the following to log in to Docker: docker login idm - docker - staging . packages . idmod . org Navigate to the directory containing the code you want to test, such as the root directory or a subdirectory like idmtools_platform_comps, enter the following command: pymake test - all"}, {"title": "idmtools_platform_comps.utils.package_version module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.package_version.html", "text": "idmtools_platform_comps.utils.package_version module \u00b6 class idmtools_platform_comps.utils.package_version. LinkHTMLParser ( * , convert_charrefs=True ) \u00b6 Bases: html.parser.HTMLParser previous_tag = None \u00b6 pkg_version = [] \u00b6 handle_starttag ( tag , attrs ) \u00b6 idmtools_platform_comps.utils.package_version. get_latest_package_version_from_pypi ( pkg_name , display_all=False ) \u00b6 Utility to get the latest version for a given package name :param pkg_name: package name given :param display_all: determine if output all package releases Returns: the latest version of ven package idmtools_platform_comps.utils.package_version. get_latest_package_version_from_artifactory ( pkg_name , display_all=False ) \u00b6 Utility to get the latest version for a given package name :param pkg_name: package name given :param display_all: determine if output all package releases Returns: the latest version of ven package idmtools_platform_comps.utils.package_version. get_latest_ssmt_image_version_from_artifactory ( pkg_name='comps_ssmt_worker' , display_all=False ) \u00b6 Utility to get the latest version for a given package name :param pkg_name: package name given :param display_all: determine if output all package releases Returns: the latest version of ven package idmtools_platform_comps.utils.package_version. get_latest_version_from_site ( pkg_url , display_all=False ) \u00b6 Utility to get the latest version for a given package name :param pkg_name: package name given :param display_all: determine if output all package releases Returns: the latest version of ven package"}, {"title": "idmtools.builders.arm_simulation_builder module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.builders.arm_simulation_builder.html", "text": "idmtools.builders.arm_simulation_builder module \u00b6 class idmtools.builders.arm_simulation_builder. ArmType \u00b6 Bases: enum.Enum An enumeration. cross = 0 \u00b6 pair = 1 \u00b6 class idmtools.builders.arm_simulation_builder. SweepArm ( type=<ArmType.cross: 0> , funcs=[] ) \u00b6 Bases: object Class that represents a parameter arm. add_sweep_definition ( func: Callable, values: Iterable[Any] ) \u00b6 get_max_values_count ( ) \u00b6 adjust_values_length ( ) \u00b6 class idmtools.builders.arm_simulation_builder. ArmSimulationBuilder \u00b6 Bases: idmtools.builders.simulation_builder.SimulationBuilder Class that represents an experiment builder. This particular sweep builder build sweeps in \u201cARMS\u201d. This is particular useful in situations where you want to sweep parameters that have branches of parameters. For Example, let\u2019s say we have a model with the following parameters: * population * susceptible * recovered * enable_births * birth_rate Enable births controls an optional feature that is controlled by the birth_rate parameter. If we want to sweep a set of parameters on population, susceptible with enabled_births set to off but also want to sweep the birth_rate we could do that like so ################################### # This example provides how you can check if your sweeps are working as expected ################################### from functools import partial from idmtools.builders import ArmSimulationBuilder , SweepArm , ArmType from idmtools.entities.command_task import CommandTask from idmtools.entities.templated_simulation import TemplatedSimulations from tabulate import tabulate def update_parameter ( simulation , parameter , value ): simulation . task . config [ parameter ] = value base_task = CommandTask ( 'example' ) base_task . config = dict ( enable_births = False ) builder = ArmSimulationBuilder () # Define our first set of sweeps arm = SweepArm ( type = ArmType . cross ) arm . add_sweep_definition ( partial ( update_parameter , parameter = 'population' ), [ 500 , 1000 ]) arm . add_sweep_definition ( partial ( update_parameter , parameter = 'susceptible' ), [ 0.5 , 0.9 ]) builder . add_arm ( arm ) # Now add the sweeps with the birth_rate as well arm . add_sweep_definition ( partial ( update_parameter , parameter = 'enable_births' ), [ True ]) arm . add_sweep_definition ( partial ( update_parameter , parameter = 'birth_rate' ), [ 0.01 , 0.1 ]) builder . add_arm ( arm ) sims = TemplatedSimulations ( base_task = base_task ) sims . add_builder ( builder ) print ( tabulate ([ s . task . config for s in list ( sims )], headers = \"keys\" )) This would result in the output Arm Example Values \u00b6 enable_births population susceptible birth_rate False 500 0.5 False 500 0.9 False 1000 0.5 False 1000 0.9 True 500 0.5 0.01 True 500 0.5 0.1 True 500 0.9 0.01 True 500 0.9 0.1 True 1000 0.5 0.01 True 1000 0.5 0.1 True 1000 0.9 0.01 True 1000 0.9 0.1 Examples \"\"\" This file demonstrates how to use ArmExperimentBuilder in PythonExperiment's builder. We are then adding the builder to PythonExperiment. |__sweep arm1 |_ a = 1 |_ b = [2,3] |_ c = [4,5] |__ sweep arm2 |_ a = [6,7] |_ b = 2 Expect sims with parameters: sim1: {a:1, b:2, c:4} sim2: {a:1, b:2, c:5} sim3: {a:1, b:3, c:4} sim4: {a:1, b:3, c:5} sim5: {a:6, b:2} sim6: {a:7, b:2} Note: arm1 and arm2 are adding to total simulations \"\"\" import os import sys from functools import partial from idmtools.builders import SweepArm , ArmType , ArmSimulationBuilder from idmtools.core.platform_factory import platform from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH # define specific callbacks for a, b, and c setA = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"a\" ) setB = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"b\" ) setC = partial ( JSONConfiguredPythonTask . set_parameter_sweep_callback , param = \"c\" ) if __name__ == \"__main__\" : with platform ( 'COMPS2' ): base_task = JSONConfiguredPythonTask ( script_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model1.py\" )) # define that we are going to create multiple simulations from this task ts = TemplatedSimulations ( base_task = base_task ) # define our first sweep Sweep Arm arm1 = SweepArm ( type = ArmType . cross ) builder = ArmSimulationBuilder () arm1 . add_sweep_definition ( setA , 1 ) arm1 . add_sweep_definition ( setB , [ 2 , 3 ]) arm1 . add_sweep_definition ( setC , [ 4 , 5 ]) builder . add_arm ( arm1 ) # adding more simulations with sweeping arm2 = SweepArm ( type = ArmType . cross ) arm2 . add_sweep_definition ( setA , [ 6 , 7 ]) arm2 . add_sweep_definition ( setB , [ 2 ]) builder . add_arm ( arm2 ) # add our builders to our template ts . add_builder ( builder ) # create experiment from the template experiment = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 , \"KeyOnly\" : None }) # run the experiment experiment . run () # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts experiment . wait () # use system status as the exit code sys . exit ( 0 if experiment . succeeded else - 1 ) add_arm ( arm ) \u00b6"}, {"title": "idmtools_platform_local.local_cli module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.local_cli.html", "text": "idmtools_platform_local.local_cli module \u00b6 class idmtools_platform_local.local_cli. LocalCLI \u00b6 Bases: idmtools_cli.iplatform_cli.IPlatformCLI get_experiment_status ( id: Optional[str], tags: Optional[List[Tuple[str, str]]] ) \u2192 NoReturn \u00b6 Parameters id \u2013 tags \u2013 Returns: get_simulation_status ( id: Optional[str], experiment_id: Optional[str], status: Optional[str], tags: Optional[List[Tuple[str, str]]] ) \u2192 NoReturn \u00b6 Parameters id \u2013 experiment_id \u2013 status \u2013 tags \u2013 Returns: get_platform_information ( platform: LocalPlatform ) \u2192 dict \u00b6 class idmtools_platform_local.local_cli. LocalCLISpecification \u00b6 Bases: idmtools_cli.iplatform_cli.PlatformCLISpecification get ( configuration: dict ) \u2192 idmtools_platform_local.local_cli.LocalCLI \u00b6 Factor that should return a new platform using the passed in configuration :param configuration: Returns: get_additional_commands ( ) \u2192 NoReturn \u00b6 get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description."}, {"title": "1.0.1 \u2014 IDM-Tools  documentation", "tags": "", "url": "./changelog_1.0.1.html", "text": "1.0.1 \u00b6 Analyzers \u00b6 #0778 - Add support for context platforms to analyzer manager Bugs \u00b6 #0637 - pytest: ValueError: I/O operation on closed file, Printed at the end of tests. #0663 - SSMT PlatformAnalysis can not put 2 analyzers in same file as main entry #0696 - Rename num_retires to num_retries on COMPS Platform #0702 - Can not analyze workitem #0739 - Logging should load defaults with default config block is missing #0741 - MAX_PATH issues with RequirementsToAssetCollection WI create_asset_collection #0752 - type hint in analyzer_manager is wrong #0758 - Workitem config should be validated on WorkItem for PythonAsset Collection #0776 - Fix hook execution order for pre_creation #0779 - Additional Sims is not being detected on TemplatedSimulations #0788 - Correct requirements on core #0791 - Missing asset file with RequirementsToAssetCollection Core \u00b6 #0343 - Genericize experiment_factory to work for other items #0611 - Consider excluding idmtools.log and COMPS_log.log on SSMT WI submission #0737 - Remove standalone builder in favor of regular python Developer/Test \u00b6 #0083 - Setup python linting for the Pull requests #0671 - Python Linting #0735 - Tag or remove local tests in idmtools-core tests #0736 - Mark set of smoke tests to run in github actions #0773 - Move model-emod to new repo #0794 - build idmtools_platform_local fail with idmtools_webui error Documentation \u00b6 #0015 - Add cookiecutter projects #0423 - Create a clear document on what features are provided by what packages #0473 - Create sweep without builder #0476 - ARM builder #0477 - CSV builder #0478 - YAML builder #0487 - Creation of an analyzer #0488 - Base analyzer - Constructor #0489 - Base analyzer - Filter function #0490 - Base analyzer - Parsing #0491 - Base analyzer - Working directory #0492 - Base analyzer - Map function #0493 - Base analyzer - Reduce function #0494 - Base analyzer - per group function #0495 - Base analyzer - Destroy function #0496 - Features of AnalyzeManager - Overview #0497 - Features of AnalyzeManager - Partial analysis #0498 - Features of AnalyzeManager - Max items #0499 - Features of AnalyzeManager - Working directory forcing #0500 - Features of AnalyzeManager - Adding items #0501 - Built-in analyzers - InsetChart analyzer #0502 - Built-in analyzers - CSV Analyzer #0503 - Built-in analyzers - Tags analyzer #0504 - Built-in analyzers - Download analyzer #0508 - Logging and Debugging #0509 - Global parameters #0511 - COMPS platform options #0629 - Update docker endpoint on ssmt/local platform to use external endpoint for pull/running #0630 - Investigate packaging idmtools as wheel file #0714 - Document the Versioning details #0717 - Sweep Simulation Builder #0720 - Documentation on Analyzing Failed experiments #0721 - AddAnalyer should have example in its self documentation #0722 - CSVAnalyzer should have example in its self documentation #0723 - DownloadAnalyzer should have example in its self documentation #0724 - PlatformAnalysis should have explanation of its used documented #0727 - SimulationBuilder Sweep builder documentation #0734 - idmtools does not install dataclasses on python3.6 #0751 - Switch to apidoc generated RSTs for modules and remove from source control Feature Request \u00b6 #0059 - Chaining of Analyzers #0097 - Ability to batch simulations within simulation #0704 - Tthere is no way to load custom wheel using the RequirementsToAssets utility #0784 - Remove default node_group value \u2018emod_abcd\u2019 from platform #0786 - Improve Suite support Platforms \u00b6 #0277 - Need way to add tags to COMPSPlatform ACs after creation #0638 - Change print statement to logger in python_requirements_ac utility #0640 - Better error reporting when the python_requirements_ac fails #0651 - A user should not need to specify the default SSMT image #0688 - Load Custom Library Utility should support install packages from Artifactory #0705 - Should have way to regenerate AssetCollection id from RequirementsToAssetCollection #0757 - Set PYTHONPATH on Slurm User Experience \u00b6 #0760 - Email for issues and feature requests #0781 - Suites should support run on object #0787 - idmtools should print experiment id by default in console"}, {"title": "idmtools.core package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.html", "text": "idmtools.core package \u00b6 Subpackages \u00b6 idmtools.core.interfaces package Submodules idmtools.core.interfaces.entity_container module idmtools.core.interfaces.iassets_enabled module idmtools.core.interfaces.ientity module idmtools.core.interfaces.iitem module idmtools.core.interfaces.inamed_entity module Module contents Submodules \u00b6 idmtools.core.cache_enabled module idmtools.core.context module idmtools.core.docker_task module idmtools.core.enums module idmtools.core.exceptions module idmtools.core.experiment_factory module idmtools.core.logging module idmtools.core.platform_factory module idmtools.core.system_information module idmtools.core.task_factory module Module contents \u00b6"}, {"title": "idmtools.core.interfaces.ientity module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.ientity.html", "text": "idmtools.core.interfaces.ientity module \u00b6 class idmtools.core.interfaces.ientity. IEntity ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , item_type: idmtools.core.enums.ItemType = None , _platform_object: Any = None ) \u00b6 Bases: idmtools.core.interfaces.iitem.IItem Interface for all entities in the system. platform_id : uuid.UUID = None \u00b6 parent_id : uuid.UUID = None \u00b6 status : idmtools.core.enums.EntityStatus = None \u00b6 tags : Dict[str, Any] = None \u00b6 item_type : idmtools.core.enums.ItemType = None \u00b6 update_tags ( tags: dict = None ) \u2192 NoReturn \u00b6 Shortcut to update the tags with the given dictionary :param tags: New tags post_creation ( ) \u2192 None \u00b6 Called after the actual creation of the entity. classmethod from_id ( item_id: Union[str, uuid.UUID], platform: IPlatform = None, **kwargs ) \u2192 IEntity \u00b6 property parent \u00b6 property platform \u00b6 get_platform_object ( force=False , **kwargs ) \u00b6 property done \u00b6 property succeeded \u00b6"}, {"title": "idmtools_platform_comps.ssmt_operations.workflow_item_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_operations.workflow_item_operations.html", "text": "idmtools_platform_comps.ssmt_operations.workflow_item_operations module \u00b6 class idmtools_platform_comps.ssmt_operations.workflow_item_operations. SSMTPlatformWorkflowItemOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.WorkItem.WorkItem'> ) \u00b6 Bases: idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations get_assets ( simulation: idmtools.entities.simulation.Simulation, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Retrieve files association with WorkItem :param workflow_item: workflow item :param files: list of file paths :param **kwargs: Optional arguments mainly for extensibility Returns: dict with key/value: file_path/file_content platform = None \u00b6"}, {"title": "idmtools_platform_local.client.base module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.client.base.html", "text": "idmtools_platform_local.client.base module \u00b6 class idmtools_platform_local.client.base. BaseClient \u00b6 Bases: object base_url = 'http://localhost:5000/api' \u00b6 classmethod get ( path , **kwargs ) \u2192 requests.models.Response \u00b6 classmethod post ( path , **kwargs ) \u2192 requests.models.Response \u00b6 classmethod put ( path , **kwargs ) \u2192 requests.models.Response \u00b6 classmethod delete ( path , **kwargs ) \u2192 requests.models.Response \u00b6"}, {"title": "idmtools_models.r.json_r_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.r.json_r_task.html", "text": "idmtools_models.r.json_r_task module \u00b6 class idmtools_models.r.json_r_task. JSONConfiguredRTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, image_name: str = None, build: bool = False, build_path: Union[str, NoneType] = None, Dockerfile: Union[str, NoneType] = None, pull_before_build: bool = True, use_nvidia_run: bool = False, _DockerTask__image_built: bool = False, script_path: str = None, r_path: str = 'Rscript', extra_libraries: list = <factory>, parameters: dict = <factory>, envelope: str = None, config_file_name: str = 'config.json', is_config_common: bool = False, command_line_argument: str = None, command_line_argument_no_filename: bool = True, configfile_argument: Union[str, NoneType] = '--config' ) \u00b6 Bases: idmtools_models.json_configured_task.JSONConfiguredTask , idmtools_models.r.r_task.RTask configfile_argument : Optional[str] = '--config' \u00b6 gather_common_assets ( ) \u00b6 Return the common assets for a JSON Configured Task a derived class Returns: gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Get Transient assets. This should general be the config.json Returns Transient assets reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Reload from Simulation. To do this, the process is First check for a configfile name from arguments, then tags, or the default name Load the json config file Check if we got an envelope argument from parameters or the simulation tags, or on the task object Parameters simulation \u2013 Simulation object with metadata to load info from config_file_name \u2013 Optional name of config file envelope \u2013 Optional name of envelope Returns Populates the config with config from object pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Called before creation of parent Parameters parent \u2013 Parent Returns None Raise: ValueError if script name is not provided post_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Optional Hook called at the after creation task. Can be used to setup simulation and experiment level hooks :param parent: Returns: class idmtools_models.r.json_r_task. JSONConfiguredRTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.r.json_r_task.JSONConfiguredRTask \u00b6 Get instance of JSONConfiguredRTaskSpecification with configuration provided Parameters configuration \u2013 Configuration for object Returns JSONConfiguredRTaskSpecification with configuration get_description ( ) \u2192 str \u00b6 Get description of plugin Returns Description of plugin get_example_urls ( ) \u2192 List[str] \u00b6 Get Examples for JSONConfiguredRTask Returns List of Urls that point to examples for JSONConfiguredRTask get_type ( ) \u2192 Type[idmtools_models.r.json_r_task.JSONConfiguredRTask] \u00b6 Get Type for Plugin Returns JSONConfiguredRTask"}, {"title": "Changelog \u2014 IDM-Tools  documentation", "tags": "", "url": "./changelog.html", "text": "Changelog \u00b6 0.1.0 Analyzers Bugs CLI Configuration Core Documentation Models Platforms 1.0.0 Analyzers Bugs CLI Configuration Core Developer/Test Documentation Feature Request Models Platforms User Experience 1.0.1 Analyzers Bugs Core Developer/Test Documentation Feature Request Platforms User Experience 1.1.0 Additional Changes Bugs CLI Core Developer/Test Documentation Platforms User Experience"}, {"title": "idmtools_platform_comps.utils.lookups module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.lookups.html", "text": "idmtools_platform_comps.utils.lookups module \u00b6 idmtools_platform_comps.utils.lookups. get_experiment_by_id ( exp_id , query_criteria: COMPS.Data.QueryCriteria.QueryCriteria = None ) \u2192 COMPS.Data.Experiment.Experiment \u00b6 idmtools_platform_comps.utils.lookups. get_simulation_by_id ( sim_id , query_criteria: COMPS.Data.QueryCriteria.QueryCriteria = None ) \u2192 COMPS.Data.Simulation.Simulation \u00b6 Fetches simulation by id and optional query criteria. Wrapped in additional Retry Logic. Used by other lookup methods Parameters sim_id \u2013 query_criteria \u2013 Optional QueryCriteria to search with Returns Simulation with ID idmtools_platform_comps.utils.lookups. get_all_experiments_for_user ( user: str ) \u2192 List[COMPS.Data.Experiment.Experiment] \u00b6 Returns all the experiments for a specific user Parameters user \u2013 username to locate Returns Experiments for a user idmtools_platform_comps.utils.lookups. get_simulations_from_big_experiments ( experiment_id ) \u00b6 Parameters experiment_id \u2013 Returns:"}, {"title": "idmtools.utils.info module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.info.html", "text": "idmtools.utils.info module \u00b6 idmtools.utils.info. get_pip_packages_10_to_6 ( ) \u00b6 Load packages for versions 1.0 to 6 of pip. Returns None Raises ImportError \u2013 If the pip version is different. idmtools.utils.info. get_pip_packages_6_to_9 ( ) \u00b6 Get packages for pip versions 6 through 9. Returns None Raises ImportError \u2013 If the pip version is different. idmtools.utils.info. get_pip_packages_10_to_current ( ) \u00b6 Get packages for pip versions 10 to current. Returns None Raises ImportError \u2013 If the pip version is different. idmtools.utils.info. get_packages_from_pip ( ) \u00b6 Attempt to load pacakges from pip. Returns A list of packages installed. Return type (List[str]) idmtools.utils.info. get_packages_list ( ) \u2192 List[str] \u00b6 Return a list of installed packages in the current environment. Currently IDM-Tools depends on pip for this functionality and since it is just used for troubleshooting, errors can be ignored. Returns A list of packages installed. Return type (List[str])"}, {"title": "idmtools.utils.filters package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.filters.html", "text": "idmtools.utils.filters package \u00b6 Submodules \u00b6 idmtools.utils.filters.asset_filters module Module contents \u00b6"}, {"title": "Calibrate simulations \u2014 IDM-Tools  documentation", "tags": "", "url": "./calibrate.html", "text": "Calibrate simulations \u00b6"}, {"title": "idmtools_platform_local.internals.workers.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.utils.html", "text": "idmtools_platform_local.internals.workers.utils module \u00b6 idmtools_platform_local.internals.workers.utils. create_or_update_status ( uuid , data_path=None , tags=None , status=<Status.created: 'created'> , parent_uuid=None , extra_details=None , session=None , autoclose=True , autocommit=True ) \u00b6 idmtools_platform_local.internals.workers.utils. get_host_data_bind ( ) \u00b6"}, {"title": "idmtools_platform_local.platform_operations.uitils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.platform_operations.uitils.html", "text": "idmtools_platform_local.platform_operations.uitils module \u00b6 class idmtools_platform_local.platform_operations.uitils. ExperimentDict \u00b6 Bases: dict class idmtools_platform_local.platform_operations.uitils. SimulationDict \u00b6 Bases: dict idmtools_platform_local.platform_operations.uitils. local_status_to_common ( status ) \u2192 EntityStatus \u00b6 Convert local platform status to idmtools status :param status: Returns: idmtools_platform_local.platform_operations.uitils. download_lp_file ( filename: str , buffer_size: int = 128 ) \u2192 Generator[bytes, None, None] \u00b6 Returns a generator to download files on the local platform :param filename: :param buffer_size: Returns:"}, {"title": "Python Module Index \u2014 IDM-Tools  documentation", "tags": "", "url": "./py-modindex.html", "text": "Python Module Index i i idmtools idmtools.analysis idmtools.analysis.add_analyzer idmtools.analysis.analyze_manager idmtools.analysis.csv_analyzer idmtools.analysis.download_analyzer idmtools.analysis.map_worker_entry idmtools.analysis.platform_analysis_bootstrap idmtools.analysis.platform_anaylsis idmtools.analysis.tags_analyzer idmtools.assets idmtools.assets.asset idmtools.assets.asset_collection idmtools.assets.content_handlers idmtools.assets.errors idmtools.assets.file_list idmtools.builders idmtools.builders.arm_simulation_builder idmtools.builders.csv_simulation_builder idmtools.builders.simulation_builder idmtools.builders.yaml_simulation_builder idmtools.config idmtools.config.idm_config_parser idmtools.core idmtools.core.cache_enabled idmtools.core.context idmtools.core.docker_task idmtools.core.enums idmtools.core.exceptions idmtools.core.experiment_factory idmtools.core.interfaces idmtools.core.interfaces.entity_container idmtools.core.interfaces.iassets_enabled idmtools.core.interfaces.ientity idmtools.core.interfaces.iitem idmtools.core.interfaces.inamed_entity idmtools.core.logging idmtools.core.platform_factory idmtools.core.system_information idmtools.core.task_factory idmtools.entities idmtools.entities.command_line idmtools.entities.command_task idmtools.entities.experiment idmtools.entities.generic_workitem idmtools.entities.ianalyzer idmtools.entities.iplatform idmtools.entities.iplatform_ops idmtools.entities.iplatform_ops.iplatform_asset_collection_operations idmtools.entities.iplatform_ops.iplatform_experiment_operations idmtools.entities.iplatform_ops.iplatform_simulation_operations idmtools.entities.iplatform_ops.iplatform_suite_operations idmtools.entities.iplatform_ops.iplatform_workflowitem_operations idmtools.entities.iplatform_ops.utils idmtools.entities.itask idmtools.entities.iworkflow_item idmtools.entities.platform_requirements idmtools.entities.relation_type idmtools.entities.simulation idmtools.entities.suite idmtools.entities.task_proxy idmtools.entities.templated_simulation idmtools.registry idmtools.registry.experiment_specification idmtools.registry.master_plugin_registry idmtools.registry.platform_specification idmtools.registry.plugin_specification idmtools.registry.task_specification idmtools.registry.utils idmtools.services idmtools.services.ipersistance_service idmtools.services.platforms idmtools.utils idmtools.utils.collections idmtools.utils.command_line idmtools.utils.decorators idmtools.utils.display idmtools.utils.display.displays idmtools.utils.display.settings idmtools.utils.dropbox_location idmtools.utils.entities idmtools.utils.file idmtools.utils.file_parser idmtools.utils.filter_simulations idmtools.utils.filters idmtools.utils.filters.asset_filters idmtools.utils.gitrepo idmtools.utils.hashing idmtools.utils.info idmtools.utils.json idmtools.utils.language idmtools.utils.local_os idmtools.utils.time idmtools_models idmtools_models.json_configured_task idmtools_models.python idmtools_models.python.json_python_task idmtools_models.python.python_task idmtools_models.r idmtools_models.r.json_r_task idmtools_models.r.r_task idmtools_models.templated_script_task idmtools_platform_comps idmtools_platform_comps.cli idmtools_platform_comps.cli.cli_functions idmtools_platform_comps.cli.comps idmtools_platform_comps.cli.utils idmtools_platform_comps.comps_cli idmtools_platform_comps.comps_operations idmtools_platform_comps.comps_operations.asset_collection_operations idmtools_platform_comps.comps_operations.experiment_operations idmtools_platform_comps.comps_operations.simulation_operations idmtools_platform_comps.comps_operations.suite_operations idmtools_platform_comps.comps_operations.workflow_item_operations idmtools_platform_comps.comps_platform idmtools_platform_comps.plugin_info idmtools_platform_comps.ssmt_operations idmtools_platform_comps.ssmt_operations.simulation_operations idmtools_platform_comps.ssmt_operations.workflow_item_operations idmtools_platform_comps.ssmt_platform idmtools_platform_comps.ssmt_work_items idmtools_platform_comps.ssmt_work_items.comps_workitems idmtools_platform_comps.ssmt_work_items.icomps_workflowitem idmtools_platform_comps.utils idmtools_platform_comps.utils.disk_usage idmtools_platform_comps.utils.general idmtools_platform_comps.utils.lookups idmtools_platform_comps.utils.package_version idmtools_platform_comps.utils.python_requirements_ac idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection idmtools_platform_comps.utils.python_requirements_ac.install_requirements idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection idmtools_platform_comps.utils.python_version idmtools_platform_local idmtools_platform_local.cli idmtools_platform_local.cli.experiment idmtools_platform_local.cli.local idmtools_platform_local.cli.simulation idmtools_platform_local.cli.utils idmtools_platform_local.client idmtools_platform_local.client.base idmtools_platform_local.client.experiments_client idmtools_platform_local.client.healthcheck_client idmtools_platform_local.client.simulations_client idmtools_platform_local.config idmtools_platform_local.infrastructure idmtools_platform_local.infrastructure.base_service_container idmtools_platform_local.infrastructure.docker_io idmtools_platform_local.infrastructure.postgres idmtools_platform_local.infrastructure.redis idmtools_platform_local.infrastructure.service_manager idmtools_platform_local.infrastructure.workers idmtools_platform_local.internals idmtools_platform_local.internals.data idmtools_platform_local.internals.data.job_status idmtools_platform_local.internals.ui idmtools_platform_local.internals.ui.app idmtools_platform_local.internals.ui.config idmtools_platform_local.internals.ui.controllers idmtools_platform_local.internals.ui.controllers.experiments idmtools_platform_local.internals.ui.controllers.healthcheck idmtools_platform_local.internals.ui.controllers.simulations idmtools_platform_local.internals.ui.controllers.utils idmtools_platform_local.internals.ui.utils idmtools_platform_local.internals.workers idmtools_platform_local.internals.workers.database idmtools_platform_local.internals.workers.run idmtools_platform_local.internals.workers.run_broker idmtools_platform_local.internals.workers.utils idmtools_platform_local.local_cli idmtools_platform_local.local_platform idmtools_platform_local.platform_operations idmtools_platform_local.platform_operations.experiment_operations idmtools_platform_local.platform_operations.simulation_operations idmtools_platform_local.platform_operations.uitils idmtools_platform_local.plugin_info idmtools_platform_local.status"}, {"title": "Create an analyzer \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-create.html", "text": "Create an analyzer \u00b6 You can use built-in analyzers included with IDM-Tools to help with creating a new analyzer. The following list some of these analyzers, all inheriting from the the IAnalyzer abstract class: For more information about these built-in analyzers, see: AddAnalyzer CSVAnalyzer DownloadAnalyzer TagsAnalyzer To create an analyzer methods from the IAnalyzer abstract class are used: All analyzers must also call the AnalyzeManager class for analysis management: The following python code and comments, from the CSVAnalyzer class, is an example of how to create an analyzer for analysis of .csv output files from simulations: class CSVAnalyzer ( IAnalyzer ): # Arg option for analyzer init are uid, working_dir, parse (True to leverage the :class:`OutputParser`; # False to get the raw data in the :meth:`select_simulation_data`), and filenames # In this case, we want parse=True, and the filename(s) to analyze def __init__ ( self , filenames , parse = True ): super () . __init__ ( parse = parse , filenames = filenames ) # Raise exception early if files are not csv files if not all ([ 'csv' in os . path . splitext ( f )[ 1 ] . lower () for f in self . filenames ]): raise Exception ( 'Please ensure all filenames provided to CSVAnalyzer have a csv extension.' ) def initialize ( self ): if not os . path . exists ( os . path . join ( self . working_dir , \"output_csv\" )): os . mkdir ( os . path . join ( self . working_dir , \"output_csv\" )) # Map is called to get for each simulation a data object (all the metadata of the simulations) and simulation object def map ( self , data , simulation ): # If there are 1 to many csv files, concatenate csv data columns into one dataframe concatenated_df = pd . concat ( list ( data . values ()), axis = 0 , ignore_index = True , sort = True ) return concatenated_df # In reduce, we are printing the simulation and result data filtered in map def reduce ( self , all_data ): results = pd . concat ( list ( all_data . values ()), axis = 0 , # Combine a list of all the sims csv data column values keys = [ str ( k . uid ) for k in all_data . keys ()], # Add a hierarchical index with the keys option names = [ 'SimId' ]) # Label the index keys you create with the names option results . index = results . index . droplevel ( 1 ) # Remove default index # Make a directory labeled the exp id to write the csv results to # NOTE: If running twice with different filename, the output files will collide results . to_csv ( os . path . join ( \"output_csv\" , self . __class__ . __name__ + '.csv' )) You can quickly see this analyzer in use by running the included example_analysis_CSVAnalyzer example class."}, {"title": "idmtools_platform_local.client.simulations_client module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.client.simulations_client.html", "text": "idmtools_platform_local.client.simulations_client module \u00b6 class idmtools_platform_local.client.simulations_client. SimulationsClient \u00b6 Bases: idmtools_platform_local.client.base.BaseClient path_url = 'simulations' \u00b6 classmethod get_all ( experiment_id: Optional[str] = None , status: Optional[idmtools_platform_local.status.Status] = None , tags: Optional[List[Tuple[str , str]]] = None , page: Optional[int] = None , per_page: Optional[int] = None ) \u2192 List[Dict[str, Any]] \u00b6 Parameters id ( Optional [ str ] ) \u2013 ID of the simulation experiment_id ( Optional [ str ] ) \u2013 ID of experiments status ( Optional [ Status ] ) \u2013 Optional status tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 List of tags/values to filter experiment by Returns return list of simulations Return type List[Dict[str, Any]] classmethod get_one ( simulation_id: str , experiment_id: Optional[str] = None , status: Optional[idmtools_platform_local.status.Status] = None , tags: Optional[List[Tuple[str , str]]] = None ) \u2192 Dict[str, Any] \u00b6 Args: simulation_id (str): ID of the simulation experiment_id (Optional[str]): ID of experiments status (Optional[Status]): Optional status tags (Optional[List[Tuple[str, str]]]): List of tags/values to filter experiment by Returns the simulation as a dict Return type Dict[str, Any] classmethod cancel ( simulation_id: str ) \u2192 Dict[str, Any] \u00b6 Marks a simulation to be canceled. Canceled jobs are only truly canceled when the queue message is processed Parameters simulation_id ( st ) \u2013 Returns:"}, {"title": "idmtools.utils.dropbox_location module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.dropbox_location.html", "text": "idmtools.utils.dropbox_location module \u00b6 idmtools.utils.dropbox_location. get_current_user ( ) \u00b6 idmtools.utils.dropbox_location. get_dropbox_location ( ) \u00b6"}, {"title": "idmtools_platform_local.internals.ui package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.html", "text": "idmtools_platform_local.internals.ui package \u00b6 Subpackages \u00b6 idmtools_platform_local.internals.ui.controllers package Submodules idmtools_platform_local.internals.ui.controllers.experiments module idmtools_platform_local.internals.ui.controllers.healthcheck module idmtools_platform_local.internals.ui.controllers.simulations module idmtools_platform_local.internals.ui.controllers.utils module Module contents Submodules \u00b6 idmtools_platform_local.internals.ui.app module idmtools_platform_local.internals.ui.config module idmtools_platform_local.internals.ui.utils module Module contents \u00b6"}, {"title": "1.1.0 \u2014 IDM-Tools  documentation", "tags": "", "url": "./changelog_1.1.0.html", "text": "1.1.0 \u00b6 Additional Changes \u00b6 #0845 - Sprint 1 Retrospective Results Bugs \u00b6 #0430 - test_docker_operations.test_port_taken_has_coherent_error fails in Linux VM with no host machine #0650 - analyzer_manager.py _run_and_wait_for_mapping fail frequently in bamboo #0706 - Correct the number of simulations being submitted in the progress bar #0846 - Checking for platform not installed #0872 - python executable is not correct for slurm production CLI \u00b6 #0342 - Add list of task to cli #0543 - develop idm cookie cutter templates needs #0820 - Add examples url to plugins specifications and then each plugin if they have examples #0869 - CLI: idmtools gitrepo view - CommandTask points to /corvid-idmtools Core \u00b6 #0273 - Add kwargs functionality to CacheEnabled #0818 - Create Download Examples Core Functionality #0828 - Add a master plugin registry Developer/Test \u00b6 #0652 - Packing process should be fully automated #0731 - Add basic testing to Github Actions to Pull Requests #0785 - Add a miniconda agent to the bamboo testing of idmtools #0833 - Add emodpy to idm and full extra installs in core #0844 - For make setup-dev, we may want put login to artifactory first Documentation \u00b6 #0729 - Move local platform worker container to Github Actions #0814 - High Level Diagram of Packages/Repos for idmtools #0858 - Fix doc publish to ghpages #0861 - emodpy - add updated api diagram (API class specifications) to architecture doc Platforms \u00b6 #0728 - Restructure local platform docker container build for Github Action #0730 - Move SSMT Image build to github actions #0826 - SSMT Build as part of GithubActions User Experience \u00b6 #0010 - Configuration file creation command #0684 - Create process for Changelog for future releases #0819 - Create Download Examples CLI Command #0821 - Provide plugin method to get Help URLs for plugin"}, {"title": "idmtools.entities.iplatform_ops.iplatform_simulation_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.iplatform_simulation_operations.html", "text": "idmtools.entities.iplatform_ops.iplatform_simulation_operations module \u00b6 class idmtools.entities.iplatform_ops.iplatform_simulation_operations. IPlatformSimulationOperations ( platform: 'IPlatform' , platform_type: Type ) \u00b6 Bases: idmtools.core.cache_enabled.CacheEnabled , abc.ABC platform : 'IPlatform' = None \u00b6 platform_type : Type = None \u00b6 abstract get ( simulation_id: uuid.UUID , **kwargs ) \u2192 Any \u00b6 Returns the platform representation of an Simulation Parameters simulation_id \u2013 Item id of Simulations **kwargs \u2013 Returns Platform Representation of an simulation pre_create ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/simulation post creation events Parameters simulation \u2013 simulation to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn post_create ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/simulation post creation events Parameters simulation \u2013 simulation to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn create ( simulation: idmtools.entities.simulation.Simulation , do_pre: bool = True , do_post: bool = True , **kwargs ) \u2192 Any \u00b6 Creates an simulation from an IDMTools simulation object. Also performs pre-creation and post-creation locally and on platform Parameters simulation \u2013 Simulation to create do_pre \u2013 Perform Pre creation events for item do_post \u2013 Perform Post creation events for item **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item abstract platform_create ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 Any \u00b6 Creates an simulation on Platform from an IDMTools Simulation Object Parameters simulation \u2013 Simulation to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item batch_create ( sims: List[idmtools.entities.simulation.Simulation], display_progress: bool = True, **kwargs ) \u2192 List[idmtools.entities.simulation.Simulation] \u00b6 Provides a method to batch create simulations Parameters sims \u2013 List of simulations to create display_progress \u2013 Show progress bar **kwargs \u2013 Returns List of tuples containing the create object and id of item that was created abstract get_parent ( simulation: Any , **kwargs ) \u2192 Any \u00b6 Returns the parent of item. If the platform doesn\u2019t support parents, you should throw a TopLevelItem error Parameters simulation \u2013 **kwargs \u2013 Returns: Raise: TopLevelItem to_entity ( simulation: Any , load_task: bool = False , parent: Optional[idmtools.entities.experiment.Experiment] = None , **kwargs ) \u2192 idmtools.entities.simulation.Simulation \u00b6 Converts the platform representation of simulation to idmtools representation Parameters simulation \u2013 Platform simulation object load_task \u2013 Load Task Object as well. Can take much longer and have more data on platform parent \u2013 Optional parent object Returns IDMTools simulation object pre_run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Trigger right before commissioning experiment on platform. This ensures that the item is created. It also ensures that the children(simulations) have also been created Parameters simulation \u2013 Experiment to commission Returns: post_run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Trigger right after commissioning experiment on platform. Parameters simulation \u2013 Experiment just commissioned Returns: run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource Parameters simulation \u2013 Returns: abstract platform_run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource but not upload assets Parameters simulation \u2013 Simulation to run Returns: abstract send_assets ( simulation: Any , **kwargs ) \u00b6 abstract refresh_status ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Refresh status for simulation object Parameters simulation \u2013 Experiment to get status for Returns None abstract get_assets ( simulation: idmtools.entities.simulation.Simulation, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Get files from simulation Parameters simulation \u2013 Simulation to fetch files from files \u2013 Files to get **kwargs \u2013 Returns Dictionary containing filename and content abstract list_assets ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List available assets for a simulation Parameters simulation \u2013 Simulation of assets Assets Returns List of filenames"}, {"title": "Logging \u2014 IDM-Tools  documentation", "tags": "", "url": "./logging.html", "text": "Logging \u00b6 IDM-Tools includes built-in logging, which is configured in the [LOGGING] section of the idmtools.ini file, and includes the following parameters: level , console , and log_filename . Default settings are shown in the following example: [ LOGGING ] level = INFO console = off log_filename = idmtools . log Logging verbosity is controlled by configuring the parameter, level , with one of the below listed options. They are in descending order, where the lower the item in the list, the more verbose logging is included. CRITICAL ERROR WARNING INFO DEBUG Console logging is enabled by configuring the parameter, console , to on . The log_filename parameter can be configured to something other than the default filename, idmtools.log ."}, {"title": "1.0.0 \u2014 IDM-Tools  documentation", "tags": "", "url": "./changelog_1.0.0.html", "text": "1.0.0 \u00b6 Analyzers \u00b6 #0034 - Create the Plotting step #0057 - Output files retrieval #0196 - Filtering #0197 - Select_simulation_data #0198 - Finalize #0279 - Port dtk-tools analyze system to idmtools #0283 - Fix up all platform-based test due to analyzer/platform refactor/genericization #0337 - Change AnalyzeManager to support passing ids (Experiment, Simulation, Suite) #0338 - Two AnalyzeManager files - one incorrect and needs to be removed #0340 - Cleanup DownloadAnalyzer #0344 - AnalyzeManager configuration should be option parameter #0589 - Rename suggestion: example_analysis_multiple_cases => example_analysis_MultipleCases #0592 - analyzers error on platform.get_files for COMPS: argument of type \u2018NoneType\u2019 is not iterable #0594 - analyzer error multiprocessing pool StopIteration error in finalize_results #0614 - Convenience function to exclude items in analyze manager #0619 - Ability to get exp sim object ids in analyzers Bugs \u00b6 #0124 - Can not run teststest_python_simulation.py from console #0125 - relative_path for AssetCollection does not work #0129 - new python model root node changed from \u201cconfig\u201d to \u201cparameters\u201d #0142 - experiment.batch_simulations seems not to be batching #0143 - COMPSPlatform\u2019s refresh_experiment_status() get called too much from ExperimentManager\u2019s wait_till_done() mathod #0150 - missing pandas package #0184 - Missing \u2018data\u2019 dir for test_experiment_manager test. (TestPlatform) #0223 - UnicodeDecodeError for testcases in test_dtk.py when run with LocalPlatform #0236 - LocalRunner: ExperimentsClient get_all method should have parameter \u2018tags\u2019 not \u2018tag\u2019 #0265 - load_files for DTKExperiment create nested \u2018parameters\u2019 in config.json #0266 - load_files for demographics.json does not work #0272 - diskcache objects cause cleanup failure if used in failing processes #0294 - Docker containers failed to start if they are created but stopped #0299 - Sometime in Windows command line, local docker runner stuck and no way to stop from command line #0302 - Local Platform delete is broken #0318 - Postgres Connection error on Local Platform #0320 - COMPSPlatform Asset handling - currently DuplicatedAssetError content is not same #0323 - idmtools is not retro-compatible with pre-idmtools experiments #0332 - with large number of simulations, local platform either timeout on dramatiq or stuck on persistamceService save method #0339 - Analyzer tests fails on AnalyzeManager analyze len(self.potential_items) == 0 #0341 - AnalyzeManager Runtime error on worker_pool #0346 - UnknownItemException for analyzers on COMPSPlatform PythonExperiments #0350 - RunTask in local platform should catch exception #0351 - AnalyzeManager finalize_results Process cannot access the cache.db because it is being used by another process #0352 - Current structure of code leads to circular dependencies or classes as modules #0367 - Analyzer does not work with reduce method with no hashable object #0375 - AnalyzerManager does not work for case to add experiment to analyzermanager #0376 - AnalyzerManager does not work for simulation #0378 - experiment/simulation display and print are messed up in latest dev #0386 - Local platform cannot create more than 20 simulations in a given experiment #0398 - Ensure that redis and postgres ports work as expected #0399 - PopulaionAnalyzer does not return all items in reduce mathod in centos platform #0424 - ExperimentBuilder\u2019s add_sweep_definition is not flexible enough to take more parameters #0427 - Access to the experiment object in analyzers #0453 - cli: \u201cidmtools local down \u2013delete-data\u201d not really delete any .local_data in user default dir #0458 - There is no way to add custom tags to simulations #0465 - BuilderExperiment for sweep \u201cstring\u201d is wrong #0545 - pymake docker-local always fail in centos #0553 - BLOCKING: idmtools_model_r does not get built with make setup-dev #0560 - docker-compose build does not work for r-model example #0562 - workflow_item_operations get workitem querycriteria fails #0564 - typing is missing in asset_collection.py which almost break every tests #0565 - missing \u2018copy\u2019 in local_platform.py #0566 - test_tasks.py fail for case test_command_is_required #0567 - \u2018platform_supports\u2019 is missing for test_comps_plugin.py in idmtools_platform_comps/tests #0570 - webui for localhost:5000 got 403 error #0572 - python 3.7.3 less version will fail for task type changing #0585 - print(platform) throws exception for Python 3.6 #0588 - Running the dev installation in a virtualenv \u201cinstalls\u201d it globally #0598 - CSVAnalyzer pass wrong value to parse in super().__init__ call #0602 - Analyzer doesn\u2019t work for my Python SEIR model #0605 - When running multiple analyzers together, \u2018data\u2019 in one analyzer should not contains data from other analyzer #0606 - can not import cached_property #0608 - Cannot add custom tag to AssetCollection in idmtools #0613 - idmtools webui does not working anymore #0616 - AssetCollection pre_creation failed if no tag #0617 - AssetCollection\u2019s find_index_of_asset is wrong #0618 - analyzer-manager should fail if map status return False #0641 - Remove unused code in the python_requirements_ac #0644 - Platform cannot run workitem directly #0646 - platform.get_items(ac) not return tags #0667 - analyzer_manager could stuck on _run_and_wait_for_reducing CLI \u00b6 #0009 - Boilerplate command #0118 - Add the printing of children in the EntityContainer #0187 - Move the CLI package to idmtools/cli #0190 - Add a platform attribute to the CLI commands #0191 - Create a PlatformFactory #0241 - CLI should be distinct package and implement as plugins #0251 - Setup for the CLI package should provide a entrypoint for easy use of commands #0252 - Add \u2013debug to cli main level Configuration \u00b6 #0248 - Logging needs to support user configuration through the idmtools.ini #0392 - Improve IdmConfigParser: make decorator for ensure_ini() method\u2026 #0597 - Platform should not be case sensitive. Core \u00b6 #0032 - Create NextPointAlgorithm Step #0042 - Stabilize the IStep object #0043 - Create the generic Workflow object #0044 - Implement validation for the Steps of a workflow based on Marshmallow #0058 - Filtering system for simulations #0081 - Allows the sweeps to be created in arms #0091 - Refactor the Experiment/Simulation objects to not persist the simulations #0141 - Standard Logging throughout tools #0169 - Handle 3.6 requirements automatically #0172 - Decide what state to store for tasks #0173 - workflows: Decide on state storage scheme #0174 - workflows: Reimplement state storage #0175 - workflows: Create unit tests of core classes and behaviors #0176 - workflows: reorganize files into appropriate repo/directory #0180 - switch prettytable for tabulate #0200 - Platforms should be plugins #0238 - Simulations of Experiment should be made pickle ignored #0244 - Inputs values needs to be validated when creating a Platform #0257 - CsvExperimentBuilder does not handle csv field with empty space #0268 - demographics filenames should be loaded to asset collection #0274 - Unify id attribute naming scheme #0281 - Improve Platform to display selected Block info when creating a platform #0297 - Fix issues with platform factory #0308 - idmtools: Module names should be consistent #0315 - Basic support of suite in the tools #0357 - ExperimentPersistService.save are not consistent #0359 - SimulationPersistService is not used in Idmtools #0361 - assets in Experiment should be made \u201cpickle-ignore\u201d #0362 - base_simulation in Experiment should be made \u201cpickle-ignore\u201d #0368 - PersistService should support clear() method #0369 - The method create_simulations of Experiment should consider pre-defined max_workers and batch_size in idmtools.ini #0370 - Add unit test for deepcopy on simulations #0371 - Wrong type for platform_id in IEntity definition #0391 - Improve Asset and AssetCollection classes by using @dataclass (field) for clear comparison #0394 - Remove the ExperimentPersistService #0438 - Support pulling Eradication from URLs and bamboo #0518 - Add a task class. #0520 - Rename current experiment builders to sweep builders #0526 - Create New Generic Experiment Class #0527 - Create new Generic Simulation Class #0528 - Remove old Experiments/Simulations #0529 - Create New Task API #0530 - Rename current model api to simulation/experiment API. #0538 - Refactor platform interface into subinterfaces #0681 - idmtools should have way to query comps with filter Developer/Test \u00b6 #0631 - Ensure setup.py is consistent throughout Documentation \u00b6 #0100 - Installation steps documented for users #0312 - idmtools: there is a typo in README #0360 - The tools should refer to \u201cEMOD\u201d not \u201cDTK\u201d #0474 - Stand alone builder #0486 - Overview of the analysis in idmtools #0510 - Local platform options #0512 - SSMT platform options #0578 - Add installation for users #0593 - Simple Python SEIR model demo example #0632 - Update idmtools_core setup.py to remove model emod from idm install Feature Request \u00b6 #0061 - Built-in DownloadAnalyzer #0064 - Support of CSV files #0070 - [Local Runner] Output files serving #0233 - Add local runner timeout #0437 - Prompt users for docker credentials when not available #0603 - Implement install custom requirement libs to asset collection with WorkItem Models \u00b6 #0021 - Python model #0024 - R Model support #0053 - Support of demographics files #0212 - Models should be plugins #0287 - Add info about support models/docker support to platform #0288 - Create DockerExperiment and subclasses #0519 - Move experiment building to ExperimentBuilder #0521 - Create Generic Dictionary Config Task #0522 - Create PythonTask #0523 - Create PythonDictionaryTask #0524 - Create RTask #0525 - Create EModTask #0535 - Create DockerTask Platforms \u00b6 #0025 - LOCAL Platform #0027 - SSMT Platform #0094 - Batch and parallelize simulation creation in the COMPSPlatform #0122 - Ability to create an AssetCollection based on a COMPS asset collection id #0130 - User configuration and data storage location #0186 - The local_runner client should move to the idmtools package #0194 - COMPS Files retrieval system #0195 - LOCAL Files retrieval system #0221 - Local runner for experiment/simulations have different file hierarchy than COMPS #0254 - Local Platform Asset should be implemented via API or Docker socket #0264 - idmtools_local_runner\u2019s tasks/run.py should have better handle for unhandled exception #0276 - Docker services should be started for end-users without needing to use docker-compose #0280 - Generalize sim/exp/suite format of ISimulation, IExperiment, IPlatform #0286 - Add special GPU queue to Local Platform #0305 - Create a website for local platform #0306 - AssetCollection\u2019s assets_from_directory logic wrong if set flatten and relative path at same time #0313 - idmtools: MAX_SUBDIRECTORY_LENGTH = 35 should be made Global in COMPSPlatform definition #0314 - Fix local platform to work with latest analyze/platform updates #0316 - Integrate website with Local Runner Container #0321 - COMPSPlatform _retrieve_experiment errors on experiments with and without suites #0329 - Experiment level status #0330 - Paging on simulation/experiment APIs for better UI experience #0333 - ensure pyComps allows compatible releases #0364 - Local platform should use production artfactory for docker images #0381 - Support Work Items in COMPS Platform #0387 - Local platform webUI only show simulations up to 20 #0393 - local platform tests keep getting EOFError while logger is in DEBUG and console is on #0405 - Support analysis of data from Work Items in Analyze Manager #0407 - Support Service Side Analysis through SSMT #0447 - Set limitation for docker container\u2019s access to memory #0532 - Make updates to ExperimentManager/Platform to support tasks #0540 - Create initial SSMT Plaform from COMPS Platform #0596 - COMPSPlatform.get_files(item,..) not working for Experiment or Suite #0635 - Update SSMT base image #0639 - Add a way for the python_requirements_ac to use additional wheel file #0676 - ssmt missing QueryCriteria support #0677 - ssmt: refresh_status returns None User Experience \u00b6 #0457 - Option to analyze failed simulations"}, {"title": "idmtools_platform_comps.comps_operations.simulation_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.simulation_operations.html", "text": "idmtools_platform_comps.comps_operations.simulation_operations module \u00b6 idmtools_platform_comps.comps_operations.simulation_operations. comps_batch_worker ( simulations: List[idmtools.entities.simulation.Simulation], interface: idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations, num_cores: Optional[int] = None, priority: Optional[str] = None ) \u2192 List[COMPS.Data.Simulation.Simulation] \u00b6 Run batch worker Parameters simulations \u2013 Batch of simulation to process interface \u2013 SimulationOperation Interface num_cores \u2013 Optional Number of core to allocate for MPI priority \u2013 Optional Priority to set to Returns List of Comps Simulations class idmtools_platform_comps.comps_operations.simulation_operations. CompsPlatformSimulationOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.Simulation.Simulation'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations platform : 'COMPSPlatform' = None \u00b6 platform_type \u00b6 alias of COMPS.Data.Simulation.Simulation get ( simulation_id: uuid.UUID , columns: Optional[List[str]] = None , load_children: Optional[List[str]] = None , query_criteria: Optional[COMPS.Data.QueryCriteria.QueryCriteria] = None , **kwargs ) \u2192 COMPS.Data.Simulation.Simulation \u00b6 Get Simulation from Comps Parameters simulation_id \u2013 ID columns \u2013 Optional list of columns to load. Defaults to \u201cid\u201d, \u201cname\u201d, \u201cexperiment_id\u201d, \u201cstate\u201d load_children \u2013 Optional children to load. Defaults to \u201ctags\u201d, \u201cconfiguration\u201d query_criteria \u2013 Optional query_criteria object to use your own custom criteria object **kwargs \u2013 Returns COMPSSimulation platform_create ( simulation: idmtools.entities.simulation.Simulation , num_cores: int = None , priority: str = None , enable_platform_task_hooks: bool = True ) \u2192 COMPS.Data.Simulation.Simulation \u00b6 Create Simulation on COMPS Parameters simulation \u2013 Simulation to create num_cores \u2013 Optional number of MPI Cores to allocate priority \u2013 Priority to load enable_platform_task_hooks \u2013 Should platform task hoooks be ran Returns COMPS Simulation to_comps_sim ( simulation: idmtools.entities.simulation.Simulation , num_cores: int = None , priority: str = None , config: COMPS.Data.Configuration.Configuration = None ) \u00b6 Covert IDMTools object to COMPS Object Parameters simulation \u2013 Simulation object to convert num_cores \u2013 Optional Num of MPI Cores to allocate priority \u2013 Optional Priority config \u2013 Optional Configuration objet Returns COMPS Simulation static get_simulation_config_from_simulation ( simulation: idmtools.entities.simulation.Simulation , num_cores: int = None , priority: str = None ) \u2192 COMPS.Data.Configuration.Configuration \u00b6 Get the comps configuration for a Simulation Object Parameters simulation \u2013 Simulation num_cores \u2013 Optional Num of core for MPI priority \u2013 Optional Priority Returns Configuration batch_create ( simulations: List[idmtools.entities.simulation.Simulation], num_cores: int = None, priority: str = None ) \u2192 List[COMPS.Data.Simulation.Simulation] \u00b6 Perform batch creation of Simulations Parameters simulations \u2013 Simulation to create num_cores \u2013 Optional MPI Cores to allocate per simulation priority \u2013 Optional Priority Returns List of COMPSSimulations that were created get_parent ( simulation: Any , **kwargs ) \u2192 COMPS.Data.Experiment.Experiment \u00b6 Get the parent of the simulation Parameters simulation \u2013 Simulation to load parent for **kwargs \u2013 Returns COMPSExperiment platform_run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource but not upload assets Parameters simulation \u2013 Simulation to run Returns: send_assets ( simulation: idmtools.entities.simulation.Simulation , comps_sim: Optional[COMPS.Data.Simulation.Simulation] = None , add_metadata: bool = True , **kwargs ) \u00b6 Send assets to Simulation Parameters simulation \u2013 Simulation to send asset for comps_sim \u2013 Optional COMPSSimulation object to prevent reloading it add_metadata \u2013 Add idmtools metadata object **kwargs \u2013 Returns None refresh_status ( simulation: idmtools.entities.simulation.Simulation , additional_columns: Optional[List[str]] = None , **kwargs ) \u00b6 Refresh status of a simulation Parameters simulation \u2013 Simulation to refresh additional_columns \u2013 Optional additional columns to load from COMPS **kwargs \u2013 Returns: to_entity ( simulation: COMPS.Data.Simulation.Simulation , load_task: bool = False , parent: Optional[idmtools.entities.experiment.Experiment] = None , load_parent: bool = False , load_metadata: bool = False , **kwargs ) \u2192 idmtools.entities.simulation.Simulation \u00b6 Convert COMPS simulation object to IDM Tools simulation object Parameters simulation \u2013 Simulation object load_task \u2013 Should we load tasks. Defaults to No. This can increase the load items on fetchs parent \u2013 Optional parent object to prevent reloads load_parent \u2013 Force load of parent(Beware, This could cause loading loops) metadata \u2013 Should we load metadata by default. If load task is enabled, this is also enabled **kwargs \u2013 Returns Simulation object get_asset_collection_from_comps_simulation ( simulation: COMPS.Data.Simulation.Simulation ) \u2192 Optional[idmtools.assets.asset_collection.AssetCollection] \u00b6 Get assets from COMPS Simulation Parameters simulation \u2013 Simulation to get assets from Returns: get_assets ( simulation: idmtools.entities.simulation.Simulation, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Fetch the files associated with a simulation Parameters simulation \u2013 Simulation files \u2013 List of files to download **kwargs \u2013 Returns Dictionary of filename -> ByteArray list_assets ( simulation: idmtools.entities.simulation.Simulation , common_assets: bool = False , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List assets for a simulation Parameters simulation \u2013 Simulation to load data for common_assets \u2013 Should we load asset files **kwargs \u2013 Returns AssetCollection all_files ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 Returns all files for a specific simulation including experiments or non-assets Parameters simulation \u2013 Simulation all files **kwargs \u2013 Returns AssetCollection"}, {"title": "idmtools_models.templated_script_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.templated_script_task.html", "text": "idmtools_models.templated_script_task module \u00b6 class idmtools_models.templated_script_task. TemplatedScriptTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, script_path: str = None, template: str = None, template_file: str = None, template_is_common: bool = True, variables: Dict[str, Any] = <factory>, path_sep: str = '/', extra_command_arguments: str = '', gather_common_asset_hooks: List[Callable[[idmtools.entities.itask.ITask], idmtools.assets.asset_collection.AssetCollection]] = <factory>, gather_transient_asset_hooks: List[Callable[[idmtools.entities.itask.ITask], idmtools.assets.asset_collection.AssetCollection]] = <factory> ) \u00b6 Bases: idmtools.entities.itask.ITask Defines a task to run a script using a template. Best suited to shell scripts script_path : str = None \u00b6 Name of script template : str = None \u00b6 The template contents template_file : str = None \u00b6 The template file. You can only use either template or template_file at once template_is_common : bool = True \u00b6 Controls whether a template should be an experiment or a simulation level asset variables : Dict[str, Any] = None \u00b6 Template variables used for rendering the template path_sep : str = '/' \u00b6 Platform Path Separator. For Windows execution platforms, use , otherwise use the default of / extra_command_arguments : str = '' \u00b6 Extra arguments to add to the command line gather_common_asset_hooks : List[Callable[[ITask], AssetCollection]] = None \u00b6 Hooks to gather common assets gather_transient_asset_hooks : List[Callable[[ITask], AssetCollection]] = None \u00b6 Hooks to gather transient assets gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather common(experiment-level) assets for task Returns AssetCollection containing common assets gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather transient(experiment-level) assets for task Returns AssetCollection containing transient assets reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation ) \u00b6 Reload a templated script task. When reloading, you will only have the rendered template available Parameters simulation \u2013 Returns: pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Before creating simulation, we need to set our command line Parameters parent \u2013 Parent object Returns: class idmtools_models.templated_script_task. ScriptWrapperTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, template_script_task: idmtools_models.templated_script_task.TemplatedScriptTask = None, task: idmtools.entities.itask.ITask = None ) \u00b6 Bases: idmtools.entities.itask.ITask Allows you to wrap a script with another script See also idmtools_models.templated_script_task.TemplatedScriptTask Raises ValueError if the template Script Task is not defined \u2013 template_script_task : idmtools_models.templated_script_task.TemplatedScriptTask = None \u00b6 task : idmtools.entities.itask.ITask = None \u00b6 gather_common_assets ( ) \u00b6 Gather all the common assets Returns: gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather all the transient assets Returns: reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation ) \u00b6 Reload from simulation Parameters simulation \u2013 simulation Returns: pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Before creation, create the true command by adding the wrapper name Parameters parent \u2013 Returns: post_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Optional Hook called at the after creation task. Can be used to setup simulation and experiment level hooks :param parent: Returns: idmtools_models.templated_script_task. get_script_wrapper_task ( task: idmtools.entities.itask.ITask , wrapper_script_name: str , template_content: str = None , template_file: str = None , template_is_common: bool = True , variables: Dict[str , Any] = None , path_sep: str = '/' ) \u2192 idmtools_models.templated_script_task.ScriptWrapperTask \u00b6 Convenience function that will wrap a task for you with some defaults Parameters task \u2013 Task to wrap wrapper_script_name \u2013 Wrapper script name template_content \u2013 Template Content template_file \u2013 Template File template_is_common \u2013 Is the template experiment level variables \u2013 Variables path_sep \u2013 Path sep(Window or Linux) Returns ScriptWrapperTask wrapping the task See also idmtools_models.templated_script_task.get_script_wrapper_windows_task() idmtools_models.templated_script_task.get_script_wrapper_unix_task() idmtools_models.templated_script_task. get_script_wrapper_windows_task ( task: idmtools.entities.itask.ITask , wrapper_script_name: str = 'wrapper.bat' , template_content: str = '\\nset PYTHONPATH=%cd%\\\\Assets\\\\;%PYTHONPATH%\\n%*\\n' , template_file: str = None , template_is_common: bool = True , variables: Dict[str , Any] = None ) \u2192 idmtools_models.templated_script_task.ScriptWrapperTask \u00b6 Get wrapper script task for windows platforms The default content wraps a bash script that adds the assets directory to the python path set PYTHONPATH = %cd% /Assets/; %PYTHONPATH% %* You can adapt this script to modify any pre-scripts you need or call others scripts in succession Parameters task \u2013 Task to wrap wrapper_script_name \u2013 Wrapper script name(defaults to wrapper.bat) template_content \u2013 Template Content. template_file \u2013 Template File template_is_common \u2013 Is the template experiment level variables \u2013 Variables for template Returns ScriptWrapperTask See Also:: idmtools_models.templated_script_task.get_script_wrapper_task() idmtools_models.templated_script_task.get_script_wrapper_unix_task() idmtools_models.templated_script_task. get_script_wrapper_unix_task ( task: idmtools.entities.itask.ITask , wrapper_script_name: str = 'wrapper.sh' , template_content: str = None , template_file: str = None , template_is_common: bool = True , variables: Dict[str , Any] = None ) \u00b6 Get wrapper script task for unix platforms The default content wraps a bash script that adds the assets directory to the python path set PYTHONPATH = $( pwd ) /Assets/: $PYTHONPATH %* You can adapt this script to modify any pre-scripts you need or call others scripts in succession Parameters task \u2013 Task to wrap wrapper_script_name \u2013 Wrapper script name(defaults to wrapper.sh) template_content \u2013 Template Content template_file \u2013 Template File template_is_common \u2013 Is the template experiment level variables \u2013 Variables for template Returns ScriptWrapperTask See Also: idmtools_models.templated_script_task.get_script_wrapper_task() idmtools_models.templated_script_task.get_script_wrapper_windows_task() class idmtools_models.templated_script_task. TemplatedScriptTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.templated_script_task.TemplatedScriptTask \u00b6 Get instance of TemplatedScriptTask with configuration Parameters configuration \u2013 configuration for TemplatedScriptTask Returns TemplatedScriptTask with configuration get_description ( ) \u2192 str \u00b6 Get description of plugin Returns Plugin description get_example_urls ( ) \u2192 List[str] \u00b6 Get example urls related to TemplatedScriptTask Returns List of urls that have examples related to CommandTask get_type ( ) \u2192 Type[idmtools_models.templated_script_task.TemplatedScriptTask] \u00b6 Get task type provided by plugin Returns TemplatedScriptTask class idmtools_models.templated_script_task. ScriptWrapperTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.templated_script_task.ScriptWrapperTask \u00b6 Get instance of ScriptWrapperTask with configuration Parameters configuration \u2013 configuration for ScriptWrapperTask Returns TemplatedScriptTask with configuration get_description ( ) \u2192 str \u00b6 Get description of plugin Returns Plugin description get_example_urls ( ) \u2192 List[str] \u00b6 Get example urls related to ScriptWrapperTask Returns List of urls that have examples related to CommandTask get_type ( ) \u2192 Type[idmtools_models.templated_script_task.ScriptWrapperTask] \u00b6 Get task type provided by plugin Returns TemplatedScriptTask"}, {"title": "idmtools.utils.language module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.language.html", "text": "idmtools.utils.language module \u00b6 idmtools.utils.language. on_off ( test ) \u2192 str \u00b6 Print on or off depending on boolean state of test Parameters test \u2013 Boolean/object to check state Returns On or off idmtools.utils.language. pluralize ( word , plural_suffix='s' ) \u00b6 idmtools.utils.language. verbose_timedelta ( delta ) \u00b6 idmtools.utils.language. get_qualified_class_name ( cls: Type ) \u2192 str \u00b6 Return the full class name for an object Parameters cls \u2013 Class object to get name Returns: idmtools.utils.language. get_qualified_class_name_from_obj ( obj: object ) \u2192 str \u00b6 Return the full class name from object Parameters obj \u2013 Object Example ` a = Platform('COMPS') class_name = get_qualified_class_name(a) print(class_name) 'idmtools_platform_comps.comps_platform.COMPSPlatform' ` Returns Full module path to class of object"}, {"title": "Troubleshooting \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-troubleshoot.html", "text": "Troubleshooting \u00b6 You can use troubleshooting commands to get information abouts plugins (CLI, Platform, and Task) and to get detailed system information. To see the list of troubleshooting commands, type the following at a command prompt: $ idmtools info --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools info [OPTIONS] COMMAND [ARGS]... Troubleshooting and debugging information Options: --help Show this message and exit. Commands: plugins Commands to get information about installed IDM-Tools plugins system Provide an output with details about your current execution... To see the list of troubleshooting commands and options for the plugins command, type the following at a command prompt: $ idmtools info plugins --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools info plugins [OPTIONS] COMMAND [ARGS]... Commands to get information about installed IDM-Tools plugins Options: --help Show this message and exit. Commands: cli List CLI plugins platform List Platform plugins task List Task plugins To see the list of troubleshooting options for the system command, type the following at a command prompt: $ idmtools info system --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools info system [OPTIONS] Provide an output with details about your current execution platform and IDM-Tools install Options: --copy-to-clipboard / --no-copy-to-clipboard Copy output to clipboard --no-format-for-gh / --format-for-gh When copying to clipboard, do we want to formatted for Github --issue / --no-issue Copy data and format for github alias --output-filename TEXT Output filename --help Show this message and exit."}, {"title": "idmtools.entities.iplatform_ops.iplatform_asset_collection_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.html", "text": "idmtools.entities.iplatform_ops.iplatform_asset_collection_operations module \u00b6 class idmtools.entities.iplatform_ops.iplatform_asset_collection_operations. IPlatformAssetCollectionOperations ( platform: 'IPlatform' , platform_type: Type ) \u00b6 Bases: idmtools.core.cache_enabled.CacheEnabled , abc.ABC platform : 'IPlatform' = None \u00b6 platform_type : Type = None \u00b6 pre_create ( asset_collection: idmtools.assets.asset_collection.AssetCollection , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/AssetCollection post creation events Parameters asset_collection \u2013 AssetCollection to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn post_create ( asset_collection: idmtools.assets.asset_collection.AssetCollection , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/AssetCollection post creation events Parameters asset_collection \u2013 AssetCollection to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn create ( asset_collection: idmtools.assets.asset_collection.AssetCollection , do_pre: bool = True , do_post: bool = True , **kwargs ) \u2192 Any \u00b6 Creates an AssetCollection from an IDMTools AssetCollection object. Also performs pre-creation and post-creation locally and on platform Parameters asset_collection \u2013 AssetCollection to create do_pre \u2013 Perform Pre creation events for item do_post \u2013 Perform Post creation events for item **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item abstract platform_create ( asset_collection: idmtools.assets.asset_collection.AssetCollection , **kwargs ) \u2192 Any \u00b6 Creates an workflow_item from an IDMTools AssetCollection object Parameters asset_collection \u2013 AssetCollection to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item batch_create ( asset_collections: List[idmtools.assets.asset_collection.AssetCollection], display_progress: bool = True, **kwargs ) \u2192 List[idmtools.assets.asset_collection.AssetCollection] \u00b6 Provides a method to batch create asset collections items Parameters asset_collections \u2013 List of asset collection items to create display_progress \u2013 Show progress bar **kwargs \u2013 Returns List of tuples containing the create object and id of item that was created abstract get ( asset_collection_id: uuid.UUID , **kwargs ) \u2192 Any \u00b6 Returns the platform representation of an AssetCollection Parameters asset_collection_id \u2013 Item id of AssetCollection **kwargs \u2013 Returns Platform Representation of an AssetCollection to_entity ( asset_collection: Any , **kwargs ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Converts the platform representation of AssetCollection to idmtools representation Parameters asset_collection \u2013 Platform AssetCollection object Returns IDMTools suite object"}, {"title": "idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection.html", "text": "idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection module \u00b6 idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection. build_asset_file_list ( comps_sim , prefix='L' ) \u00b6 Utility function to build all library files :param comps_sim: given simulation :param prefix: used to identify library files Returns: file paths as a list idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection. get_first_simulation_of_experiment ( exp_id ) \u00b6 Retrieve the first simulation from an experiment :param exp_id: use input (experiment id) Returns: list of files paths idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection. get_data ( url ) \u00b6 Get content of a file :param url: file location Returns: file content as byte string idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection. main ( ) \u00b6"}, {"title": "idmtools.assets.content_handlers module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.content_handlers.html", "text": "idmtools.assets.content_handlers module \u00b6 idmtools.assets.content_handlers. json_handler ( content ) \u00b6"}, {"title": "idmtools_platform_comps.ssmt_work_items.icomps_workflowitem module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.html", "text": "idmtools_platform_comps.ssmt_work_items.icomps_workflowitem module \u00b6 class idmtools_platform_comps.ssmt_work_items.icomps_workflowitem. ICOMPSWorkflowItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None , work_order: dict = <factory> , plugin_key: str = '1.0.0.0_RELEASE' ) \u00b6 Bases: idmtools.entities.iworkflow_item.IWorkflowItem , abc.ABC Interface of idmtools work item item_name : str = 'Idm WorkItem Test' \u00b6 work_order : dict = None \u00b6 work_item_type : str = None \u00b6 plugin_key : str = '1.0.0.0_RELEASE' \u00b6 get_base_work_order ( ) \u00b6 load_work_order ( wo_file ) \u00b6 set_work_order ( wo ) \u00b6 Update wo for the name with value :param wo: user wo Returns: None update_work_order ( name , value ) \u00b6 Update wo for the name with value :param name: wo arg name :param value: wo arg value Returns: None clear_wo_args ( ) \u00b6 Clear all existing wo args Returns: None"}, {"title": "idmtools.entities.experiment module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.experiment.html", "text": "idmtools.entities.experiment module \u00b6 class idmtools.entities.experiment. Experiment ( _uid: uuid.UUID = None, platform_id: uuid.UUID = None, _platform: IPlatform = None, parent_id: uuid.UUID = None, _parent: IEntity = None, status: idmtools.core.enums.EntityStatus = None, tags: Dict[str, Any] = <factory>, _platform_object: Any = None, name: str = None, assets: idmtools.assets.asset_collection.AssetCollection = <factory>, suite_id: <module 'uuid' from '/opt/hostedtoolcache/Python/3.7.7/x64/lib/python3.7/uuid.py'> = None, task_type: str = 'idmtools.entities.command_task.CommandTask', platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, simulations: dataclasses.InitVar = <property object>, _Experiment__simulations: Union[idmtools.core.interfaces.entity_container.EntityContainer, Generator[Simulation, None, None], idmtools.entities.templated_simulation.TemplatedSimulations, Iterator[Simulation]] = <factory>, gather_common_assets_from_task: bool = None ) \u00b6 Bases: idmtools.core.interfaces.iassets_enabled.IAssetsEnabled , idmtools.core.interfaces.inamed_entity.INamedEntity Class that represents a generic experiment. This class needs to be implemented for each model type with specifics. Parameters name \u2013 The experiment name. assets \u2013 The asset collection for assets global to this experiment. suite_id : <module 'uuid' from '/opt/hostedtoolcache/Python/3.7.7/x64/lib/python3.7/uuid.py'> = None \u00b6 Suite ID item_type : idmtools.core.enums.ItemType = 2 \u00b6 Item Item(always an experiment) task_type : str = 'idmtools.entities.command_task.CommandTask' \u00b6 Task Type(defaults to command) platform_requirements : Set[PlatformRequirements] = None \u00b6 List of Requirements for the task that a platform must meet to be able to run frozen : bool = False \u00b6 Is the Experiment Frozen gather_common_assets_from_task : bool = None \u00b6 Determines if we should gather assets from a the first task. Only use when not using TemplatedSimulations property suite \u00b6 display ( ) \u00b6 pre_creation ( ) \u2192 None \u00b6 Experiment pre_creation callback Returns: property done \u00b6 Return if an experiment has finished executing Returns True if all simulations have ran, False otherwise property succeeded \u00b6 Return if an experiment has succeeded. An experiment is succeeded when all simulations have succeeded Returns True if all simulations have succeeded, False otherwise property simulations \u00b6 Simulation in this experiment property simulation_count \u00b6 Return the total simulations Returns: refresh_simulations ( ) \u2192 NoReturn \u00b6 Refresh the simulations from the platform Returns: refresh_simulations_status ( ) \u00b6 pre_getstate ( ) \u00b6 Return default values for pickle_ignore_fields() . Call before pickling. gather_assets ( ) \u2192 NoReturn \u00b6 Function called at runtime to gather all assets in the collection. classmethod from_task ( task , name: str = None , tags: Dict[str , Any] = None , assets: idmtools.assets.asset_collection.AssetCollection = None , gather_common_assets_from_task: bool = True ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Creates an Experiment with one Simulation from a task Parameters task \u2013 Task to use assets \u2013 Asset collection to use for common tasks. Defaults to gather assets from task name \u2013 Name of experiment tags \u2013 gather_common_assets_from_task \u2013 Whether we should attempt to gather assets from the Task object for the experiment. With large amounts of tasks, this can be expensive as we loop through all Returns: classmethod from_builder ( builders: Union[idmtools.builders.simulation_builder.SimulationBuilder, List[idmtools.builders.simulation_builder.SimulationBuilder]], base_task: idmtools.entities.itask.ITask, name: str = None, assets: idmtools.assets.asset_collection.AssetCollection = None, tags: Dict[str, Any] = None ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Creates an experiment from a SimulationBuilder object(or list of builders Parameters builders \u2013 List of builder to create experiment from base_task \u2013 Base task to use as template name \u2013 Experiment name assets \u2013 Experiment level assets tags \u2013 Experiment tags Returns Experiment object from the builders classmethod from_template ( template: idmtools.entities.templated_simulation.TemplatedSimulations , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = None , tags: Dict[str , Any] = None ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Creates an Experiment from a TemplatedSimulation object Parameters template \u2013 TemplatedSimulation object name \u2013 Experiment name assets \u2013 Experiment level assets tags \u2013 Tags Returns Experiment object from the TemplatedSimulation object list_static_assets ( children: bool = False , platform: IPlatform = None , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List assets that have been uploaded to a server already Parameters children \u2013 When set to true, simulation assets will be loaded as well platform \u2013 Optional platform to load assets list from **kwargs \u2013 Returns List of assets run ( wait_until_done: bool = False , platform: IPlatform = None , **run_opts ) \u2192 NoReturn \u00b6 Runs an experiment on a platform Parameters wait_until_done \u2013 Whether we should wait on experiment to finish running as well. Defaults to False platform \u2013 Platform object to use. If not specified, we first check object for platform object then the current context **run_opts \u2013 Options to pass to the platform Returns None wait ( timeout: int = None , refresh_interval=None , platform: IPlatform = None ) \u00b6 Wait on an experiment to finish running Parameters timeout \u2013 Timeout to wait refresh_interval \u2013 How often to refresh object platform \u2013 Platform. If not specified, we try to determine this from context Returns: to_dict ( ) \u00b6 classmethod from_id ( item_id: Union[str, uuid.UUID], platform: IPlatform = None, **kwargs ) \u2192 Experiment \u00b6 Helper function to provide better intellisense to end users Parameters item_id \u2013 Item id to load platform \u2013 Optional platform. Fallbacks to context **kwargs \u2013 Optional arguments to be passed on to the platform Returns: print ( verbose: bool = False ) \u00b6 Print summary of experiment :param verbose: Verbose printing Returns: class idmtools.entities.experiment. ExperimentSpecification \u00b6 Bases: idmtools.registry.experiment_specification.ExperimentPluginSpecification get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get ( configuration: dict ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Experiment is going get_type ( ) \u2192 Type[idmtools.entities.experiment.Experiment] \u00b6"}, {"title": "idmtools.analysis.add_analyzer module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.add_analyzer.html", "text": "idmtools.analysis.add_analyzer module \u00b6 class idmtools.analysis.add_analyzer. AddAnalyzer ( filenames=None , output_path='output' ) \u00b6 Bases: idmtools.entities.ianalyzer.IAnalyzer A simple base class to add analyzers. Examples # Example AddAnalyzer for EMOD Experiment # In this example, we will demonstrate how to create an AddAnalyzer to analyze an experiment's output file # First, import some necessary system and idmtools packages. from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.add_analyzer import AddAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : # Set the platform where you want to run your analysis # In this case we are running in COMPS, but this can be changed to run 'Local' platform = Platform ( 'COMPS2' ) # Arg option for analyzer init are uid, working_dir, data in the method map (aka select_simulation_data), # and filenames # In this case, we want to provide a filename to analyze filenames = [ 'StdOut.txt' ] # Initialize the analyser class with the name of file to save to and start the analysis analyzers = [ AddAnalyzer ( filenames = filenames )] # Set the experiment you want to analyze experiment_id = 'f227704e-0c34-ea11-a2be-f0921c167861' # comps2 staging exp id # Specify the id Type, in this case an Experiment manager = AnalyzeManager ( platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () filter ( item ) \u00b6 Decide whether the analyzer should process a simulation. Parameters item \u2013 An IItem to be considered for processing with this analyzer. Returns A Boolean indicating whether simulation should be analyzed by this analyzer. initialize ( ) \u00b6 Call once after the analyzer has been added to the AnalyzeManager . Add everything depending on the working directory or unique ID here instead of in __init__. map ( data , item ) \u00b6 In parallel for each simulation, consume raw data from filenames and emit selected data. Parameters data \u2013 A dictionary associating filename with content for simulation data. item \u2013 IItem object that the passed data is associated with. Returns Selected data for the given item. reduce ( data ) \u00b6 Combine the map() data for a set of items into an aggregate result. Parameters all_data \u2013 A dictionary with entries for the item ID and selected data."}, {"title": "Partial analysis \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-partial.html", "text": "Partial analysis \u00b6 You can use analyzers for a partial analysis of simulations. This allows you to only analyze succeeded simulations, while one or more simulations within an experiment may have failed. In addition, you can analyze both succeeded and failed simulations. Analysis on only succeeded simulations \u00b6 For partial analysis only on the succeeded simulations, where one or more simulations may have failed, you set to True the partial_analyze_ok parameter from the AnalyzeManager class, as seen in the following python code excerpt: analyzers = [ CSVAnalyzer ( filenames = filenames )] manager = AnalyzeManager ( platform = self . platform , partial_analyze_ok = True , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () Analysis on both succeeded and failed simulations \u00b6 For analysis on both succeeded and failed simulations, you set to True the analyze_failed_items parameter from the AnalyzeManager class, as seen in the following python code excerpt: analyzers = [ CSVAnalyzer ( filenames = filenames )] manager = AnalyzeManager ( platform = self . platform , analyze_failed_items = True , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze ()"}, {"title": "idmtools_platform_comps.cli.cli_functions module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.cli.cli_functions.html", "text": "idmtools_platform_comps.cli.cli_functions module \u00b6 idmtools_platform_comps.cli.cli_functions. validate_range ( value: float , min: float , max: float ) \u2192 Tuple[bool, str] \u00b6 Function used to validate an integer value between min and max :param value: The value set by the user :param min: Minimum value :param max: Maximum value Returns: tuple with validation result and error message if needed idmtools_platform_comps.cli.cli_functions. environment_list ( previous_settings: Dict , current_field: dataclasses.Field ) \u2192 Dict \u00b6 Allows the CLI to provide a list of available environments. Uses the previous_settings to get the endpoint to query for environments :param previous_settings: previous settings set by the user in the CLI. :param current_field: Current field specs Returns: updates to the choices and default"}, {"title": "Serialization \u2014 IDM-Tools  documentation", "tags": "", "url": "./serialization.html", "text": "Serialization \u00b6"}, {"title": "idmtools.core.interfaces package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.html", "text": "idmtools.core.interfaces package \u00b6 Submodules \u00b6 idmtools.core.interfaces.entity_container module idmtools.core.interfaces.iassets_enabled module idmtools.core.interfaces.ientity module idmtools.core.interfaces.iitem module idmtools.core.interfaces.inamed_entity module Module contents \u00b6"}, {"title": "idmtools_platform_local.internals.workers.run_broker module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.run_broker.html", "text": "idmtools_platform_local.internals.workers.run_broker module \u00b6"}, {"title": "idmtools \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_index.html", "text": "idmtools \u00b6 idmtools package Subpackages idmtools.analysis package Submodules Module contents idmtools.assets package Submodules Module contents idmtools.builders package Submodules Module contents idmtools.config package Submodules Module contents idmtools.core package Subpackages Submodules Module contents idmtools.entities package Subpackages Submodules Module contents idmtools.registry package Submodules Module contents idmtools.services package Submodules Module contents idmtools.utils package Subpackages Submodules Module contents Module contents"}, {"title": "idmtools.core.interfaces.entity_container module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.entity_container.html", "text": "idmtools.core.interfaces.entity_container module \u00b6 class idmtools.core.interfaces.entity_container. EntityContainer ( children: List[IEntity] = None ) \u00b6 Bases: list set_status ( status ) \u00b6 set_status_for_item ( item_id , status ) \u00b6"}, {"title": "idmtools.utils.local_os module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.local_os.html", "text": "idmtools.utils.local_os module \u00b6 class idmtools.utils.local_os. LocalOS \u00b6 Bases: object A Central class for representing values whose proper access methods may differ between platforms. exception UnknownOS \u00b6 Bases: Exception os_mapping = {'darwin': 'mac', 'linux': 'lin', 'windows': 'win'} \u00b6 username = 'runner' \u00b6 name = 'lin' \u00b6 static is_window ( ) \u00b6"}, {"title": "idmtools.entities.iplatform_ops.iplatform_workflowitem_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.html", "text": "idmtools.entities.iplatform_ops.iplatform_workflowitem_operations module \u00b6 class idmtools.entities.iplatform_ops.iplatform_workflowitem_operations. IPlatformWorkflowItemOperations ( platform: 'IPlatform' , platform_type: Type ) \u00b6 Bases: idmtools.core.cache_enabled.CacheEnabled , abc.ABC platform : 'IPlatform' = None \u00b6 platform_type : Type = None \u00b6 abstract get ( workflow_item_id: uuid.UUID , **kwargs ) \u2192 Any \u00b6 Returns the platform representation of an WorkflowItem Parameters workflow_item_id \u2013 Item id of WorkflowItems **kwargs \u2013 Returns Platform Representation of an workflow_item batch_create ( workflow_items: List[idmtools.entities.iworkflow_item.IWorkflowItem], display_progress: bool = True, **kwargs ) \u2192 List[Any] \u00b6 Provides a method to batch create workflow items Parameters workflow_items \u2013 List of worfklow items to create display_progress \u2013 Whether to display progress bar **kwargs \u2013 Returns List of tuples containing the create object and id of item that was created pre_create ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/workflow item post creation events Parameters workflow_item \u2013 IWorkflowItem to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn post_create ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/workflow item post creation events Parameters workflow_item \u2013 IWorkflowItem to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn create ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , do_pre: bool = True , do_post: bool = True , **kwargs ) \u2192 Any \u00b6 Creates an workflow item from an IDMTools IWorkflowItem object. Also performs pre-creation and post-creation locally and on platform Parameters workflow_item \u2013 Suite to create do_pre \u2013 Perform Pre creation events for item do_post \u2013 Perform Post creation events for item **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item abstract platform_create ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 Tuple[Any, uuid.UUID] \u00b6 Creates an workflow_item from an IDMTools workflow_item object Parameters workflow_item \u2013 WorkflowItem to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item pre_run_item ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Trigger right before commissioning experiment on platform. This ensures that the item is created. It also ensures that the children(simulations) have also been created Parameters workflow_item \u2013 Experiment to commission Returns: post_run_item ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Trigger right after commissioning workflow item on platform. Parameters workflow_item \u2013 Experiment just commissioned Returns: run_item ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource Parameters workflow_item \u2013 Returns: abstract platform_run_item ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Called during commissioning of an item. This should perform what is needed to commission job on platform Parameters workflow_item \u2013 Returns: abstract get_parent ( workflow_item: Any , **kwargs ) \u2192 Any \u00b6 Returns the parent of item. If the platform doesn\u2019t support parents, you should throw a TopLevelItem error Parameters workflow_item \u2013 **kwargs \u2013 Returns: Raise: TopLevelItem abstract get_children ( workflow_item: Any , **kwargs ) \u2192 List[Any] \u00b6 Returns the children of an workflow_item object Parameters workflow_item \u2013 WorkflowItem object **kwargs \u2013 Optional arguments mainly for extensibility Returns Children of workflow_item object to_entity ( workflow_item: Any , **kwargs ) \u2192 idmtools.entities.iworkflow_item.IWorkflowItem \u00b6 Converts the platform representation of workflow_item to idmtools representation Parameters workflow_item \u2013 Platform workflow_item object Returns IDMTools workflow_item object abstract refresh_status ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Refresh status for workflow item :param workflow_item: Item to refresh status for Returns None abstract send_assets ( workflow_item: Any , **kwargs ) \u00b6 Send assets for workflow item to platform Parameters workflow_item \u2013 Item to send assets for Returns: abstract get_assets ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Load assets for workflow item :param workflow_item: Item :param files: List of files to load :param **kwargs: Returns Dictionary with filename as key and value as binary content abstract list_assets ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List available assets for a workflow item Parameters workflow_item \u2013 workflow item to list files for Returns List of filenames"}, {"title": "idmtools_platform_local.infrastructure.docker_io module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.docker_io.html", "text": "idmtools_platform_local.infrastructure.docker_io module \u00b6 class idmtools_platform_local.infrastructure.docker_io. DockerIO ( host_data_directory: str = '/home/runner/.local_data' ) \u00b6 Bases: object host_data_directory : str = '/home/runner/.local_data' \u00b6 delete_files_below_level ( directory , target_level=1 , current_level=1 ) \u00b6 cleanup ( delete_data: bool = True , shallow_delete: bool = False ) \u2192 NoReturn \u00b6 Stops the running services, removes local data, and removes network. You can optionally disable the deleting of local data Parameters delete_data ( bool ) \u2013 When true, deletes local data shallow_delete ( bool ) \u2013 Deletes the data but not the container folders(redis, workers). Preferred to preserve permissions and resolve docker issues Returns (NoReturn) copy_to_container ( container: docker.models.containers.Container , destination_path: str , file: Union[str , bytes , None] = None , content: [<class 'str'> , <class 'bytes'>] = None , dest_name: Optional[str] = None ) \u2192 bool \u00b6 Copies a physical file or content in memory to a container. You can also choose a different name for the destination file by using the dest_name option Parameters container \u2013 Container to copy the file to file \u2013 Path to the file to copy content \u2013 Content to copy destination_path \u2013 Path within the container to copy the file to(should be a directory) dest_name \u2013 Optional parameter for destination filename. By default the source filename is used Returns (bool) True if the copy succeeds, False otherwise sync_copy ( futures ) \u00b6 Sync the copy operations queue in the io_queue. This allows us to take advantage of multi-threaded copying while also making it convenient to have sync points, such as uploading the assets in parallel but pausing just before sync point Parameters futures \u2013 Returns: copy_multiple_to_container ( container: docker.models.containers.Container, files: Dict[str, Dict[str, Any]], join_on_copy: bool = True ) \u00b6 static create_archive_from_bytes ( content: Union[bytes, _io.BytesIO, BinaryIO], name: str ) \u2192 _io.BytesIO \u00b6 Create a tar archive from bytes. Used to copy to docker Parameters content \u2013 Content to copy into tar name \u2013 Name for file in archive Returns (BytesIO) Return bytesIO object create_directory ( dir: str ) \u2192 bool \u00b6 Create a directory in a container Parameters dir \u2013 Path to directory to create container \u2013 Container to create directory in. Default to worker container Returns (ExecResult) Result of the mkdir operation"}, {"title": "Examples \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-examples.html", "text": "Examples \u00b6 You can use IDM CLI to download the included Python example scripts from GitHub to a local folder using the gitrepo command. To see the list of commands and options for gitrepo , type the following at a command prompt: $ idmtools gitrepo --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools gitrepo [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: download \b Download files from GitHub repo to user location Args: url:... peep \b Display all current files/dirs of the repo folder (not... releases \b Display all the releases of the repo Args: owner: Repo owner... repos \b Display all public repos of the owner Args: owner: Repo owner... view \b Display all idmtools available examples Args: raw: True/False... or view examples by type through $ idmtools examples list INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini SSMTPlatform - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/ssmt - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/vistools COMPSPlatform - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/ssmt - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/workitem - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/vistools JSONConfiguredTask - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/python_model - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/load_lib JSONConfiguredRTask - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/r_model PythonTask - https://github.com/InstituteforDiseaseModeling/idmtools/tree/v1.2.0/examples/load_lib CommandTask - https://github.com/InstituteforDiseaseModeling/corvid-idmtools To see the list of commands and options for downloading examples, type the following at a command prompt: $ idmtools gitrepo download --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools gitrepo download [OPTIONS] Download files from GitHub repo to user location Args: url: GitHub repo files url output: Local folder Returns: Files download count Options: --type TEXT Download examples by type(COMPSPlatform, PythonTask, etc) --url TEXT Repo files url --output TEXT Files download destination --help Show this message and exit. or $ idmtools examples download --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools examples download [OPTIONS] Download examples from specified location Args: url: GitHub repo files url output: Local folder Returns: Files download count Options: --type TEXT Download examples by type(COMPSPlatform, PythonTask, etc) --url TEXT Repo files url --output TEXT Files download destination --help Show this message and exit. To see a list of IDM examples available for downloading, type idmtools gitrepo download at a command prompt."}, {"title": "idmtools.core.interfaces.inamed_entity module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.inamed_entity.html", "text": "idmtools.core.interfaces.inamed_entity module \u00b6 class idmtools.core.interfaces.inamed_entity. INamedEntity ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: 'IPlatform' = None , parent_id: uuid.UUID = None , _parent: 'IEntity' = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , item_type: idmtools.core.enums.ItemType = None , _platform_object: Any = None , name: str = None ) \u00b6 Bases: idmtools.core.interfaces.ientity.IEntity name : str = None \u00b6"}, {"title": "idmtools.utils.time module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.time.html", "text": "idmtools.utils.time module \u00b6 idmtools.utils.time. timestamp ( time=None ) \u00b6 Return a timestamp. Parameters time \u2013 A time object; if None provided, use now. Returns A string timestamp in UTC, format YYYYMMDD_HHmmSS."}, {"title": "idmtools_platform_local.internals.workers.database module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.database.html", "text": "idmtools_platform_local.internals.workers.database module \u00b6 idmtools_platform_local.internals.workers.database. create_db ( engine ) \u00b6 idmtools_platform_local.internals.workers.database. get_session ( ) \u2192 sqlalchemy.orm.session.Session \u00b6 idmtools_platform_local.internals.workers.database. get_db ( ) \u2192 sqlalchemy.engine.base.Engine \u00b6 idmtools_platform_local.internals.workers.database. reset_db ( ) \u00b6 idmtools_platform_local.internals.workers.database. get_or_create ( session: sqlalchemy.orm.session.Session, model, filter_args: List[str], **model_args ) \u00b6"}, {"title": "idmtools.registry.master_plugin_registry module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.master_plugin_registry.html", "text": "idmtools.registry.master_plugin_registry module \u00b6 class idmtools.registry.master_plugin_registry. MasterPluginRegistry \u00b6 Bases: object get_plugin_map ( ) \u2192 Dict[str, idmtools.registry.plugin_specification.PluginSpecification] \u00b6 get_plugins ( ) \u2192 Set[idmtools.registry.plugin_specification.PluginSpecification] \u00b6"}, {"title": "Glossary \u2014 IDM-Tools  documentation", "tags": "", "url": "./glossary.html", "text": "Glossary \u00b6 The following terms describe both the features and functionality of the IDM-Tools software, as well as information relevant to using IDM-Tools. asset collection The set of specific input files (such as input parameters, weather or migration data, or other configuration settings) required for running a simulation. assets See asset collection. builder TBD experiment A collection of multiple simulations, typically sent to an HPC. high-performance computing (HPC) The use of parallel processing for running advanced applications efficiently, reliably, and quickly. task TBD template TBD"}, {"title": "Create simulation tags \u2014 IDM-Tools  documentation", "tags": "", "url": "./create-sims-tags.html", "text": "Create simulation tags \u00b6 During the creation of simulations you can add tags, key:value pairs, included as metadata. The tags can be used for filtering on and searching for simulations. IDM-Tools includes multiple ways for adding tags to simulations: (Preferred) Builder callbacks with SimulationBuilder or Simulation Base task with TemplatedSimulations Specific simulation from TemplatedSimulations (Preferred) Builder callbacks via add_sweep_definition \u00b6 You can add tags to simulations by using builder callbacks while building experiments with SimulationBuilder or Simulation classes and the add_sweep_definition method. This way supports adding tags to a large set of simulations and gives you full control over the simulation/task object. In addition, built-in tag management support is used when implementing the return values in a dictionary for the tags. For more information see the example in SimulationBuilder . Base task with TemplatedSimulations \u00b6 You can add tags to all simulations via base task used with the TemplatedSimulations class while building simulations. For more information see the example in TemplatedSimulations . Specific simulation from TemplatedSimulations \u00b6 If you need to add a tag to a specific simulation after building simulations from task with TemplatedSimulations , then you must convert the simulations to a list. For more information see the example in TemplatedSimulations ."}, {"title": "CLI reference \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli_index.html", "text": "CLI reference \u00b6 idmtools.ini file Templates Simulations Experiments Platforms Examples Troubleshooting IDM includes a command-line interface (CLI) with options and commands to assist with getting started, managing and monitoring, and troubleshooting simulations and experiments. After you\u2019ve installed IDM you can view the available options and commands by typing the following at a command prompt $ idmtools --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools [OPTIONS] COMMAND [ARGS]... Allows you to perform multiple idmtools commands Options: --debug / --no-debug When selected, enables console level logging --help Show this message and exit. Commands: config Contains commands related to the creation of idmtools.ini... examples Display a list of examples organized by plugin type experiment Contains commands related to experiments Some useful examples... gitrepo info Troubleshooting and debugging information init Commands to help start or extend projects through templating. init-export Export list of project templates local Commands related to managing the local platform simulation Contains commands related to simulations Some useful examples..."}, {"title": "idmtools.registry.platform_specification module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.platform_specification.html", "text": "idmtools.registry.platform_specification module \u00b6 class idmtools.registry.platform_specification. PlatformSpecification \u00b6 Bases: idmtools.registry.plugin_specification.PluginSpecification , abc.ABC classmethod get_name ( strip_all: bool = True ) \u2192 str \u00b6 Get name of plugin. By default we remove the PlatformSpecification portion. :param strip_all: When true, PlatformSpecification is stripped from name. When false only Specification is Stripped Returns: example_configuration ( ) \u00b6 Example configuration for the platform. This is useful in help or error messages. Returns: get ( configuration: dict ) \u2192 IPlatform \u00b6 Return a new platform using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new platform. get_type ( ) \u2192 Type[IPlatform] \u00b6 class idmtools.registry.platform_specification. PlatformPlugins ( strip_all: bool = True ) \u00b6 Bases: object get_plugins ( ) \u2192 Set[idmtools.registry.platform_specification.PlatformSpecification] \u00b6 get_plugin_map ( ) \u2192 Dict[str, idmtools.registry.platform_specification.PlatformSpecification] \u00b6"}, {"title": "idmtools.entities.task_proxy module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.task_proxy.html", "text": "idmtools.entities.task_proxy module \u00b6 class idmtools.entities.task_proxy. TaskProxy ( command: Union[str , idmtools.entities.command_line.CommandLine] = None , is_docker: bool = False , is_gpu: bool = False ) \u00b6 Bases: object This class is used to reduce the memory footprint of tasks after a simulation has been provisioned command : Union[str, idmtools.entities.command_line.CommandLine] = None \u00b6 is_docker : bool = False \u00b6 is_gpu : bool = False \u00b6 static from_task ( task: ITask ) \u00b6"}, {"title": "Simulations \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-simulations.html", "text": "Simulations \u00b6 You can use the simulation command to get the status of simulations for the local platform. To see the list of options type the following at a command prompt. $ idmtools simulation --platform Local status --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools simulation status [OPTIONS] List of statuses for simulation(s) with the ability to filter by id, experiment_id, status, and tags For Example Get the status of simulations for the platform using the local platform defaults, you would run idmtools simulation --platform Local status Another example would be to use a platform defined in a configuration block while also filtering tags where a == 0 idmtools simulation --config- block COMPS2 status --tags a 0 Multiple tags idmtools simulation --config-block COMPS2 status --tags a 0 --tags a 3 Options: --id TEXT Filter status by simulation ID --experiment-id TEXT Filter status by experiment ID --tags TEXT... Tag to filter by. This should be in the form name value. For example, if you have a tag type=PythonTask you would use --tags type PythonTask. In addition, you can provide multiple tags, ie --tags a 1 --tags b 2. This will perform an AND based query on the tags meaning only jobs contains ALL the tags specified will be displayed --help Show this message and exit."}, {"title": "idmtools_platform_local.client.experiments_client module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.client.experiments_client.html", "text": "idmtools_platform_local.client.experiments_client module \u00b6 class idmtools_platform_local.client.experiments_client. ExperimentsClient \u00b6 Bases: idmtools_platform_local.client.base.BaseClient path_url = 'experiments' \u00b6 classmethod get_all ( tags: Optional[List[Tuple[str , str]]] = None , page: Optional[int] = None , per_page: Optional[int] = None ) \u2192 List[Dict[str, Any]] \u00b6 Get all experiments with options to filter by tags Parameters per_page \u2013 How many experiments to return per page page \u2013 Which page tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 List of tags/values to filter experiment by Returns returns list of experiments Return type List[Dict[str, Any]] classmethod get_one ( id: str , tags: Optional[List[Tuple[str , str]]] = None ) \u2192 Dict[str, Any] \u00b6 Convenience method to get one experiment Parameters id ( str ) \u2013 ID of the experiment tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 List of tags/values to filter experiment by Returns Dictionary containing the experiment objects Return type dict classmethod delete ( id: str , delete_data: bool = False , ignore_doesnt_exist: bool = True ) \u2192 bool \u00b6 Delete an experiment. Optionally you can delete the experiment data. WARNING: Deleting the data is irreversible Parameters id ( str ) \u2013 ID of the experiments delete_data ( bool ) \u2013 Delete data directory including simulations ignore_doesnt_exist \u2013 Ignore error if the specific experiment doesn\u2019t exist Returns True if deletion is succeeded"}, {"title": "idmtools.builders.simulation_builder module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.builders.simulation_builder.html", "text": "idmtools.builders.simulation_builder module \u00b6 class idmtools.builders.simulation_builder. SimulationBuilder \u00b6 Bases: object Class that represents an experiment builder. Examples import os import sys from idmtools.assets import AssetCollection from idmtools.builders import SimulationBuilder from idmtools.core.platform_factory import platform from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH with platform ( 'COMPS2' ): base_task = JSONConfiguredPythonTask ( script_path = os . path . join ( COMMON_INPUT_PATH , \"compsplatform\" , \"working_model.py\" ), # add common assets from existing collection common_assets = AssetCollection . from_id ( 'bd80dd0c-1b31-ea11-a2be-f0921c167861' ) ) ts = TemplatedSimulations ( base_task = base_task ) # sweep parameter builder = SimulationBuilder () builder . add_sweep_definition ( JSONConfiguredPythonTask . set_parameter_partial ( \"min_x\" ), range ( - 2 , 0 )) builder . add_sweep_definition ( JSONConfiguredPythonTask . set_parameter_partial ( \"max_x\" ), range ( 1 , 3 )) ts . add_builder ( builder ) e = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ]) e . run ( wait_until_done = True ) # use system status as the exit code sys . exit ( 0 if e . succeeded else - 1 ) Add tags with builder callbacks: def update_sim ( sim , parameter , value ): sim . task . set_parameter ( parameter , value ) # set sim tasks, return { 'custom' : 123 , parameter : value ) builder = SimulationBuilder () set_run_number = partial ( update_sim , param = \"Run_Number\" ) builder . add_sweep_definition ( set_run_number , range ( 0 , 2 )) # create experiment from builder exp = Experiment . from_builder ( builder , task , name = expname ) SIMULATION_ATTR = 'simulation' \u00b6 add_sweep_definition ( function: Union[Callable[[idmtools.entities.simulation.Simulation, Any], Dict[str, Any]], functools.partial], values: Union[List[Any], Iterable] ) \u00b6 Add a parameter sweep definition. A sweep definition is composed of a function and a list of values to call the function with. Parameters function \u2013 The sweep function, which must include a simulation parameter (or whatever is specified in SIMULATION_ATTR ). The function also must include EXACTLY ONE free parameter, which the values will be passed to. The function can also be a partial\u2013any Callable type will work. values \u2013 The list of values to call the function with. Examples Examples of valid function: def myFunction ( simulation , parameter ): pass How to deal with functions requiring more than one parameter? Consider the following function: python def myFunction ( simulation , a , b ): pass Partial solution: python from functools import partial func = partial ( myFunction , a = 3 ) eb . add_sweep_definition ( func , [ 1 , 2 , 3 ]) Callable class solution: class setP : def __init__ ( self , a ): self . a = a def __call__ ( self , simulation , b ): return param_update ( simulation , self . a , b ) eb . add_sweep_definition ( setP ( 3 ), [ 1 , 2 , 3 ])"}, {"title": "idmtools.assets.errors module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.errors.html", "text": "idmtools.assets.errors module \u00b6 exception idmtools.assets.errors. DuplicatedAssetError ( asset: TAsset ) \u00b6 Bases: Exception"}, {"title": "idmtools.analysis.platform_anaylsis module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.platform_anaylsis.html", "text": "idmtools.analysis.platform_anaylsis module \u00b6 class idmtools.analysis.platform_anaylsis. PlatformAnalysis ( platform , experiment_ids , analyzers , analyzers_args=None , analysis_name='WorkItem Test' , tags=None , additional_files=None , asset_collection_id=None , asset_files=<idmtools.assets.file_list.FileList object> , wait_till_done: bool = True ) \u00b6 Bases: object analyze ( check_status=True ) \u00b6 validate_args ( ) \u00b6 get_work_item ( ) \u00b6"}, {"title": "idmtools.entities.templated_simulation module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.templated_simulation.html", "text": "idmtools.entities.templated_simulation module \u00b6 idmtools.entities.templated_simulation. simulation_generator ( builders , new_sim_func , additional_sims=None , batch_size=10 ) \u00b6 class idmtools.entities.templated_simulation. TemplatedSimulations ( builders: Set[idmtools.builders.simulation_builder.SimulationBuilder] = <factory> , base_simulation: idmtools.entities.simulation.Simulation = None , base_task: idmtools.entities.itask.ITask = None , parent: Experiment = None , tags: dataclasses.InitVar = <property object> , _TemplatedSimulations__extra_simulations: List[idmtools.entities.simulation.Simulation] = <factory> ) \u00b6 Bases: object Class for building templated simulations and commonly used with SimulationBuilder class. Examples Add tags to all simulations via base task: ts = TemplatedSimulations ( base_task = task ) ts . tags = { 'a' : 'test' , 'b' : 9 } ts . add_builder ( builder ) Add tags to a specific simulation: experiment = Experiment . from_builder ( builder , task , name = expname ) experiment . simulations = list ( experiment . simulations ) experiment . simulations [ 2 ] . tags [ 'test' ] = 123 builders : Set[SimulationBuilder] = None \u00b6 base_simulation : idmtools.entities.simulation.Simulation = None \u00b6 base_task : idmtools.entities.itask.ITask = None \u00b6 parent : Experiment = None \u00b6 property builder \u00b6 For backward-compatibility purposes. Returns The last TExperimentBuilder . add_builder ( builder: idmtools.builders.simulation_builder.SimulationBuilder ) \u2192 None \u00b6 Add builder to builder collection. Parameters builder \u2013 A builder to be added. Returns None property pickle_ignore_fields \u00b6 display ( ) \u00b6 simulations ( ) \u2192 Generator[idmtools.entities.simulation.Simulation, None, None] \u00b6 add_simulation ( simulation: idmtools.entities.simulation.Simulation ) \u00b6 Add a simulation that was built outside template engine to template generator. This is useful we you can build most simulations through a template but need a some that cannot. This is especially true for large simulation sets Parameters simulation \u2013 Simulation to add Returns: new_simulation ( ) \u00b6 Return a new simulation object. The simulation will be copied from the base simulation of the experiment. Returns The created simulation. property tags \u00b6 classmethod from_task ( task: idmtools.entities.itask.ITask , tags: Dict[str , Any] = None ) \u2192 idmtools.entities.templated_simulation.TemplatedSimulations \u00b6"}, {"title": "idmtools.builders package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.builders.html", "text": "idmtools.builders package \u00b6 Submodules \u00b6 idmtools.builders.arm_simulation_builder module idmtools.builders.csv_simulation_builder module idmtools.builders.simulation_builder module idmtools.builders.yaml_simulation_builder module Module contents \u00b6"}, {"title": "idmtools.utils.display.displays module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.display.displays.html", "text": "idmtools.utils.display.displays module \u00b6 class idmtools.utils.display.displays. IDisplaySetting ( header: str = None , field: str = None ) \u00b6 Bases: object Base class for a display setting. The child class needs to implement the display() method. Includes: header: Optional header for the display. field: If specified, the get_object() will call getattr for this field on the object. get_object ( obj: Any ) \u2192 Any \u00b6 abstract display ( obj: Any ) \u2192 str \u00b6 Display the object. Note that the attribute (identified by self.field) should be handled with get_object() . Parameters obj \u2013 The object to consider for display. Returns A string representing what to show. class idmtools.utils.display.displays. StringDisplaySetting ( header: str = None , field: str = None ) \u00b6 Bases: idmtools.utils.display.displays.IDisplaySetting Class that displays the object as string. display ( obj ) \u00b6 Display the object. Note that the attribute (identified by self.field) should be handled with get_object() . Parameters obj \u2013 The object to consider for display. Returns A string representing what to show. class idmtools.utils.display.displays. DictDisplaySetting ( header: str = None , field: str = None , max_items: int = 10 , flat: bool = False ) \u00b6 Bases: idmtools.utils.display.displays.IDisplaySetting Class that displays a dictionary. display ( obj: Any ) \u2192 str \u00b6 Display the object. Note that the attribute (identified by self.field) should be handled with get_object() . Parameters obj \u2013 The object to consider for display. Returns A string representing what to show. class idmtools.utils.display.displays. TableDisplay ( columns , max_rows=5 , field=None ) \u00b6 Bases: idmtools.utils.display.displays.IDisplaySetting Class that displays the object as a table. display ( obj ) \u00b6 Display the object. Note that the attribute (identified by self.field) should be handled with get_object() . Parameters obj \u2013 The object to consider for display. Returns A string representing what to show."}, {"title": "idmtools_models.python.python_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.python.python_task.html", "text": "idmtools_models.python.python_task module \u00b6 class idmtools_models.python.python_task. PythonTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, script_path: str = None, python_path: str = 'python' ) \u00b6 Bases: idmtools.entities.itask.ITask script_path : str = None \u00b6 python_path : str = 'python' \u00b6 platform_requirements : Set[PlatformRequirements] = None \u00b6 property command \u00b6 Update executable with new python_path Returns: re-build command retrieve_python_dependencies ( ) \u00b6 Retrieve the Pypi libraries associated with the given model script. .. rubric:: Notes This function scan recursively through the whole directory where the model file is contained. This function relies on pipreqs being installed on the system to provide dependencies list. Returns List of libraries required by the script gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Get the common assets. This should be a set of assets that are common to all tasks in an experiment Returns AssetCollection gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather transient assets. Generally this is the simulation level assets Returns: reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Reloads a python task from a simulation Parameters simulation \u2013 Simulation to reload Returns: pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Called before creation of parent Parameters parent \u2013 Parent Returns None Raise: ValueError if script name is not provided class idmtools_models.python.python_task. PythonTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.python.python_task.PythonTask \u00b6 Get instance of Python Task with specified configuration Parameters configuration \u2013 Configuration for task Returns Python task get_description ( ) \u2192 str \u00b6 Description of the plugin Returns Description string get_example_urls ( ) \u2192 List[str] \u00b6 Return List of urls that have examples using PythonTask Returns List of urls(str) that point to examples get_type ( ) \u2192 Type[idmtools_models.python.python_task.PythonTask] \u00b6 Get Type for Plugin Returns PythonTask"}, {"title": "idmtools_platform_local.internals.workers.brokers module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.brokers.html", "text": "idmtools_platform_local.internals.workers.brokers module \u00b6"}, {"title": "idmtools.utils.display package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.display.html", "text": "idmtools.utils.display package \u00b6 Submodules \u00b6 idmtools.utils.display.displays module idmtools.utils.display.settings module Module contents \u00b6 idmtools.utils.display. display ( obj , settings ) \u00b6"}, {"title": "idmtools.entities.iplatform_ops.iplatform_experiment_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.iplatform_experiment_operations.html", "text": "idmtools.entities.iplatform_ops.iplatform_experiment_operations module \u00b6 class idmtools.entities.iplatform_ops.iplatform_experiment_operations. IPlatformExperimentOperations ( platform: 'IPlatform' , platform_type: Type ) \u00b6 Bases: abc.ABC platform : 'IPlatform' = None \u00b6 platform_type : Type = None \u00b6 abstract get ( experiment_id: uuid.UUID , **kwargs ) \u2192 Any \u00b6 Returns the platform representation of an Experiment Parameters experiment_id \u2013 Item id of Experiments **kwargs \u2013 Returns Platform Representation of an experiment pre_create ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/experiment post creation events Parameters experiment \u2013 Experiment to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn post_create ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/experiment post creation events Parameters experiment \u2013 Experiment to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn create ( experiment: idmtools.entities.experiment.Experiment , do_pre: bool = True , do_post: bool = True , **kwargs ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Creates an experiment from an IDMTools simulation object. Also performs local/platform pre and post creation events Parameters experiment \u2013 Experiment to create do_pre \u2013 Perform Pre creation events for item do_post \u2013 Perform Post creation events for item **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item abstract platform_create ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 Any \u00b6 Creates an experiment from an IDMTools experiment object Parameters experiment \u2013 Experiment to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item batch_create ( experiments: List[idmtools.entities.experiment.Experiment], display_progress: bool = True, **kwargs ) \u2192 List[Tuple[idmtools.entities.experiment.Experiment]] \u00b6 Provides a method to batch create experiments Parameters experiments \u2013 List of experiments to create display_progress \u2013 Show progress bar **kwargs \u2013 Returns List of tuples containing the create object and id of item that was created abstract get_children ( experiment: Any , **kwargs ) \u2192 List[Any] \u00b6 Returns the children of an experiment object Parameters experiment \u2013 Experiment object **kwargs \u2013 Optional arguments mainly for extensibility Returns Children of experiment object abstract get_parent ( experiment: Any , **kwargs ) \u2192 Any \u00b6 Returns the parent of item. If the platform doesn\u2019t support parents, you should throw a TopLevelItem error Parameters experiment \u2013 **kwargs \u2013 Returns: Raise: TopLevelItem to_entity ( experiment: Any , **kwargs ) \u2192 idmtools.entities.experiment.Experiment \u00b6 Converts the platform representation of experiment to idmtools representation Parameters experiment \u2013 Platform experiment object Returns IDMTools experiment object pre_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Trigger right before commissioning experiment on platform. This ensures that the item is created. It also ensures that the children(simulations) have also been created Parameters experiment \u2013 Experiment to commission Returns: post_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Trigger right after commissioning experiment on platform. Parameters experiment \u2013 Experiment just commissioned Returns: run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource Parameters experiment \u2013 Returns: abstract platform_run_item ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Called during commissioning of an item. This should perform what is needed to commission job on platform Parameters experiment \u2013 Returns: abstract send_assets ( experiment: Any , **kwargs ) \u00b6 Transfer Experiment assets to the platform. :param experiment: Experiment to send assets for Returns: abstract refresh_status ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u00b6 Refresh status for experiment object. This should update the object directly. For experiments it is best if all simulation states are updated as well Parameters experiment \u2013 Experiment to get status for Returns None get_assets ( experiment: idmtools.entities.experiment.Experiment, files: List[str], **kwargs ) \u2192 Dict[str, Dict[str, bytearray]] \u00b6 Get files from experiment Parameters experiment \u2013 Experiment to get files from files \u2013 List files **kwargs \u2013 Returns Dict with each sim id and the files contents matching specified list list_assets ( experiment: idmtools.entities.experiment.Experiment , children: bool = False , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List available assets for a experiment Parameters experiment \u2013 Experiment to list files for children \u2013 Should we load assets from children as well? Returns List of Assets platform_list_asset ( experiment: idmtools.entities.experiment.Experiment , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6"}, {"title": "idmtools.utils.hashing module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.hashing.html", "text": "idmtools.utils.hashing module \u00b6 Fast hash of Python objects. class idmtools.utils.hashing. Hasher ( hash_name='md5' ) \u00b6 Bases: pickle._Pickler A subclass of pickler to do hashing, rather than pickling. hash ( obj , return_digest=True ) \u00b6 save ( obj ) \u00b6 memoize ( obj ) \u00b6 Disable memoization for strings so hashing happens on value and not reference. save_set ( set_items ) \u00b6 idmtools.utils.hashing. hash_obj ( obj , hash_name='md5' ) \u00b6 Quick calculation of a hash to identify uniquely Python objects. Parameters hash_name \u2013 The hashing algorithm to use. \u2018md5\u2019 is faster; \u2018sha1\u2019 is considered safer. idmtools.utils.hashing. ignore_fields_in_dataclass_on_pickle ( item ) \u00b6"}, {"title": "Templates \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-templates.html", "text": "Templates \u00b6 You can use the cookiecutter templates included with IDM-Tools to get started with python projects and IDM-Tools. These templates provide a logical, reasonably standardized, but flexible project structure for doing and sharing data science work. To see the list of included cookiecutter templates type the following at a command prompt. $ idmtools init --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools init [OPTIONS] COMMAND [ARGS]... Commands to help start or extend projects through templating. Options: --help Show this message and exit. Commands: data-science A logical, reasonably standardized, but flexible... docker-science This project is a tiny template for machine learning... reproducible-science A boilerplate for reproducible and transparent..."}, {"title": "idmtools_platform_local.cli.simulation module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.cli.simulation.html", "text": "idmtools_platform_local.cli.simulation module \u00b6 idmtools_platform_local.cli.simulation. prettify_simulation ( simulation: Dict[str, Any] ) \u00b6 Prettifies a JSON Simulation object for printing on a console. This includes - Making a pretty progress bar - URL-ifying the data paths Parameters simulation \u2013 JSON representation of the Experiment(from API) Returns: idmtools_platform_local.cli.simulation. status ( id: Optional[str], experiment_id: Optional[str], status: Optional[str], tags: Optional[List[Tuple[str, str]]] ) \u00b6 List of statuses for simulation(s) with the ability to filter by id, experiment_id, status, and tags Parameters id ( Optional [ str ] ) \u2013 Optional Id of simulation experiment_id ( Optional [ str ] ) \u2013 Optional experiment id status ( Optional [ str ] ) \u2013 Optional status string to filter by tag ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 Optional list of tuples in form of tag_name tag_value to user to filter experiments with Returns None"}, {"title": "Global parameters \u2014 IDM-Tools  documentation", "tags": "", "url": "./common-parameters.html", "text": "Global parameters \u00b6 The idmtool.ini file includes some global parameters that drive features within IDM-Tools. These primarily control features around workers and threads and are defined within the [COMMON] section of idmtool.ini. Most likely, you will not need to change these. The following includes an example of the [COMMON] section of idmtools.ini with the default settings: [ COMMON ] max_threads = 16 sims_per_thread = 20 max_local_sims = 6 max_workers = 16 batch_size = 10 max_threads - Maximumn number of threads for analysis and other multi-threaded activities. sims_per_thread - How many simulations per threads during simulation creation. max_local_sims - Maximum simulations to run locally. max_workers - Maxium number of workers processing in parallel. batch_size - Maxium batch size to retrieve simulations."}, {"title": "idmtools_platform_comps.cli.comps module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.cli.comps.html", "text": "idmtools_platform_comps.cli.comps module \u00b6"}, {"title": "idmtools.utils.command_line module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.command_line.html", "text": "idmtools.utils.command_line module \u00b6 idmtools.utils.command_line. suppress_output ( stdout=True , stderr=True ) \u00b6 Suppress any print/logging from a block of code. Parameters stdout \u2013 If True, hide output from stdout; if False, show it. stderr \u2013 If True, hide output from stderr; if False, show it."}, {"title": "idmtools.entities.ianalyzer module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.ianalyzer.html", "text": "idmtools.entities.ianalyzer module \u00b6 class idmtools.entities.ianalyzer. IAnalyzer ( uid=None , working_dir: Optional[str] = None , parse: bool = True , filenames: Optional[List[str]] = None ) \u00b6 Bases: object An abstract base class carrying the lowest level analyzer interfaces called by ExperimentManager . initialize ( ) \u2192 NoReturn \u00b6 Call once after the analyzer has been added to the AnalyzeManager . Add everything depending on the working directory or unique ID here instead of in __init__. per_group ( items: List[idmtools.core.interfaces.iitem.IItem] ) \u2192 NoReturn \u00b6 Call once before running the apply on the items. Parameters items \u2013 Objects with attributes of type ItemId . IDs of one or more higher-level hierarchical objects can be obtained from these IDs in order to perform tasks with them. Returns None filter ( item: Union[idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.simulation.Simulation] ) \u2192 bool \u00b6 Decide whether the analyzer should process a simulation. Parameters item \u2013 An IItem to be considered for processing with this analyzer. Returns A Boolean indicating whether simulation should be analyzed by this analyzer. abstract map ( data: Dict[str, Any], item: Union[idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.simulation.Simulation] ) \u2192 Any \u00b6 In parallel for each simulation, consume raw data from filenames and emit selected data. Parameters data \u2013 A dictionary associating filename with content for simulation data. item \u2013 IItem object that the passed data is associated with. Returns Selected data for the given item. abstract reduce ( all_data: Dict[Union[idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.simulation.Simulation], Any] ) \u2192 Any \u00b6 Combine the map() data for a set of items into an aggregate result. Parameters all_data \u2013 A dictionary with entries for the item ID and selected data. destroy ( ) \u2192 NoReturn \u00b6 Call after the analysis is done. class idmtools.entities.ianalyzer. BaseAnalyzer ( uid=None , working_dir: Optional[str] = None , parse: bool = True , filenames: Optional[List[str]] = None ) \u00b6 Bases: idmtools.entities.ianalyzer.IAnalyzer"}, {"title": "idmtools.analysis.platform_analysis_bootstrap module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.platform_analysis_bootstrap.html", "text": "idmtools.analysis.platform_analysis_bootstrap module \u00b6 This script is executed as entrypoint in the docker SSMT worker. Its role is to collect the experiment ids and analyzers and run the analysis."}, {"title": "idmtools.entities package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.html", "text": "idmtools.entities package \u00b6 Subpackages \u00b6 idmtools.entities.iplatform_ops package Submodules idmtools.entities.iplatform_ops.iplatform_asset_collection_operations module idmtools.entities.iplatform_ops.iplatform_experiment_operations module idmtools.entities.iplatform_ops.iplatform_simulation_operations module idmtools.entities.iplatform_ops.iplatform_suite_operations module idmtools.entities.iplatform_ops.iplatform_workflowitem_operations module idmtools.entities.iplatform_ops.utils module Module contents Submodules \u00b6 idmtools.entities.command_line module idmtools.entities.command_task module idmtools.entities.experiment module idmtools.entities.generic_workitem module idmtools.entities.ianalyzer module idmtools.entities.iplatform module idmtools.entities.itask module idmtools.entities.iworkflow_item module idmtools.entities.platform_requirements module idmtools.entities.relation_type module idmtools.entities.simulation module idmtools.entities.suite module idmtools.entities.task_proxy module idmtools.entities.templated_simulation module Module contents \u00b6"}, {"title": "idmtools.core.docker_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.docker_task.html", "text": "idmtools.core.docker_task module \u00b6 class idmtools.core.docker_task. DockerTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, image_name: str = None, build: bool = False, build_path: Union[str, NoneType] = None, Dockerfile: Union[str, NoneType] = None, pull_before_build: bool = True, use_nvidia_run: bool = False, _DockerTask__image_built: bool = False ) \u00b6 Bases: idmtools.entities.itask.ITask image_name : str = None \u00b6 build : bool = False \u00b6 build_path : Optional[str] = None \u00b6 Dockerfile : Optional[str] = None \u00b6 pull_before_build : bool = True \u00b6 use_nvidia_run : bool = False \u00b6 gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather common(experiment-level) assets from task Returns AssetCollection containing all the common assets gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather transient(simulation-level) assets from task Returns AssetCollection build_image ( spinner=None , **extra_build_args ) \u00b6 reload_from_simulation ( simulation: Simulation ) \u00b6 Optional hook that is called when loading simulations from a platform class idmtools.core.docker_task. DockerTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools.core.docker_task.DockerTask \u00b6 Get instance of DockerTask with configuration provided Parameters configuration \u2013 configuration for DockerTask Returns DockerTask with configuration get_description ( ) \u2192 str \u00b6 Get description of plugin Returns Plugin description get_type ( ) \u2192 Type[idmtools.core.docker_task.DockerTask] \u00b6 Get type of task provided by plugin Returns DockerTask"}, {"title": "idmtools_platform_comps.comps_operations package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.html", "text": "idmtools_platform_comps.comps_operations package \u00b6 Submodules \u00b6 idmtools_platform_comps.comps_operations.asset_collection_operations module idmtools_platform_comps.comps_operations.experiment_operations module idmtools_platform_comps.comps_operations.simulation_operations module idmtools_platform_comps.comps_operations.suite_operations module idmtools_platform_comps.comps_operations.workflow_item_operations module Module contents \u00b6"}, {"title": "idmtools.entities.itask module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.itask.html", "text": "idmtools.entities.itask module \u00b6 class idmtools.entities.itask. ITask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory> ) \u00b6 Bases: object command : Union[str, idmtools.entities.command_line.CommandLine] = None \u00b6 The Command to run platform_requirements : Set[PlatformRequirements] = None \u00b6 common_assets : AssetCollection = None \u00b6 Common(Experiment-level) assets transient_assets : AssetCollection = None \u00b6 Transient(Simulation-level) assets add_pre_creation_hook ( hook: Callable[[Union[Simulation, IWorkflowItem]], NoReturn] ) \u00b6 Called before a simulation is created on a platform. Each hook receives either a Simulation or WorkflowTask Parameters hook \u2013 Function to call on event Returns None add_post_creation_hook ( hook: Callable[[Union[Simulation, IWorkflowItem]], NoReturn] ) \u00b6 Called after a simulation has been created on a platform. Each hook receives either a Simulation or WorkflowTask Parameters hook \u2013 Function to call on event Returns: add_platform_requirement ( requirement: Union[idmtools.entities.platform_requirements.PlatformRequirements, str] ) \u2192 NoReturn \u00b6 Adds a platform requirements to a task :param requirement: Requirement to add task Returns None pre_creation ( parent: Union[Simulation, IWorkflowItem] ) \u00b6 Optional Hook called at the time of creation of task. Can be used to setup simulation and experiment level hooks :param parent: Returns: post_creation ( parent: Union[Simulation, IWorkflowItem] ) \u00b6 Optional Hook called at the after creation task. Can be used to setup simulation and experiment level hooks :param parent: Returns: abstract gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Function called at runtime to gather all assets in the collection. abstract gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Function called at runtime to gather all assets in the collection gather_all_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 copy_simulation ( base_simulation: Simulation ) \u2192 Simulation \u00b6 Called when copying a simulation for batching. Override you your task has specific concerns when copying simulations. reload_from_simulation ( simulation: Simulation ) \u00b6 Optional hook that is called when loading simulations from a platform to_simulation ( ) \u00b6 pre_getstate ( ) \u00b6 Return default values for pickle_ignore_fields() . Call before pickling. post_setstate ( ) \u00b6 property pickle_ignore_fields \u00b6 to_dict ( ) \u2192 Dict \u00b6"}, {"title": "idmtools.registry.plugin_specification module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.plugin_specification.html", "text": "idmtools.registry.plugin_specification module \u00b6 class idmtools.registry.plugin_specification. ProjectTemplate ( name: str, url: Union[str, List[str]], description: str = None, info: str = None ) \u00b6 Bases: object name : str = None \u00b6 url : Union[str, List[str]] = None \u00b6 description : str = None \u00b6 info : str = None \u00b6 static read_templates_from_json_stream ( s ) \u2192 List[idmtools.registry.plugin_specification.ProjectTemplate] \u00b6 Read Project Template from stream Parameters s \u2013 Stream where json data resides Returns: class idmtools.registry.plugin_specification. PluginSpecification \u00b6 Bases: object Base class for all plugins. classmethod get_name ( strip_all: bool = True ) \u2192 str \u00b6 Get the name of the plugin. Although it can be overridden, the best practice is to use the class name as the plugin name. Returns The name of the plugin as a string. get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get_project_templates ( ) \u2192 List[idmtools.registry.plugin_specification.ProjectTemplate] \u00b6 Returns a list of project templates related to the a plugin Returns: get_example_urls ( ) \u2192 List[str] \u00b6 Returns a list of URLs that a series of Examples for plugin can be downloaded from Returns List of urls get_help_urls ( ) \u2192 Dict[str, str] \u00b6 Returns a dictionary of topics and links to help Returns: static get_version_url ( version: str , extra: str = None , repo_base_url: str = 'https://github.com/InstituteforDiseaseModeling/idmtools/tree/' , nightly_branch: str = 'dev' ) \u00b6 Build a url using version Here we assume the tag will exist for that specific version :param version: Version to look up. If it contains nightly, we default to nightly_branch :param extra: Extra parts of url pass base :param repo_base_url: Optional url :param nightly_branch: default to dev Returns URL for item"}, {"title": "Introduction to analyzers \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers.html", "text": "Introduction to analyzers \u00b6 The analyzers and examples in IDM-Tools provide support for the MapReduce framework, where you can process large data sets in parallel, typically on a high-performance computing (HPC) cluster. The MapReduce framework includes two primary phases, Map and Reduce. Map takes input data, as key:value pairs, and creates an intermediate set of key:value pairs. Reduce takes the intermediate set of key:value pairs and transforms the data (typically reducing it) as output containing a final set of key:value pairs. An example of this process with IDM-Tools is to use the simulation output data as the input data (key:value pairs), filter and sort a subset of the data to focus on, and then combine and reduce the data to create the final output data. The analyzers included with IDM-Tools help facilitate this process. For example, if you would like to focus on specific data points from all simulations in one or more experiments then you can do this using analyzers with IDM-Tools and plot the final output. Example analyzers are inlucded with IDM-Tools to help you get started. For more information, see Example analyzers . You can also create custom analyzers to meet your individual analysis needs. For more information, see Create an analyzer . Integration with Server-Side Modeling Tools (SSMT) increases the performance of running analyzers. You may find this useful when running multiple analyzers across multiple experiments. Example analyzers Force working directory Partial analysis Analysis on only succeeded simulations Analysis on both succeeded and failed simulations Create an analyzer Convert analyzers from DTK-Tools to IDM-Tools DTK-Tools example analyzer DTK-Tools converted to IDM-Tools Using analyzers with SSMT"}, {"title": "idmtools.config package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.config.html", "text": "idmtools.config package \u00b6 Submodules \u00b6 idmtools.config.idm_config_parser module Module contents \u00b6"}, {"title": "idmtools_platform_comps.ssmt_operations package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_operations.html", "text": "idmtools_platform_comps.ssmt_operations package \u00b6 Submodules \u00b6 idmtools_platform_comps.ssmt_operations.simulation_operations module idmtools_platform_comps.ssmt_operations.workflow_item_operations module Module contents \u00b6"}, {"title": "idmtools_platform_comps.utils.general module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.general.html", "text": "idmtools_platform_comps.utils.general module \u00b6 idmtools_platform_comps.utils.general. fatal_code ( e: Exception ) \u2192 bool \u00b6 Uses to determine if we should stop retrying based on request status code Parameters e \u2013 Exeception to check Returns True is exception is a request and status code matches 404 idmtools_platform_comps.utils.general. convert_comps_status ( comps_status: COMPS.Data.Simulation.SimulationState ) \u2192 idmtools.core.enums.EntityStatus \u00b6 Convert status from COMPS to IDMTools Parameters comps_status \u2013 Status in Comps Returns EntityStatus idmtools_platform_comps.utils.general. convert_comps_workitem_status ( comps_status: COMPS.Data.WorkItem.WorkItemState ) \u2192 idmtools.core.enums.EntityStatus \u00b6 Convert status from COMPS to IDMTools Created = 0 # WorkItem has been saved to the database CommissionRequested = 5 # WorkItem is ready to be processed by the next available worker of the correct type Commissioned = 10 # WorkItem has been commissioned to a worker of the correct type and is beginning execution Validating = 30 # WorkItem is being validated Running = 40 # WorkItem is currently running Waiting = 50 # WorkItem is waiting for dependent items to complete ResumeRequested = 60 # Dependent items have completed and WorkItem is ready to be processed by the next available worker of the correct type CancelRequested = 80 # WorkItem cancellation was requested Canceled = 90 # WorkItem was successfully canceled Resumed = 100 # WorkItem has been claimed by a worker of the correct type and is resuming Canceling = 120 # WorkItem is in the process of being canceled by the worker Succeeded = 130 # WorkItem completed successfully Failed = 140 # WorkItem failed :param comps_status: Status in Comps Returns EntityStatus idmtools_platform_comps.utils.general. clean_experiment_name ( experiment_name: str ) \u2192 str \u00b6 Enforce any COMPS-specific demands on experiment names. :param experiment_name: name of the experiment Returns:the experiment name allowed for use idmtools_platform_comps.utils.general. get_file_from_collection ( platform: idmtools.entities.iplatform.IPlatform , collection_id: uuid.UUID , file_path: str ) \u2192 bytearray \u00b6 Retrieve a file from an asset collection Parameters platform \u2013 Platform object to use collection_id \u2013 Asset Collection ID file_path \u2013 Path within collection Returns Object Byte Array idmtools_platform_comps.utils.general. get_file_as_generator ( file: Union[COMPS.Data.SimulationFile.SimulationFile, COMPS.Data.AssetCollectionFile.AssetCollectionFile, COMPS.Data.AssetFile.AssetFile, COMPS.Data.WorkItemFile.WorkItemFile], chunk_size: int = 128, resume_byte_pos: Optional[int] = None ) \u2192 Generator[bytearray, None, None] \u00b6 Get file as a generator Parameters file \u2013 File to stream contents through a generator chunk_size \u2013 Size of chunks to load resume_byte_pos \u2013 Optional start of download Returns: idmtools_platform_comps.utils.general. get_asset_for_comps_item ( platform: idmtools.entities.iplatform.IPlatform, item: idmtools.core.interfaces.ientity.IEntity, files: List[str], cache=None ) \u2192 Dict[str, bytearray] \u00b6 Retrieve assets from an Entity(Simulation, Experiment, WorkItem) Parameters platform \u2013 Platform Object to use item \u2013 Item to fetch assets from files \u2013 List of file names to retrieve cache \u2013 Cache object to use Returns Dictionary in structure of filename -> bytearray"}, {"title": "Architecture and packages reference \u2014 IDM-Tools  documentation", "tags": "", "url": "./reference.html", "text": "Architecture and packages reference \u00b6 IDM-Tools is built in Python and includes an architecture designed for ease of use, flexibility, and extensibility. You can quickly get up and running and see the capabilities of IDM-Tools by using one of the many included example Python scripts demonstrating the functionality of the packages. IDM-Tools is built in a modular fashion, as seen in the diagrams below. IDM-Tools design includes multiple packages and APIs, providing both the flexibility to only include the necessary packages for your modeling needs and the extensibility by using the APIs for any needed customization. Packages overview \u00b6 Packages and APIs \u00b6 The following diagrams help illustrate the primary packages and associated APIs available for modeling and development with IDM-Tools: Core and job orchestration \u00b6 Local platform \u00b6 COMPS platform \u00b6 Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org . Models \u00b6 API class specifications \u00b6 EMOD \u00b6 EMOD support with IDM-Tools is provided with the emodpy package, which leverages IDM-Tools plugin architecture: idmtools idmtools package idmtools_models idmtools_models package idmtools_platform_comps idmtools_platform_comps package idmtools_platform_local idmtools_platform_local package"}, {"title": "idmtools.analysis package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.html", "text": "idmtools.analysis package \u00b6 Submodules \u00b6 idmtools.analysis.add_analyzer module idmtools.analysis.analyze_manager module idmtools.analysis.csv_analyzer module idmtools.analysis.download_analyzer module idmtools.analysis.map_worker_entry module idmtools.analysis.platform_analysis_bootstrap module idmtools.analysis.platform_anaylsis module idmtools.analysis.tags_analyzer module Module contents \u00b6"}, {"title": "Platforms \u2014 IDM-Tools  documentation", "tags": "", "url": "./platforms.html", "text": "Platforms \u00b6 IDM-Tools currently supports running on the following platforms: COMPS : COmputational Modeling Platform Service (COMPS) is a high performance computing cluster used by employees and collaborators at IDM. To support running simulations and analysis on COMPS, IDM-Tools includes the following modules: idmtools_platform_comps . Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org . Local : You can also run simulations and analysis locally on your computer, rather than on a remote high-performance computer (HPC). For more information about these modules, see idmtools_platform_local . You can use the idmtools.ini file to configure platform specific settings, as the following examples shows for COMPS: [COMPS2] type = COMPS endpoint = https://comps2.idmod.org environment = Bayesian priority = Lowest simulation_root = $COMPS_PATH(USER)\\output node_group = emod_abcd num_retires = 0 num_cores = 1 max_workers = 16 batch_size = 10 exclusive = False Within your code you use the Platform class to specify which platform IDM-Tools will use. For example, the following excerpt sets platform to use COMPS: platform = Platform ( 'COMPS2' ) You use the Platform class whether you\u2019re building or running an experiment, or running analysis on output from simulations. For additional information about configuring idmtools.ini, see\u2026 Creation of a platform plugin \u00b6 Adding fields to the config CLI \u00b6 If you are developing a new platform plugin, you will need to add some metadata to the Platform class\u2019 fields. All fields with a help key in the metadata will be picked up by the idmtools config block command line and allow a user to set a value. help should contain the help text that will be displayed. A choices key can optionally be present to restrict the available choices. For example, for the given platform: @dataclass ( repr = False ) class MyNewPlatform ( IPlatform , CacheEnabled ): field1 : int = field ( default = 1 , metadata = { \"help\" : \"This is the first field\" }) internal_field : imt = field ( default = 2 ) field2 : str = field ( default = \"a\" , metadata = { \"help\" : \"this is the second field\" , \"choices\" : [ \"a\" , \"b\" , \"c\" ]}) The CLI wizard will pick up field1 and field2 and ask the user to provide values. The type of the field will be enforced and for field2 , the user will have to select among the choices . Modify fields metadata at runtime \u00b6 Now, what happens if we want to change the help text, choices, or default value of a field based on a previously set field. For example, let\u2019s consider an example platform where the user needs to specify an endpoint. This endpoint needs to be used to retrieve a list of environments and we want the user to choose select one of them. @dataclass ( repr = False ) class MyNewPlatform ( IPlatform , CacheEnabled ): endpoint : str = field ( default = \"https://myapi.com\" , metadata = { \"help\" : \"Enter the URL of the endpoint\" }) environment : str = field ( metadata = { \"help\" : \"Select an environment \" }) The list of environments is dependent on the endpoint value. To achieve this, we need to provide a callback function to the metadata. This function will receive all the previously set user parameters, and will have the opportunity to modify the current field\u2019s choices , default , and help parameters. Let\u2019s create a function querying the endpoint to get the list of environments and setting them as choices. Selecting the first one as default. def environment_list ( previous_settings : Dict , current_field : Field ) -> Dict : \"\"\" Allows the CLI to provide a list of available environments. Uses the previous_settings to get the endpoint to query for environments Args: previous_settings: previous settings set by the user in the CLI. current_field: Current field specs Returns: updates to the choices and default \"\"\" # Retrieve the endpoint set by the user # The key of the previous_settings is the name of the field we want the value of endpoint = previous_settings [ \"endpoint\" ] # Query the API for environments client . connect ( endpoint ) environments = client . get_all_environments () # If the current field doesnt have a set default already, set one by using the first environment # If the field in the platform class has a default, consider it first if current_field . default not in environments : default_env = environment_choices [ 0 ] else : default_env = current_field . default # Return a dictionary that will be applied to the current field # Setting the new choices and default at runtime return { \"choices\" : environment_choices , \"default\" : default_env } We can then use this function on the field, and the user will be prompted with the correct list of available environments. @dataclass ( repr = False ) class MyNewPlatform ( IPlatform , CacheEnabled ): endpoint : str = field ( default = \"https://myapi.com\" , metadata = { \"help\" : \"Enter the URL of the endpoint\" }) environment : str = field ( metadata = { \"help\" : \"Select an environment \" , \"callback\" : environment_list }) Fields validation \u00b6 By default the CLI will provide validation on type. For example an int field, will only accept an integer value. To fine tune this validation, we can leverage the validation key of the metadata. For example, if you want to create a field that has an integer value between 1 and 10, you can pass a validation function as shown: def validate_number ( value ): if 1 <= value <= 10 : return True , '' return False , \"The value needs to be bewtween 1 and 10\" @dataclass ( repr = False ) class MyNewPlatform ( IPlatform , CacheEnabled ): custom_validation : int = field ( default = 1 , metadata = { \"help\" : \"Enter a number between 1 and 10\" , \"validation\" : validate_number }) The validation function will receive the user input as value and is expected to return a bool representing the result of the validation ( True if the value is correct, False if not) and a string to give an error message to the user. We can leverage the Python partials and make the validation function more generic to use in multiple fields: from functools import partial def validate_range ( value , min , max ): if min <= value <= max : return True , '' return False , f \"The value needs to be between { min } and { max } \" @dataclass ( repr = False ) class MyNewPlatform ( IPlatform , CacheEnabled ): custom_validation : int = field ( default = 1 , metadata = { \"help\" : \"Enter a number between 1 and 10\" , \"validation\" : partial ( validate_range , min = 1 , max = 10 )}) custom_validation2 : int = field ( default = 100 , metadata = { \"help\" : \"Enter a number between 100 and 500\" , \"validation\" : partial ( validate_range , min = 100 , max = 500 )})"}, {"title": "idmtools_platform_comps.cli.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.cli.utils.html", "text": "idmtools_platform_comps.cli.utils module \u00b6"}, {"title": "idmtools.utils.file_parser module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.file_parser.html", "text": "idmtools.utils.file_parser module \u00b6 class idmtools.utils.file_parser. FileParser \u00b6 Bases: object classmethod parse ( filename , content=None ) \u00b6 classmethod load_json_file ( filename , content ) \u00b6 classmethod load_raw_file ( filename , content ) \u00b6 classmethod load_csv_file ( filename , content ) \u00b6 classmethod load_xlsx_file ( filename , content ) \u00b6 classmethod load_txt_file ( filename , content ) \u00b6 classmethod load_bin_file ( filename , content ) \u00b6"}, {"title": "idmtools.registry.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.utils.html", "text": "idmtools.registry.utils module \u00b6 idmtools.registry.utils. is_a_plugin_of_type ( value, plugin_specification: Type[idmtools.registry.plugin_specification.PluginSpecification] ) \u2192 bool \u00b6 Determine if a value of a plugin specification is of type PluginSpecification . Parameters value \u2013 The value to inspect. plugin_specification \u2013 Plugin specification to check against. Returns A Boolean indicating True if the plugin is of a subclass of PluginSpecification , else False. idmtools.registry.utils. load_plugin_map ( entrypoint: str, spec_type: Type[idmtools.registry.plugin_specification.PluginSpecification], strip_all: bool = True ) \u2192 Dict[str, Type[idmtools.registry.plugin_specification.PluginSpecification]] \u00b6 Load plugins from entry point with the indicated type of specification into a map. Warning This could cause name collisions if plugins of the same name are installed. Parameters entrypoint \u2013 The name of the entry point. spec_type \u2013 The type of plugin specification. strip_all \u2013 Pass through for get_name from Plugins. Changes names in plugin registries Returns Returns a dictionary of name and PluginSpecification . Return type (Dict[str, Type[ PluginSpecification ]]) idmtools.registry.utils. plugins_loader ( entry_points_name: str, plugin_specification: Type[idmtools.registry.plugin_specification.PluginSpecification] ) \u2192 Set[idmtools.registry.plugin_specification.PluginSpecification] \u00b6 Loads all the plugins of type PluginSpecification from entry point name. IDM-Tools also supports loading plugins through a list of strings representing the paths to modules containing plugins. Parameters entry_points_name \u2013 Entry point name for plugins. plugin_specification \u2013 Plugin specification to load. Returns All the plugins of the type indicated. Return type (Set[ PluginSpecification ]) idmtools.registry.utils. discover_plugins_from \u00b6 Search a library object for plugins of type PluginSpecification . Currently it detects module and classes. In the future support for strings will be added. Parameters library \u2013 Library object to discover plugins from. plugin_specification \u2013 Specification to search for. Returns List of plugins. Return type List[Type[ PluginSpecification ]]"}, {"title": "idmtools.entities.platform_requirements module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.platform_requirements.html", "text": "idmtools.entities.platform_requirements module \u00b6 class idmtools.entities.platform_requirements. PlatformRequirements \u00b6 Bases: enum.Enum Defines possible requirements a task could need from a platform SHELL = 'shell' \u00b6 NativeBinary = 'NativeBinary' \u00b6 LINUX = 'Linux' \u00b6 WINDOWS = 'windows' \u00b6 GPU = 'gpu' \u00b6 PYTHON = 'python' \u00b6 DOCKER = 'docker' \u00b6 SINGULARITY = 'singularity' \u00b6"}, {"title": "idmtools_platform_local.internals.ui.config module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.config.html", "text": "idmtools_platform_local.internals.ui.config module \u00b6 idmtools_platform_local.internals.ui.config. start_db ( db=None ) \u00b6"}, {"title": "Force working directory \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-forcedir.html", "text": "Force working directory \u00b6 You can force analyzers to use a specific working directory other than the default, which is the directory from which the analyzer is run. For example, if you install IDM-Tools to the \\idmtools directory and then run one of the example analyzers from their default directory, \\examples\\analyzers , then the default working directory would be \\idmtools\\examples\\analyzers . To force a working directory, you use the force_manager_working_directory parameter from the AnalyzeManager class. The following python code, using the DownloadAnalyzer as an example , illustrates different ways on how to use and configure the force_manager_working_directory parameter and how it works and interacts with the working_dir parameter: from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.download_analyzer import DownloadAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : platform = Platform ( 'COMPS2' ) filenames = [ 'StdOut.txt' ] experiment_id = '11052582-83da-e911-a2be-f0921c167861' # comps2 staging exp id # force_manager_working_directory = False (default value): # Analyzers will use their own specified working_dir if available. If not, the AnalyzeManager # specified working_dir will be used (default: '.'). # # force_manager_working_directory = True # Analyzers will use the AnalyzeManager specified working_dir (default: '.') # Examples # This will use the default working_dir for both analyzers (the current run directory, '.') analyzers = [ DownloadAnalyzer ( filenames = filenames , output_path = 'DL1' ), DownloadAnalyzer ( filenames = filenames , output_path = 'DL2' )] manager = AnalyzeManager ( platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () # This will use the manager-specified working_dir for both analyzers analyzers = [ DownloadAnalyzer ( filenames = filenames , output_path = 'DL1' ), DownloadAnalyzer ( filenames = filenames , output_path = 'DL2' )] manager = AnalyzeManager ( platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers , working_dir = 'use_this_working_dir_for_both_analyzers' ) manager . analyze () # This will use the analyzer-specified working_dir for DL1 and the manager-specified dir for DL2 analyzers = [ DownloadAnalyzer ( filenames = filenames , output_path = 'Dl1' , working_dir = 'DL1_working_dir' ), DownloadAnalyzer ( filenames = filenames , output_path = 'DL2' )] manager = AnalyzeManager ( platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers , working_dir = 'use_this_working_dir_if_not_set_by_analyzer' ) manager . analyze () # This will use the manager-specified dir for both DL1 and DL2, even though DL1 tried to set its own analyzers = [ DownloadAnalyzer ( filenames = filenames , output_path = 'DL1' , working_dir = 'DL1_working_dir' ), DownloadAnalyzer ( filenames = filenames , output_path = 'DL2' )] manager = AnalyzeManager ( platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers , working_dir = 'use_this_working_dir_if_not_set_by_analyzer' , force_manager_working_directory = True ) manager . analyze ()"}, {"title": "idmtools.services.ipersistance_service module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.services.ipersistance_service.html", "text": "idmtools.services.ipersistance_service module \u00b6 class idmtools.services.ipersistance_service. IPersistenceService \u00b6 Bases: object cache_directory = '/home/runner/work/idmtools/idmtools/idmtools/idmtools_core/idmtools/services/data' \u00b6 cache_name = None \u00b6 classmethod retrieve ( uid ) \u00b6 classmethod save ( obj ) \u00b6 classmethod delete ( uid ) \u00b6 classmethod clear ( ) \u00b6 classmethod list ( ) \u00b6 classmethod length ( ) \u00b6"}, {"title": "idmtools_platform_local.cli.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.cli.utils.html", "text": "idmtools_platform_local.cli.utils module \u00b6 idmtools_platform_local.cli.utils. get_service_info ( service_manger: idmtools_platform_local.infrastructure.service_manager.DockerServiceManager , diff: bool , logs: bool ) \u2192 str \u00b6 idmtools_platform_local.cli.utils. colorize_status ( status: idmtools_platform_local.status.Status ) \u2192 str \u00b6 Colorizes a status for the console :param status: Status to colorize :type status: Status Returns Unicode colorized string of the status Return type str idmtools_platform_local.cli.utils. parent_status_to_progress ( status: Dict[idmtools_platform_local.status.Status, int], width: int = 12 ) \u2192 str \u00b6 Convert a status object into a colorized progress bar for the console Parameters status ( Dict [ Status , int ] ) \u2013 Status dictionary. The dictionary should Status values for keys and the values should be the total number of simulations in the specific status. An example would be {Status.done: 30, Status.created: 1} width ( int ) \u2013 The desired width of the progress bar Returns Progress bar of the status Return type str idmtools_platform_local.cli.utils. urlize_data_path ( path: str ) \u2192 str \u00b6 URL-ize a data-path so it can be made click-able in the console(if the console supports it) :param path: path to urilze :type path: str Returns Path as URL. Return type str"}, {"title": "Plot data \u2014 IDM-Tools  documentation", "tags": "", "url": "./plots.html", "text": "Plot data \u00b6 You can use IDM-Tools to plot the output results of the analysis of simulations and experiments. You must include a plotting library within your script. For example, with Python a common plotting library is matplotlib ( https://matplotlib.org/ ). The following shows how to add matplotlib to a reduce method for plotting the output results of a population analyzer: def reduce ( self , all_data : dict ) -> Any : output_dir = os . path . join ( self . working_dir , \"output\" ) with open ( os . path . join ( output_dir , \"population.json\" ), \"w\" ) as fp : json . dump ({ str ( s . uid ): v for s , v in all_data . items ()}, fp ) import matplotlib.pyplot as plt fig = plt . figure () ax = fig . add_subplot () for pop in list ( all_data . values ()): ax . plot ( pop ) ax . legend ([ str ( s . uid ) for s in all_data . keys ()]) fig . savefig ( os . path . join ( output_dir , \"population.png\" )) The reduce method uses the output from the map method, which is InsetChart.json , as the input for plotting the results of the Statistical Population channel: filenames = [ 'output/InsetChart.json' ] def map ( self , data : Any , item : IItem ) -> Any : return data [ self . filenames [ 0 ]][ \"Channels\" ][ \"Statistical Population\" ][ \"Data\" ] The final results are plotted and saved to the file, population.png:"}, {"title": "Convert analyzers from DTK-Tools to IDM-Tools \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-convert.html", "text": "Convert analyzers from DTK-Tools to IDM-Tools \u00b6 Although the use of analyzers in DTK-Tools and IDM-Tools is very similar, being aware of some of the differences may be helpful with the conversion process. For example some of the class and method names are different, as seen in the following diagram: For additional information about the IAnalyzer class and methods, see IAnalyzer . In addition, you can also see an example of a .csv analyzer created in DTK-Tools and how it was converted to IDM-Tools. Other than the class name and some method names changing the core code is almost the same. The primary differences can be seen in the class import statements and the execution of the analysis within the if __name__ == \u2018__main__\u2019: block of code. DTK-Tools example analyzer DTK-Tools converted to IDM-Tools"}, {"title": "idmtools.core.task_factory module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.task_factory.html", "text": "idmtools.core.task_factory module \u00b6 class idmtools.core.task_factory. DynamicTaskSpecification ( task_type: Type[idmtools.entities.itask.ITask], description: str = '' ) \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification This class allows users to quickly define a spec for special tasks get ( configuration: dict ) \u2192 idmtools.entities.itask.ITask \u00b6 Return a new model using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new model. get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get_type ( ) \u2192 Type[idmtools.entities.itask.ITask] \u00b6 class idmtools.core.task_factory. TaskFactory \u00b6 Bases: object DEFAULT_KEY = 'idmtools.entities.command_task.CommandTask' \u00b6 register ( spec: idmtools.registry.task_specification.TaskSpecification ) \u2192 NoReturn \u00b6 Register a TaskSpecification dynamically Parameters spec \u2013 Specification to register Returns: register_task ( task: Type[idmtools.entities.itask.ITask] ) \u2192 NoReturn \u00b6 Dynamically register a class using the DynamicTaskSpecification Parameters task \u2013 Task to register Returns: create ( key , fallback=None , **kwargs ) \u2192 idmtools.entities.itask.ITask \u00b6"}, {"title": "idmtools_platform_local.platform_operations.simulation_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.platform_operations.simulation_operations.html", "text": "idmtools_platform_local.platform_operations.simulation_operations module \u00b6 class idmtools_platform_local.platform_operations.simulation_operations. LocalPlatformSimulationOperations ( platform: 'LocalPlatform' , platform_type: type = <class 'idmtools_platform_local.platform_operations.uitils.SimulationDict'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations platform : 'LocalPlatform' = None \u00b6 platform_type \u00b6 alias of idmtools_platform_local.platform_operations.uitils.SimulationDict get ( simulation_id: uuid.UUID , **kwargs ) \u2192 Dict \u00b6 Fetch simulation with specified id :param simulation_id: simulation id :param **kwargs: Returns SimulationDIct platform_create ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 Dict \u00b6 Create a simulation object Parameters simulation \u2013 Simulation to create **kwargs \u2013 Returns Simulation dict and created id batch_create ( sims: List[idmtools.entities.simulation.Simulation], **kwargs ) \u2192 List[idmtools_platform_local.platform_operations.uitils.SimulationDict] \u00b6 Batch creation of simulations. This is optimized by bulk uploading assets after creating of all the assets Parameters sims \u2013 List of sims to create **kwargs \u2013 Returns List of SimulationDict object and their IDs get_parent ( simulation: idmtools_platform_local.platform_operations.uitils.SimulationDict , **kwargs ) \u2192 idmtools_platform_local.platform_operations.uitils.ExperimentDict \u00b6 Get the parent of a simulation, aka its experiment Parameters simulation \u2013 Simulation to get parent from **kwargs \u2013 Returns ExperimentDict object platform_run_item ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 On the local platform, simulations are ran by queue and commissioned through create :param simulation: Returns: send_assets ( simulation: idmtools.entities.simulation.Simulation , worker: docker.models.containers.Container = None , **kwargs ) \u00b6 Transfer assets to local sim folder for simulation Parameters simulation \u2013 Simulation object worker \u2013 docker worker containers. Useful in batches Returns: refresh_status ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Refresh status of a sim Parameters simulation \u2013 Returns: get_assets ( simulation: idmtools.entities.simulation.Simulation, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Get assets for a specific simulation Parameters simulation \u2013 Simulation object to fetch files for files \u2013 List of files to fetch Returns Returns a dict containing mapping of filename->bytearry list_assets ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List assets for a sim Parameters simulation \u2013 Simulation object Returns: to_entity ( local_sim: Dict , load_task: bool = False , parent: Optional[idmtools.entities.experiment.Experiment] = None , **kwargs ) \u2192 idmtools.entities.simulation.Simulation \u00b6 Convert a sim dict object to an ISimulation Parameters local_sim \u2013 simulation to convert load_task \u2013 Load Task Object as well. Can take much longer and have more data on platform parent \u2013 optional experiment object **kwargs \u2013 Returns ISimulation object"}, {"title": "idmtools_platform_comps.comps_operations.asset_collection_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.asset_collection_operations.html", "text": "idmtools_platform_comps.comps_operations.asset_collection_operations module \u00b6 class idmtools_platform_comps.comps_operations.asset_collection_operations. CompsPlatformAssetCollectionOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.AssetCollection.AssetCollection'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations platform : 'COMPSPlatform' = None \u00b6 platform_type \u00b6 alias of COMPS.Data.AssetCollection.AssetCollection get ( asset_collection_id: uuid.UUID , load_children: Optional[List[str]] = None , query_criteria: Optional[COMPS.Data.QueryCriteria.QueryCriteria] = None , **kwargs ) \u2192 COMPS.Data.AssetCollection.AssetCollection \u00b6 Get an asset collection by id Parameters asset_collection_id \u2013 Id of asset collection load_children \u2013 Optional list of children to load. Defaults to assets and tags query_criteria \u2013 Optional query_criteria. Ignores children default **kwargs \u2013 Returns COMPSAssetCollection platform_create ( asset_collection: idmtools.assets.asset_collection.AssetCollection , **kwargs ) \u2192 COMPS.Data.AssetCollection.AssetCollection \u00b6 Create AssetCollection Parameters asset_collection \u2013 AssetCollection to create **kwargs \u2013 Returns COMPSAssetCollection to_entity ( asset_collection: Union[COMPS.Data.AssetCollection.AssetCollection, COMPS.Data.SimulationFile.SimulationFile, List[COMPS.Data.SimulationFile.SimulationFile]], **kwargs ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Convert COMPS Asset Collection or Simulation File to IDM Asset Collection Parameters asset_collection \u2013 Comps asset/asset collection to convert to idm asset collection **kwargs \u2013 Returns AssetCollection"}, {"title": "idmtools.entities.generic_workitem module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.generic_workitem.html", "text": "idmtools.entities.generic_workitem module \u00b6 class idmtools.entities.generic_workitem. GenericWorkItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None ) \u00b6 Bases: idmtools.entities.iworkflow_item.IWorkflowItem Idm GenericWorkItem tags = None \u00b6"}, {"title": "idmtools_platform_local.internals.workers.run module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.run.html", "text": "idmtools_platform_local.internals.workers.run module \u00b6"}, {"title": "idmtools_platform_local \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local_index.html", "text": "idmtools_platform_local \u00b6 idmtools_platform_local package Subpackages idmtools_platform_local.cli package Submodules Module contents idmtools_platform_local.client package Submodules Module contents idmtools_platform_local.infrastructure package Submodules Module contents idmtools_platform_local.internals package Subpackages Module contents idmtools_platform_local.platform_operations package Submodules Module contents Submodules idmtools_platform_local.config module idmtools_platform_local.local_cli module idmtools_platform_local.local_platform module idmtools_platform_local.plugin_info module idmtools_platform_local.status module Module contents"}, {"title": "idmtools_platform_local.plugin_info module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.plugin_info.html", "text": "idmtools_platform_local.plugin_info module \u00b6 class idmtools_platform_local.plugin_info. LocalPlatformSpecification \u00b6 Bases: idmtools.registry.platform_specification.PlatformSpecification get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get ( **configuration ) \u2192 idmtools.entities.iplatform.IPlatform \u00b6 Build our local platform from the passed in configuration object We do our import of platform here to avoid any weir :param configuration: Returns: example_configuration ( ) \u00b6 Example configuration for the platform. This is useful in help or error messages. Returns: get_type ( ) \u2192 Type[LocalPlatform] \u00b6"}, {"title": "idmtools.entities.iplatform_ops.iplatform_suite_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.iplatform_suite_operations.html", "text": "idmtools.entities.iplatform_ops.iplatform_suite_operations module \u00b6 class idmtools.entities.iplatform_ops.iplatform_suite_operations. IPlatformSuiteOperations ( platform: 'IPlatform' , platform_type: Type ) \u00b6 Bases: abc.ABC platform : 'IPlatform' = None \u00b6 platform_type : Type = None \u00b6 abstract get ( suite_id: uuid.UUID , **kwargs ) \u2192 Any \u00b6 Returns the platform representation of an Suite Parameters suite_id \u2013 Item id of Suites **kwargs \u2013 Returns Platform Representation of an suite batch_create ( suites: List[idmtools.entities.suite.Suite], display_progress: bool = True, **kwargs ) \u2192 List[Tuple[Any, uuid.UUID]] \u00b6 Provides a method to batch create suites Parameters display_progress \u2013 Display progress bar suites \u2013 List of suites to create **kwargs \u2013 Returns List of tuples containing the create object and id of item that was created pre_create ( suite: idmtools.entities.suite.Suite , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/suite post creation events Parameters suite \u2013 Experiment to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn post_create ( suite: idmtools.entities.suite.Suite , **kwargs ) \u2192 NoReturn \u00b6 Run the platform/suite post creation events Parameters suite \u2013 Experiment to run post-creation events **kwargs \u2013 Optional arguments mainly for extensibility Returns NoReturn create ( suite: idmtools.entities.suite.Suite , do_pre: bool = True , do_post: bool = True , **kwargs ) \u2192 Tuple[Any, uuid.UUID] \u00b6 Creates an simulation from an IDMTools suite object. Also performs pre-creation and post-creation locally and on platform Parameters suite \u2013 Suite to create do_pre \u2013 Perform Pre creation events for item do_post \u2013 Perform Post creation events for item **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item abstract platform_create ( suite: idmtools.entities.suite.Suite , **kwargs ) \u2192 Tuple[Any, uuid.UUID] \u00b6 Creates an suite from an IDMTools suite object Parameters suite \u2013 Suite to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item pre_run_item ( suite: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Trigger right before commissioning experiment on platform. This ensures that the item is created. It also ensures that the children(simulations) have also been created Parameters suite \u2013 Experiment to commission Returns: post_run_item ( suite: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Trigger right after commissioning suite on platform. Parameters suite \u2013 Experiment just commissioned Returns: run_item ( suite: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Called during commissioning of an item. This should create the remote resource Parameters workflow_item \u2013 Returns: platform_run_item ( suite: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Called during commissioning of an item. This should perform what is needed to commission job on platform Parameters suite \u2013 Returns: abstract get_parent ( suite: Any , **kwargs ) \u2192 Any \u00b6 Returns the parent of item. If the platform doesn\u2019t support parents, you should throw a TopLevelItem error Parameters suite \u2013 **kwargs \u2013 Returns: Raise: TopLevelItem abstract get_children ( suite: Any , **kwargs ) \u2192 List[Any] \u00b6 Returns the children of an suite object Parameters suite \u2013 Suite object **kwargs \u2013 Optional arguments mainly for extensibility Returns Children of suite object to_entity ( suite: Any , **kwargs ) \u2192 idmtools.entities.suite.Suite \u00b6 Converts the platform representation of suite to idmtools representation Parameters suite \u2013 Platform suite object Returns IDMTools suite object abstract refresh_status ( experiment: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Refresh status of suite :param experiment: Returns: get_assets ( suite: idmtools.entities.suite.Suite, files: List[str], **kwargs ) \u2192 Dict[str, Dict[str, Dict[str, bytearray]]] \u00b6 Fetch assets for suite :param suite: suite to get assets for :param files: Files to load :param **kwargs: Returns Nested dictionaries in the structure experiment_id { simulation_id { files = content } } }"}, {"title": "idmtools.ini file \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-config.html", "text": "idmtools.ini file \u00b6 You can use the config command to create a configuration block in your project\u2019s idmtools.ini file. $ idmtools config --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools config [OPTIONS] COMMAND [ARGS]... Contains commands related to the creation of idmtools.ini With the config command, you can : - Generate an idmtools.ini file in the current directory - Add a configuration block Options: --config_path FILE Path to the idmtools.ini file --help Show this message and exit. Commands: block Command to create/replace a block in the selected idmtools.ini... If you do not specify a config path, the command will use the idmtools.ini file in the current directory. To edit a different file, use the --config_path argument to specify its path, such as: idmtools config --config_path C:\\my_project\\idmtools.ini . Use the block command to start the wizard that will guide you through the creation of a configuration block in the selected idmtools.ini , for example: idmtools config block ."}, {"title": "idmtools_platform_local.infrastructure.postgres module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.postgres.html", "text": "idmtools_platform_local.infrastructure.postgres module \u00b6 class idmtools_platform_local.infrastructure.postgres. PostgresContainer ( container_name: str = 'idmtools_postgres' , image: str = 'postgres:11.4' , client: docker.client.DockerClient = None , config_prefix: str = 'postgres_' , network: str = None , host_data_directory: str = None , port: int = 5432 , mem_limit: str = '128m' , mem_reservation: str = '32m' , run_as: str = None , password: str = 'idmtools' , data_volume_name: str = 'idmtools_local_postgres' ) \u00b6 Bases: idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer host_data_directory : str = None \u00b6 port : int = 5432 \u00b6 mem_limit : str = '128m' \u00b6 mem_reservation : str = '32m' \u00b6 run_as : str = None \u00b6 image : str = 'postgres:11.4' \u00b6 container_name : str = 'idmtools_postgres' \u00b6 password : str = 'idmtools' \u00b6 data_volume_name : str = 'idmtools_local_postgres' \u00b6 config_prefix : str = 'postgres_' \u00b6 get_configuration ( ) \u2192 Dict \u00b6 Returns the docker config for the postgres container Returns (dict) Dictionary representing the docker config for the postgres container create ( spinner=None ) \u2192 docker.models.containers.Container \u00b6 create_postgres_volume ( ) \u2192 NoReturn \u00b6 Creates our postgres volume Returns:"}, {"title": "idmtools.assets.asset module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.asset.html", "text": "idmtools.assets.asset module \u00b6 class idmtools.assets.asset. Asset ( absolute_path: Optional[str] = None , relative_path: Optional[str] = <property object> , filename: Optional[str] = None , content: dataclasses.InitVar = <property object> , _length: Optional[int] = None , persisted: bool = False , handler: Callable = <class 'str'> , download_generator_hook: Callable = None , checksum: Optional[str] = <property object> ) \u00b6 Bases: object A class representing an asset. An asset can either be related to a physical asset present on the computer or directly specified by a filename and content. Parameters absolute_path \u2013 The absolute path of the asset. Optional if filename and content are given. relative_path \u2013 The relative path (compared to the simulation root folder). filename \u2013 Name of the file. Optional if absolute_path is given. content \u2013 The content of the file. Optional if absolute_path is given. checksum \u2013 Optional. Useful in systems that allow single upload based on checksums and retrieving from those systems Note: we add this to allow systems who provide asset caching by MD5 opportunity to avoid re-uploading assets absolute_path : Optional[str] = None \u00b6 filename : Optional[str] = None \u00b6 persisted : bool = False \u00b6 handler \u00b6 alias of builtins.str download_generator_hook : Callable = None \u00b6 property checksum \u00b6 Returns None. property extension \u00b6 property relative_path \u00b6 property bytes \u00b6 property length \u00b6 property content \u00b6 Returns The content of the file, either from the content attribute or by opening the absolute path. download_generator ( ) \u2192 Generator[bytearray, None, None] \u00b6 A Download Generator that returns chunks of bytes from the file Returns Generator of bytearray download_stream ( ) \u2192 _io.BytesIO \u00b6 Get a bytes IO stream of the asset Returns BytesIO of the Asset download_to_path ( path: str ) \u00b6 Download an asset to path. This requires loadings the object through the platofrm Parameters path \u2013 Path to write to. If it is a directory, the asset filename will be added to it Returns None"}, {"title": "idmtools_models \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models_index.html", "text": "idmtools_models \u00b6 idmtools_models package Subpackages idmtools_models.python package Submodules Module contents idmtools_models.r package Submodules Module contents Submodules idmtools_models.json_configured_task module idmtools_models.templated_script_task module Module contents"}, {"title": "idmtools_platform_local.internals.data package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.data.html", "text": "idmtools_platform_local.internals.data package \u00b6 Submodules \u00b6 idmtools_platform_local.internals.data.job_status module Module contents \u00b6"}, {"title": "idmtools_platform_local.internals.data.job_status module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.data.job_status.html", "text": "idmtools_platform_local.internals.data.job_status module \u00b6 class idmtools_platform_local.internals.data.job_status. JobStatus ( **kwargs ) \u00b6 Bases: sqlalchemy.ext.declarative.api.Base Generic status table. At moment we only have one which contains both experiments and simulations We do it this way to allow for more flexible support in future for non-emod-ish workflows(ie a bunch of single jobs instead of an experiment with sub simulations uuid \u00b6 parent_uuid \u00b6 status \u00b6 data_path \u00b6 tags \u00b6 extra_details \u00b6 created \u00b6 updated \u00b6 to_dict ( as_experiment=True ) \u00b6"}, {"title": "idmtools_platform_comps.utils package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.html", "text": "idmtools_platform_comps.utils package \u00b6 Subpackages \u00b6 idmtools_platform_comps.utils.python_requirements_ac package Submodules idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection module idmtools_platform_comps.utils.python_requirements_ac.install_requirements module idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection module Module contents Submodules \u00b6 idmtools_platform_comps.utils.disk_usage module idmtools_platform_comps.utils.general module idmtools_platform_comps.utils.lookups module idmtools_platform_comps.utils.package_version module idmtools_platform_comps.utils.python_version module Module contents \u00b6"}, {"title": "idmtools.utils.gitrepo module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.gitrepo.html", "text": "idmtools.utils.gitrepo module \u00b6 class idmtools.utils.gitrepo. GitRepo ( repo_owner: str = None , repo_name: str = None ) \u00b6 Bases: object repo_owner : str = None \u00b6 repo_name : str = None \u00b6 property path \u00b6 property branch \u00b6 property verbose \u00b6 property repo_home_url \u00b6 Construct repo home url Returns: repo home url property repo_example_url \u00b6 Construct repo example url Returns: repo example url property api_example_url \u00b6 Construct api url of the examples for download Returns: api url parse_url ( url: str , branch: str = None , update: bool = True ) \u00b6 Parse url for owner, repo, branch and example path :param url: example url :param branch: user branch to replace the branch in url :param update: True/False - update repo or not Returns: None list_public_repos ( repo_owner: str = None , page: int = 1 , raw: bool = False ) \u00b6 Utility method to retrieve all public repos :param repo_owner: the owner of the repo :param page: pagination of results :param raw: bool - return rwo data or simplified list Returns: repo list list_repo_releases ( repo_owner: str = None , repo_name: str = None , raw: bool = False ) \u00b6 Utility method to retrieve all releases of the repo :param repo_owner: the owner of the repo :param repo_name: the name of repo :param raw: bool - return raw data or simplified list Returns: the release list of the repo download ( path: str = '' , output_dir: str = './' , branch: str = 'master' ) \u2192 int \u00b6 Download files with example url provided :param path: local file path to the repo :param output_dir: user local folder to download files to :param branch: specify branch for files download from Returns: total file count downloaded peep ( path: str = '' , branch: str = 'master' ) \u00b6 Download files with example url provided :param path: local file path to the repo :param branch: specify branch for files download from Returns: None"}, {"title": "idmtools_platform_local.internals.ui.controllers.experiments module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.controllers.experiments.html", "text": "idmtools_platform_local.internals.ui.controllers.experiments module \u00b6 idmtools_platform_local.internals.ui.controllers.experiments. progress_to_status_str ( progress ) \u00b6 idmtools_platform_local.internals.ui.controllers.experiments. handle_backoff_exc ( details ) \u00b6 idmtools_platform_local.internals.ui.controllers.experiments. experiment_filter ( id: Optional[str], tags: Optional[List[Tuple[str, str]]], page: int = 1, per_page: int = 10 ) \u2192 Tuple[Dict, int] \u00b6 List the status of experiment(s) with the ability to filter by experiment id and tags Parameters id ( Optional [ str ] ) \u2013 Optional ID of the experiment you want to filter by tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 Optional list of tuples in form of tag_name tag_value to user to filter experiments with page ( int ) \u2013 Which page to load. Defaults to 1 per_page ( int ) \u2013 Experiments per page. Defaults to 50 class idmtools_platform_local.internals.ui.controllers.experiments. Experiments \u00b6 Bases: flask_restful.Resource get ( id=None ) \u00b6 delete ( id ) \u00b6 endpoint = 'experiments' \u00b6 mediatypes ( ) \u00b6 methods = {'DELETE', 'GET'} \u00b6"}, {"title": "idmtools_platform_comps.comps_operations.workflow_item_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.workflow_item_operations.html", "text": "idmtools_platform_comps.comps_operations.workflow_item_operations module \u00b6 class idmtools_platform_comps.comps_operations.workflow_item_operations. CompsPlatformWorkflowItemOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.WorkItem.WorkItem'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations platform : 'COMPSPlatform' = None \u00b6 platform_type \u00b6 alias of COMPS.Data.WorkItem.WorkItem get ( workflow_item_id: uuid.UUID , columns: Optional[List[str]] = None , load_children: Optional[List[str]] = None , query_criteria: Optional[COMPS.Data.QueryCriteria.QueryCriteria] = None , **kwargs ) \u2192 COMPS.Data.WorkItem.WorkItem \u00b6 Get COMPSWorkItem Parameters workflow_item_id \u2013 Item id columns \u2013 Optional columns to load. Defaults to \u201cid\u201d, \u201cname\u201d, \u201cstate\u201d load_children \u2013 Optional list of COMPS Children objects to load. Defaults to \u201cTags\u201d query_criteria \u2013 Optional QueryCriteria **kwargs \u2013 Returns COMPSWorkItem platform_create ( work_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 Tuple[Any] \u00b6 Creates an workflow_item from an IDMTools work_item object Parameters work_item \u2013 WorkflowItem to create **kwargs \u2013 Optional arguments mainly for extensibility Returns Created platform item and the UUID of said item platform_run_item ( work_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Start to rum COMPS WorkItem created from work_item :param work_item: workflow item Returns: None get_parent ( work_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 Any \u00b6 Returns the parent of item. If the platform doesn\u2019t support parents, you should throw a TopLevelItem error :param work_item: COMPS WorkItem :param **kwargs: Optional arguments mainly for extensibility Returns: item parent Raise: TopLevelItem get_children ( work_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 List[Any] \u00b6 Returns the children of an workflow_item object Parameters work_item \u2013 WorkflowItem object **kwargs \u2013 Optional arguments mainly for extensibility Returns Children of work_item object refresh_status ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Refresh status for workflow item :param work_item: Item to refresh status for Returns None send_assets ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u00b6 Add asset as WorkItemFile :param workflow_item: workflow item Returns: None list_assets ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem , **kwargs ) \u2192 List[str] \u00b6 Get list of asset files :param workflow_item: workflow item :param **kwargs: Optional arguments mainly for extensibility Returns: list of assets associated with WorkItem get_assets ( workflow_item: idmtools.entities.iworkflow_item.IWorkflowItem, files: List[str], **kwargs ) \u2192 Dict[str, bytearray] \u00b6 Retrieve files association with WorkItem :param workflow_item: workflow item :param files: list of file paths :param **kwargs: Optional arguments mainly for extensibility Returns: dict with key/value: file_path/file_content to_entity ( work_item: COMPS.Data.WorkItem.WorkItem , **kwargs ) \u2192 idmtools.entities.iworkflow_item.IWorkflowItem \u00b6 Converts the platform representation of workflow_item to idmtools representation Parameters work_item \u2013 Platform workflow_item object **kwargs \u2013 Optional arguments mainly for extensibility Returns IDMTools workflow item get_related_items ( item: idmtools.entities.iworkflow_item.IWorkflowItem , relation_type: COMPS.Data.WorkItem.RelationType ) \u2192 Dict[str, List[Dict[str, str]]] \u00b6 Get related WorkItems, Suites, Experiments, Simulations and AssetCollections :param item: workflow item :param relation_type: RelationType Returns: Dict"}, {"title": "idmtools_platform_local.internals.ui.controllers.simulations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.controllers.simulations.html", "text": "idmtools_platform_local.internals.ui.controllers.simulations module \u00b6 idmtools_platform_local.internals.ui.controllers.simulations. sim_status ( id: Optional[str], experiment_id: Optional[str], status: Optional[str], tags: Optional[List[Tuple[str, str]]], page: int = 1, per_page: int = 20 ) \u2192 Tuple[Dict, int] \u00b6 List of statuses for simulation(s) with the ability to filter by id, experiment_id, status, and tags Parameters id ( Optional [ str ] ) \u2013 Optional Id of simulation experiment_id ( Optional [ str ] ) \u2013 Optional experiment id status ( Optional [ str ] ) \u2013 Optional status string to filter by tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 Optional list of tuples in form of tag_name tag_value to user to filter experiments with page ( int ) \u2013 Which page to load. Defaults to 1 per_page ( int ) \u2013 Simulations per page. Defaults to 50 Returns None class idmtools_platform_local.internals.ui.controllers.simulations. Simulations \u00b6 Bases: flask_restful.Resource get ( id=None ) \u00b6 put ( id ) \u00b6 endpoint = 'simulations' \u00b6 mediatypes ( ) \u00b6 methods = {'GET', 'PUT'} \u00b6"}, {"title": "idmtools.assets.asset_collection module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.asset_collection.html", "text": "idmtools.assets.asset_collection module \u00b6 class idmtools.assets.asset_collection. AssetCollection ( assets: List[idmtools.assets.asset.Asset] = None , tags: Dict[str , Any] = {} ) \u00b6 Bases: idmtools.core.interfaces.ientity.IEntity A class that represents a collection of assets. Parameters assets \u2013 An optional list of assets to create the collection with. item_type : idmtools.core.enums.ItemType = 5 \u00b6 assets : List[idmtools.assets.asset.Asset] = None \u00b6 classmethod from_directory ( assets_directory: str, recursive: bool = True, flatten: bool = False, filters: Optional[List[Union[Callable[[TAsset], bool], Callable]]] = None, filters_mode: idmtools.core.enums.FilterMode = <FilterMode.OR: 1>, relative_path: str = None ) \u2192 TAssetCollection \u00b6 Fill up an AssetCollection from the specified directory. See assets_from_directory() for arguments. Returns A created AssetCollection object. static assets_from_directory ( assets_directory: str, recursive: bool = True, flatten: bool = False, filters: Optional[List[Union[Callable[[TAsset], bool], Callable]]] = None, filters_mode: idmtools.core.enums.FilterMode = <FilterMode.OR: 1>, forced_relative_path: str = None ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 Create assets for files in a given directory. Parameters assets_directory \u2013 The root directory of the assets. recursive \u2013 True to recursively traverse the subdirectory. flatten \u2013 Put all the files in root regardless of whether they were in a subdirectory or not. filters \u2013 A list of filters to apply to the assets. The filters are functions taking an Asset as argument and returning true or false. True adds the asset to the collection; False filters it out. See asset_filters() . filters_mode \u2013 When given multiple filters, either OR or AND the results. forced_relative_path \u2013 Prefix a relative path to the path created from the root directory. Examples For relative_path , given the following folder structure root/a/1,txt root/b.txt and relative_path=\u201dtest\u201d. Will return assets with relative path: test/a/1,txt and test/b.txt Given the previous example, if flatten is also set to True, the following relative_path will be set: /1.txt and /b.txt Returns A list of assets. add_directory ( assets_directory: str, recursive: bool = True, flatten: bool = False, filters: Optional[List[Union[Callable[[TAsset], bool], Callable]]] = None, filters_mode: idmtools.core.enums.FilterMode = <FilterMode.OR: 1>, relative_path: str = None ) \u00b6 Retrieve assets from the specified directory and add them to the collection. See assets_from_directory() for arguments. add_asset ( asset: Union[idmtools.assets.asset.Asset, str], fail_on_duplicate: bool = True, **kwargs ) \u00b6 Add an asset to the collection. Parameters asset \u2013 A string or an Asset object to add. If a string, the string will be used as the absolute_path and any kwargs will be passed to the Asset constructor fail_on_duplicate \u2013 Raise a DuplicateAssetError if an asset is duplicated. If not, simply replace it. **kwargs \u2013 Arguments to pass to Asset constructor when asset is a string add_assets ( assets: Union[List[TAsset], AssetCollection], fail_on_duplicate: bool = True ) \u00b6 Add assets to a collection Parameters assets \u2013 An list of assets as either list or a collection fail_on_duplicate \u2013 Raise a DuplicateAssetError if an asset is duplicated. If not, simply replace it. Returns: add_or_replace_asset ( asset: idmtools.assets.asset.Asset ) \u00b6 Add or replaces an asset in a collection Parameters asset \u2013 Asset to add or replace Returns None. get_one ( **kwargs ) \u00b6 Get an asset out of the collection based on the filers passed. Examples: >>> a = AssetCollection () >>> a . get_one ( filename = \"filename.txt\" ) Parameters **kwargs \u2013 keyword argument representing the filters. Returns None or Asset if found. delete ( **kwargs ) \u2192 NoReturn \u00b6 Delete an asset based on keywords attributes Parameters **kwargs \u2013 Filter for the asset to delete. pop ( **kwargs ) \u2192 idmtools.assets.asset.Asset \u00b6 Get and delete an asset based on keywords. Parameters **kwargs \u2013 Filter for the asset to pop. extend ( assets: List[idmtools.assets.asset.Asset], fail_on_duplicate: bool = True ) \u2192 NoReturn \u00b6 Extend the collection with new assets :param assets: Which assets to add :param fail_on_duplicate: Fail if duplicated asset is included. clear ( ) \u00b6 set_all_persisted ( ) \u00b6 property count \u00b6 property uid \u00b6 has_asset ( absolute_path: str = None , filename: str = None ) \u2192 bool \u00b6 Search for asset by absolute_path or by filename Parameters absolute_path \u2013 Absolute path of source file filename \u2013 Destination filename Returns True if asset exists, False otherwise find_index_of_asset ( absolute_path: str = None , filename: str = None ) \u2192 Optional[int] \u00b6 Finds the index of asset by path or filename Parameters absolute_path \u2013 Path to search filename \u2013 Filename to search Returns Index number if found. None if not found. pre_creation ( ) \u2192 None \u00b6 Called before the actual creation of the entity. post_creation ( ) \u2192 None \u00b6 Called after the actual creation of the entity. set_tags ( tags: Dict[str, Any] ) \u00b6 add_tags ( tags: Dict[str, Any] ) \u00b6"}, {"title": "Experiments \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-experiments.html", "text": "Experiments \u00b6 You can use the experiment command to get the status of and to delete experiments for the local platform. Local platform must be running to use these commands. To see the list of commands and options for status , type the following at a command prompt. $ idmtools experiment --platform Local status --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools experiment status [OPTIONS] List the status of experiment(s) with the ability to filter by experiment id and tags Some examples: Get the status of simulations for the platform using the local platform defaults, you would run idmtools simulation --platform Local status Another example would be to use a platform defined in a configuration block while also filtering tags where a == 0 idmtools experiment --config-block COMPS2 status --tags a 0 Multiple tags: idmtools experiment --config-block COMPS2 status --tags a 0 --tags a 3 Options: --id TEXT Filter status by experiment ID --tags TEXT... Tag to filter by. This should be in the form name value. For example, if you have a tag type=PythonTask you would use --tags type PythonTask. In addition, you can provide multiple tags, ie --tags a 1 --tags b 2. This will perform an AND based query on the tags meaning only jobs contains ALL the tags specified will be displayed --help Show this message and exit. To see the list of commands and options for delete , type the following at a command prompt. $ idmtools experiment --platform Local delete --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools experiment delete [OPTIONS] EXPERIMENT_ID Delete an experiment, and optionally, its data Options: --data / --no-data Should we delete the data as well? --help Show this message and exit."}, {"title": "idmtools_platform_local.client package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.client.html", "text": "idmtools_platform_local.client package \u00b6 Submodules \u00b6 idmtools_platform_local.client.base module idmtools_platform_local.client.experiments_client module idmtools_platform_local.client.healthcheck_client module idmtools_platform_local.client.simulations_client module Module contents \u00b6"}, {"title": "idmtools_platform_local.client.healthcheck_client module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.client.healthcheck_client.html", "text": "idmtools_platform_local.client.healthcheck_client module \u00b6 class idmtools_platform_local.client.healthcheck_client. HealthcheckClient \u00b6 Bases: idmtools_platform_local.client.base.BaseClient path_url = 'healthcheck' \u00b6 classmethod get_all ( ) \u2192 List[Dict[str, Any]] \u00b6 Get all experiments with options to filter by tags Parameters per_page \u2013 How many experiments to return per page page \u2013 Which page tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 List of tags/values to filter experiment by Returns returns list of experiments Return type List[Dict[str, Any]] classmethod get_one ( ) \u2192 Dict[str, Any] \u00b6 Convenience method to get one experiment Parameters id ( str ) \u2013 ID of the experiment tags ( Optional [ List [ Tuple [ str , str ] ] ] ) \u2013 List of tags/values to filter experiment by Returns Dictionary containing the experiment objects Return type dict classmethod delete ( *args , **kwargs ) \u2192 bool \u00b6 classmethod post ( *args , **kwargs ) \u2192 bool \u00b6"}, {"title": "idmtools.registry package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.html", "text": "idmtools.registry package \u00b6 Submodules \u00b6 idmtools.registry.experiment_specification module idmtools.registry.master_plugin_registry module idmtools.registry.platform_specification module idmtools.registry.plugin_specification module idmtools.registry.task_specification module idmtools.registry.utils module Module contents \u00b6"}, {"title": "idmtools_models package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.html", "text": "idmtools_models package \u00b6 Subpackages \u00b6 idmtools_models.python package Submodules idmtools_models.python.json_python_task module idmtools_models.python.python_task module Module contents idmtools_models.r package Submodules idmtools_models.r.json_r_task module idmtools_models.r.r_task module Module contents Submodules \u00b6 idmtools_models.json_configured_task module idmtools_models.templated_script_task module Module contents \u00b6"}, {"title": "Using analyzers with SSMT \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-ssmt.html", "text": "Using analyzers with SSMT \u00b6 If you have access to COMPS, you can use IDM-Tools to run analyzers on Server-Side Modeling Tools (SSMT). SSMT is integrated with COMPS, allowing you to leverage the HPC compute power for running both the analyzers and any pre or post processing scripts that you may have previously ran locally. The idmtools.analysis.platform_analysis.PlatformAnalysis class is used for sending the needed information (such as analyzers, files, and experiment ids) as a SSMT work item to be run with SSMT and COMPS. The following example, run_ssmt_analysis.py, shows how to use idmtools.analysis.platform_analysis.PlatformAnalysis for running analysis on SSMT: from examples.ssmt.simple_analysis.analyzers.AdultVectorsAnalyzer import AdultVectorsAnalyzer from examples.ssmt.simple_analysis.analyzers.PopulationAnalyzer import PopulationAnalyzer from idmtools.core.platform_factory import Platform from idmtools.analysis.platform_anaylsis import PlatformAnalysis if __name__ == \"__main__\" : platform = Platform ( 'COMPS2' ) analysis = PlatformAnalysis ( platform = platform , experiment_ids = [ \"8bb8ae8f-793c-ea11-a2be-f0921c167861\" ], analyzers = [ PopulationAnalyzer , AdultVectorsAnalyzer ], analyzers_args = [{ 'title' : 'idm' }, { 'name' : 'global good' }], analysis_name = \"SSMT Analysis Simple 1\" ) analysis . analyze ( check_status = True ) wi = analysis . get_work_item () print ( wi ) In this example two analyzers are run on an existing experiment with the output results saved to an output directory. After you run the example you can see the results by using the returned SSMTWorkItem id and searching for it under Work Items in COMPS. Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org ."}, {"title": "idmtools.entities.command_line module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.command_line.html", "text": "idmtools.entities.command_line module \u00b6 class idmtools.entities.command_line. CommandLine ( executable=None , *args , **kwargs ) \u00b6 Bases: object A class to construct command line strings from executable, options, and params property executable \u00b6 add_argument ( arg ) \u00b6 add_option ( option , value ) \u00b6 property options \u00b6 property arguments \u00b6 property cmd \u00b6"}, {"title": "idmtools.analysis.tags_analyzer module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.tags_analyzer.html", "text": "idmtools.analysis.tags_analyzer module \u00b6 class idmtools.analysis.tags_analyzer. TagsAnalyzer ( uid=None , working_dir=None , parse=True ) \u00b6 Bases: idmtools.entities.ianalyzer.IAnalyzer Provides an analyzer for CSV output Examples # Example TagsAnalyzer for any experiment # In this example, we will demonstrate how to use a TagsAnalyzer to put your sim tags in a csv file # First, import some necessary system and idmtools packages. from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.tags_analyzer import TagsAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : # Set the platform where you want to run your analysis # In this case we are running in COMPS since the Work Item we are analyzing was run on COMPS platform = Platform ( 'COMPS2' ) # Arg option for analyzer init are uid, working_dir, data in the method map (aka select_simulation_data), # and filenames # Initialize the analyser class which just requires an experiment id analyzers = [ TagsAnalyzer ()] # Set the experiment id you want to analyze experiment_id = '36d8bfdc-83f6-e911-a2be-f0921c167861' # staging exp id JSuresh's Magude exp # Specify the id Type, in this case an Experiment on COMPS manager = AnalyzeManager ( configuration = {}, partial_analyze_ok = True , platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () initialize ( ) \u00b6 Call once after the analyzer has been added to the AnalyzeManager . Add everything depending on the working directory or unique ID here instead of in __init__. map ( data , simulation ) \u00b6 In parallel for each simulation, consume raw data from filenames and emit selected data. Parameters data \u2013 A dictionary associating filename with content for simulation data. item \u2013 IItem object that the passed data is associated with. Returns Selected data for the given item. reduce ( all_data ) \u00b6 Combine the map() data for a set of items into an aggregate result. Parameters all_data \u2013 A dictionary with entries for the item ID and selected data."}, {"title": "idmtools.analysis.download_analyzer module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.download_analyzer.html", "text": "idmtools.analysis.download_analyzer module \u00b6 class idmtools.analysis.download_analyzer. DownloadAnalyzer ( filenames=None , output_path=None , **kwargs ) \u00b6 Bases: idmtools.entities.ianalyzer.IAnalyzer A simple base class that will download the files specified in filenames without further treatment. Can be used by creating a child class: class InsetDownloader ( DownloadAnalyzer ): filenames = [ 'output/InsetChart.json' ] Or by directly calling it: analyzer = DownloadAnalyzer ( filenames = [ 'output/InsetChart.json' ]) Examples # Example DownloadAnalyzer for EMOD Experiment # In this example, we will demonstrate how to create an DownloadAnalyzer to download simulation output files locally # First, import some necessary system and idmtools packages. from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.download_analyzer import DownloadAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : # Set the platform where you want to run your analysis # In this case we are running in COMPS, but this can be changed to run 'Local' platform = Platform ( 'COMPS2' ) # Arg option for analyzer init are uid, working_dir, data in the method map (aka select_simulation_data), # and filenames # In this case, we want to provide a filename to analyze filenames = [ 'StdOut.txt' ] # Initialize the analyser class with the path of the output files to download analyzers = [ DownloadAnalyzer ( filenames = filenames , output_path = 'download' )] # Set the experiment you want to analyze experiment_id = '11052582-83da-e911-a2be-f0921c167861' # comps2 staging exp id # Specify the id Type, in this case an Experiment manager = AnalyzeManager ( configuration = {}, platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () reduce ( all_data: dict ) \u00b6 Combine the map() data for a set of items into an aggregate result. Parameters all_data \u2013 A dictionary with entries for the item ID and selected data. initialize ( ) \u00b6 Call once after the analyzer has been added to the AnalyzeManager . Add everything depending on the working directory or unique ID here instead of in __init__. get_sim_folder ( item ) \u00b6 Concatenate the specified top-level output folder with the simulation ID. Parameters item \u2013 A simulation output parsing thread. Returns The name of the folder to download this simulation\u2019s output to. map ( data: Dict[str, Any], item: Union[idmtools.entities.iworkflow_item.IWorkflowItem, idmtools.entities.simulation.Simulation] ) \u00b6 Write the downloaded data to the path Parameters data \u2013 item \u2013 Returns:"}, {"title": "Platforms \u2014 IDM-Tools  documentation", "tags": "", "url": "./cli-platforms.html", "text": "Platforms \u00b6 IDM includes commands for managing the local platform. To see the list of commands type the following at a command prompt. $ idmtools local --help INI File Used: /home/runner/work/idmtools/idmtools/idmtools/docs/idmtools.ini Usage: idmtools local [OPTIONS] COMMAND [ARGS]... Commands related to managing the local platform Options: --run-as TEXT Change the default user you run docker containers as. Useful is situations where you need to access docker with sudo. Example values are \"1000:1000\" --help Show this message and exit. Commands: down Shutdown the local execution platform(and optionally delete data info restart Restart the local execution platform start Start the local execution platform status Check the status of the local execution platform stop"}, {"title": "idmtools_platform_local.platform_operations package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.platform_operations.html", "text": "idmtools_platform_local.platform_operations package \u00b6 Submodules \u00b6 idmtools_platform_local.platform_operations.experiment_operations module idmtools_platform_local.platform_operations.simulation_operations module idmtools_platform_local.platform_operations.uitils module Module contents \u00b6"}, {"title": "Example analyzers \u2014 IDM-Tools  documentation", "tags": "", "url": "./analyzers-example.html", "text": "Example analyzers \u00b6 You can use the following example analyzers as templates to get started using IDM-Tools: idmtools.analysis.add_analyzer.AddAnalyzer idmtools.analysis.csv_analyzer.CSVAnalyzer idmtools.analysis.download_analyzer.DownloadAnalyzer idmtools.analysis.tags_analyzer.TagsAnalyzer Each example analyzer is configured to run with existing simulation data and already configured options, such as using the COMPS platform and existing experiments. This allows you to easily run these example analyzers for demonstrating some of the tasks you may want to accomplish when analyzing simulation output data. You can then use and modify these examples for your specific needs. Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org . For a description of each of these analyzers please see the following: AddAnalyzer : Gets metadata from simulations, maps to key:value pairs, and returns a .txt output file. CSVAnalyzer : Analyzes .csv output files from simulations and returns a .csv output file. DownloadAnalyzer : Downloads simulation output files for analysis on local computer resources. Multiple CSV Example : Analyzes multiple .csv output files from simulations and returns a .csv output file. TagsAnalyzer : Analyzes tags from simulations and returns a .csv output file. Each of the included example analyzers inherit from the built-in analyzers and the IAnalyzer abstract class: For more information about the built-in analyzers, see Create an analyzer . There are also additional examples, such as forcing analyzers to use a specific working directory and how to perform partial analysis on only succeeded or failed simulations: Force working directory Partial analysis Analysis on only succeeded simulations Analysis on both succeeded and failed simulations"}, {"title": "Create and run simulations \u2014 IDM-Tools  documentation", "tags": "", "url": "./create-sims.html", "text": "Create and run simulations \u00b6 To create simulations with IDM-Tools, create a Python file that imports the relevant packages, uses the classes and functions to meet your specific needs, and then run the script using python script_name.py . For example, if you would like to create many simulations \u201con-the-fly\u201d (such as parameter sweeps) then you should use the SimulationBuilder and TemplatedSimulations classes. On the other hand, if you would like to create multiple simulations beforehand then you can use the Simulation class. See the following examples for each of these scenarios: SimulationBuilder example \u00b6 \"\"\" This file demonstrates how to use ExperimentBuilder in PythonExperiment's builder. We are then adding the builder to PythonExperiment. Parameters for sweeping: |__ a = [0,1,2,3,4] Expect 5 sims with config parameters, note: \"b\" is not a sweep parameter, but it is depending on a's value: sim1: {a:0, b:2} sim2: {a:1, b:3} sim3: {a:2, b:4} sim4: {a:3, b:5} sim5: {a:4, b:6} \"\"\" import os import sys from functools import partial from idmtools.builders import SimulationBuilder from idmtools.core.platform_factory import platform from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH # define a custom sweep callback that sets b to a + 2 def param_update_ab ( simulation , param , value ): # Set B within if param == \"a\" : simulation . task . set_parameter ( \"b\" , value + 2 ) return simulation . task . set_parameter ( param , value ) if __name__ == \"__main__\" : # define what platform we want to use. Here we use a context manager but if you prefer you can # use objects such as Platform('COMPS2') instead with platform ( 'COMPS2' ): # define our base task base_task = JSONConfiguredPythonTask ( script_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model1.py\" ), parameters = dict ( c = 'c-value' )) # define our input csv sweep builder = SimulationBuilder () # Sweep parameter \"a\" and make \"b\" depends on \"a\" setAB = partial ( param_update_ab , param = \"a\" ) builder . add_sweep_definition ( setAB , range ( 0 , 5 )) # now define we want to create a series of simulations using the base task and the sweep ts = TemplatedSimulations . from_task ( base_task , tags = dict ( c = 'c-value' )) ts . add_builder ( builder ) # define our experiment with its metadata experiment = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 } ) # run experiment experiment . run () # wait until done with longer interval # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts experiment . wait ( refresh_interval = 10 ) # use system status as the exit code sys . exit ( 0 if experiment . succeeded else - 1 ) Simulation example \u00b6 \"\"\" This file demonstrates how to use StandAloneSimulationsBuilder in PythonExperiment's builder. we create 5 simulations and for each simulation, we set parameter 'a' = [0,4] and 'b' = a + 10: then add each updated simulation to builder then we are adding the builder to PythonExperiment \"\"\" import copy import os import sys from idmtools.assets import AssetCollection from idmtools.core.platform_factory import Platform from idmtools.entities.experiment import Experiment from idmtools.entities.simulation import Simulation from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH if __name__ == \"__main__\" : # define our platform platform = Platform ( 'COMPS2' ) # create experiment object and define some extra assets assets_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"Assets\" ) e = Experiment ( name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 }, assets = AssetCollection . from_directory ( assets_path )) # define paths to model and extra assets folder container more common assets model_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model.py\" ) # define our base task including the common assets. We could also add these assets to the experiment above base_task = JSONConfiguredPythonTask ( script_path = model_path , envelope = 'parameters' ) base_simulation = Simulation . from_task ( base_task ) # now build our simulations for i in range ( 5 ): # first copy the simulation sim = copy . deepcopy ( base_simulation ) # configure it sim . task . set_parameter ( \"a\" , i ) sim . task . set_parameter ( \"b\" , i + 10 ) # and add it to the simulations e . simulations . append ( sim ) # run the experiment e . run ( platform = platform ) # wait on it # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts e . wait () # use system status as the exit code sys . exit ( 0 if e . succeeded else - 1 ) Many additional examples can be found in the /examples folder of the GitHub repository. Create simulation tags (Preferred) Builder callbacks via add_sweep_definition Base task with TemplatedSimulations Specific simulation from TemplatedSimulations Create EMOD simulations"}, {"title": "Parameter sweeps and model iteration \u2014 IDM-Tools  documentation", "tags": "", "url": "./parameter-sweeps.html", "text": "Parameter sweeps and model iteration \u00b6 In modeling, parameter sweeps are an important method for fine-tuning parameter values, exploring parameter space, and calibrating simulations to data. A parameter sweep is an iterative process in which simulations are run repeatedly using different values of the parameter(s) of choice. This process enables the modeler to determine a parameter\u2019s \u201cbest\u201d value (or range of values), or even where in parameter space the model produces desirable (or non-desirable) behaviors. When fitting models to data, it is likely that there will be numerous parameters that do not have a pre-determined value. Some parameters will have a range of values that are biologically plausible, or have been determined from previous experiments; however, selecting a particular numerical value to use in the model may not be feasible or realistic. Therefore, the best practice involves using a parameter sweep to narrow down the range of possible values or to provide a range of outcomes for those possible values. IDM-Tools provides an automated approach to parameter sweeps. With few lines of code, it is possible to test the model over any range of parameter values, with any combination of parameters. Note that parameter sweeps are a simple method of model calibration, and there are more complex calibration algorithms available of IDM-Tools. See Calibrate simulations for more information on additional methods. Contents Parameter sweeps for model calibration Parameter sweeps and stochasticity How to do parameter sweeps Using builders Creating sweeps without builders Running parameter sweeps in specific models Parameter sweeps for model calibration \u00b6 For more information on model calibration, see Calibrate simulations . Parameter sweeps and stochasticity \u00b6 With a stochastic model (such as EMOD), it is especially important to utilize parameter sweeps, not only for calibration to data or parameter selection, but to fully explore the stochasticity in output. Single model runs may appear to provide good fits to data, but variation will arise and multiple runs are necessary to determine the appropriate range of parameter values necessary to achieve desired outcomes. Multiple iterations of a single set of parameter values should be run to determine trends in simulation output: a single simulation output could provide results that are due to random chance. How to do parameter sweeps \u00b6 With idmtools, you can do parameter sweeps with builders or without builders using a base task to set your simulation parameters. The typical \u2018output\u2019 of IDM-Tools is a config.json file for each created simulation, which contains the parameter values assigned: both the constant values and those being swept. Using builders \u00b6 In this release, to support parameter sweeps for models, we have the following builders to assist you: SimulationBuilder - you set your sweep parameters in your scripts and it generates a config.json file with your sweeps for your experiment/simulations to use CSVExperimentBuilder - you can use a CSV file to do your parameter sweeps YamlSimulationBuilder - you can use a Yaml file to do your parameter sweeps Arm Builder for cross and pair parameters, which allows you to cross parameters, like you cross your arms. There are two types of sweeping, cross and pair. Cross means you have for example, 3 x 3 = 9 set of parameters, and pair means 3 + 3 = 3 pairs of parameters, for example, a, b, c and d, e, f. For cross sweeping, let\u2019s say again you have parameters a, b, c and d, e, f that you want to cross so you would have the following possible matches: - a & d - a & e - a & f - b & d - b & e - b & f - c & d - c & e - c & f For Python models, we also support them using a JSONConfiguredPythonTask. In the future we will support additional configured tasks for Python and R models. Creating sweeps without builders \u00b6 You can also create sweeps without using builders. Like this example: \"\"\" This file demonstrates how to create param sweeps without builders. we create base task including our common assets, e.g. our python model to run we create 5 simulations and for each simulation, we set parameter 'a' = [0,4] and 'b' = a + 10 using this task then we are adding this to task to our Experiment to run our simulations \"\"\" import copy import os import sys from idmtools.assets import AssetCollection from idmtools.core.platform_factory import Platform from idmtools.entities.experiment import Experiment from idmtools.entities.simulation import Simulation from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_test import COMMON_INPUT_PATH if __name__ == \"__main__\" : # define our platform platform = Platform ( 'COMPS2' ) # create experiment object and define some extra assets assets_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"Assets\" ) e = Experiment ( name = os . path . split ( sys . argv [ 0 ])[ 1 ], tags = { \"string_tag\" : \"test\" , \"number_tag\" : 123 }, assets = AssetCollection . from_directory ( assets_path )) # define paths to model and extra assets folder container more common assets model_path = os . path . join ( COMMON_INPUT_PATH , \"python\" , \"model.py\" ) # define our base task including the common assets. We could also add these assets to the experiment above base_task = JSONConfiguredPythonTask ( script_path = model_path , envelope = 'parameters' ) base_simulation = Simulation . from_task ( base_task ) # now build our simulations for i in range ( 5 ): # first copy the simulation sim = copy . deepcopy ( base_simulation ) # configure it sim . task . set_parameter ( \"a\" , i ) sim . task . set_parameter ( \"b\" , i + 10 ) # and add it to the simulations e . simulations . append ( sim ) # run the experiment e . run ( platform = platform ) # wait on it # in most real scenarios, you probably do not want to wait as this will wait until all simulations # associated with an experiment are done. We do it in our examples to show feature and to enable # testing of the scripts e . wait () # use system status as the exit code sys . exit ( 0 if e . succeeded else - 1 ) Running parameter sweeps in specific models \u00b6 The following pages provide information about running parameter sweeps in particular models, and include example scripts. Model-specific parameter sweep information Running parameter sweeps with R models Running parameter sweeps with Python models Running parameter sweeps with EMOD"}, {"title": "Output reports \u2014 IDM-Tools  documentation", "tags": "", "url": "./reports.html", "text": "Output reports \u00b6"}, {"title": "Running parameter sweeps with R models \u2014 IDM-Tools  documentation", "tags": "", "url": "./sweeps-r.html", "text": "Running parameter sweeps with R models \u00b6"}, {"title": "Welcome to IDM-Tools \u2014 IDM-Tools  documentation", "tags": "", "url": "./index.html", "text": "Welcome to IDM-Tools \u00b6 IDM Modeling Tools is a collection of Python scripts and utilities created to streamline user interactions with disease models. This framework provides the user with tools necessary to complete projects, starting from the creation of input files (if required), to calibration of the model to data, to commissioning and running simulations, through the analysis of results. Modelers can use IDM-Tools to run models locally or send suites of simulations to an HPC or other computing source. This framework is free, open-source, and model agnostic: it can be used to interact with a variety of models, such as custom models written in R or Python, or IDM\u2019s own EMOD. IDM-Tools workflow \u00b6 IDM-Tools includes a variety of options for each step of the modeling process. Because of this, the tool suite was developed in a modular fashion, so that users can select the utilities they wish to use. In order to simplify the desired workflow, facilitate the modeling process, and make the model (and its results) reusable and sharable, IDM-Tools allows the user to create assets . Assets can be added at any level of the process, from running a specific task, through creating a simulation, to creating a experiment . This allows the user to create inputs based on their specific needs: they can be transient, or sharable across multiple simulations. Exact workflows for using IDM-Tools is user-dependent, and can include any of the tasks listed below. To help new users get started, a series of Cookiecutter projects have been added, designed to guide modelers through necessary tasks. See Cookiecutter example projects for the available templates. Installation Basic installation Developer installation Configuration Global parameters Logging Platforms Create and run simulations Create simulation tags Create EMOD simulations Parameter sweeps and model iteration Running parameter sweeps with R models Running parameter sweeps with Python models Running parameter sweeps with EMOD Calibrate simulations Introduction to analyzers Example analyzers Force working directory Partial analysis Create an analyzer Convert analyzers from DTK-Tools to IDM-Tools DTK-Tools example analyzer DTK-Tools converted to IDM-Tools Using analyzers with SSMT Output reports Plot data Serialization Cookiecutter example projects Architecture and packages reference idmtools idmtools package idmtools_models idmtools_models package idmtools_platform_comps idmtools_platform_comps package idmtools_platform_local idmtools_platform_local package CLI reference idmtools.ini file Templates Simulations Experiments Platforms Examples Troubleshooting Glossary Changelog 0.1.0 1.0.0 1.0.1 1.1.0"}, {"title": "idmtools_models.python.json_python_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.python.json_python_task.html", "text": "idmtools_models.python.json_python_task module \u00b6 class idmtools_models.python.json_python_task. JSONConfiguredPythonTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, script_path: str = None, python_path: str = 'python', parameters: dict = <factory>, envelope: str = None, config_file_name: str = 'config.json', is_config_common: bool = False, command_line_argument: str = None, command_line_argument_no_filename: bool = True, configfile_argument: Union[str, NoneType] = '--config' ) \u00b6 Bases: idmtools_models.json_configured_task.JSONConfiguredTask , idmtools_models.python.python_task.PythonTask configfile_argument : Optional[str] = '--config' \u00b6 gather_common_assets ( ) \u00b6 Return the common assets for a JSON Configured Task a derived class Returns: gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Get Transient assets. This should general be the config.json Returns Transient assets reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Reload the task from a simulation Parameters simulation \u2013 Simulation to reload from **kwargs \u2013 Returns None See Also idmtools_models.json_configured_task.JSONConfiguredTask.reload_from_simulation() idmtools_models.python.python_task.PythonTask.reload_from_simulation() pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Pre-creation Parameters parent \u2013 Returns None See Also idmtools_models.json_configured_task.JSONConfiguredTask.pre_creation() idmtools_models.python.python_task.PythonTask.pre_creation() post_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Post-creation Parameters parent \u2013 Parent Returns: See Also idmtools_models.json_configured_task.JSONConfiguredTask.post_creation() idmtools_models.python.python_task.PythonTask.post_creation() class idmtools_models.python.json_python_task. JSONConfiguredPythonTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.python.json_python_task.JSONConfiguredPythonTask \u00b6 Get instance of JSONConfiguredPythonTask with configuration Parameters configuration \u2013 Configuration for task Returns JSONConfiguredPythonTask with configuration get_description ( ) \u2192 str \u00b6 Get description for plugin Returns Plugin Description get_type ( ) \u2192 Type[idmtools_models.python.json_python_task.JSONConfiguredPythonTask] \u00b6 Get Type for Plugin Returns JSONConfiguredPythonTask"}, {"title": "Running parameter sweeps with Python models \u2014 IDM-Tools  documentation", "tags": "", "url": "./sweeps-python.html", "text": "Running parameter sweeps with Python models \u00b6 (include information about sweeps in python) Examples \u00b6 For Python modelers, we have multiple examples of how to do your parameter sweeps for Python models. python_model.python_sim \u00b6 python_sim First, import some necessary system and idmtools packages. TemplatedSimulations: A utility that builds simulations from a template SimulationBuilder: An interface to different types of sweeps. It is used in conjunction with TemplatedSimulations. Platform: To specify the platform you want to run your experiment on JSONConfiguredPythonTask: We want to run an task executing a Python script. We will run a task in each simulation using this object. This particular task has a json config that is generated as well. There are other python task we either different or no configuration formats. import os import sys from functools import partial from typing import Any , Dict from idmtools.builders import SimulationBuilder from idmtools.core.platform_factory import Platform from idmtools.entities.experiment import Experiment from idmtools.entities.simulation import Simulation from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask We have python model defined in \u201cmodel.py\u201d which has 3 parameters: a, b, c and supports a json config from a file named \u201cconfig\u201d.json. We want to sweep the parameters a for the values 0-2 and b for the values 1-3 and keep c as value 0. To accomplish this, we are going to proceed in a few high-level steps. See https://bit.ly/37DHUf0 for workflow. Define our base task. This task is the common configuration across all our tasks. For us, that means some basic run info like script path as well as our parameter/value we don\u2019t plan on sweeping, c. Then we will define our TemplateSimulations object that will use our task to build a series of simulations. Then we will define a SimulationBuilder and define our sweeps. This will involve also writing some callback functions that update the each task\u2019s config with the sweep values. Then we will add our simulation builder to our TemplateSimulation object. We will then build our Experiment object using the TemplateSimulations as our simulations list. Lastly we will run the experiment on the platform. First, let\u2019s define our base task. Normally, you want to do set any assets/configurations you want across the all the different Simulations we are going to build for our experiment. Here we set c to 0 since we do not want to sweep it. task = JSONConfiguredPythonTask ( script_path = os . path . join ( \"inputs\" , \"python_model_with_deps\" , \"Assets\" , \"model.py\" ), parameters = ( dict ( c = 0 ))) Now let\u2019s use this task to create a TemplatedSimulation builder. This will build new simulations from sweep builders we will define later. We can also use it to manipulate the base_task or the base_simulation. ts = TemplatedSimulations ( base_task = task ) We can define common metadata like tags across all the simulations using the base_simulation object. ts . base_simulation . tags [ 'tag1' ] = 1 Since we have our templated simulation object now, let\u2019s define our sweeps. To do that we need to use a builder: builder = SimulationBuilder () When adding sweep definitions, you need to generally provide two items. See https://bit.ly/314j7xS for a diagram of how the Simulations are built using TemplateSimulations and SimulationBuilders. A callback function that will be called for every value in the sweep. This function will receive a Simulation object and a value. You then define how to use those within the simulation. Generally, you want to pass those to your task\u2019s configuration interface. In this example, we are using JSONConfiguredPythonTask which has a set_parameter function that takes a Simulation, a parameter name, and a value. To pass to this function, we will user either a class wrapper or function partials. A list/generator of values Since our models uses a json config let\u2019s define an utility function that will update a single parameter at a time on the model and add that param/value pair as a tag on our simulation. def param_update ( simulation : Simulation , param : str , value : Any ) -> Dict [ str , Any ]: \"\"\" This function is called during sweeping allowing us to pass the generated sweep values to our Task Configuration We always receive a Simulation object. We know that simulations all have tasks and that for our particular set of simulations they will all include JSONConfiguredPythonTask. We configure the model with calls to set_parameter to update the config. In addition, we are can return a dictionary of tags to add to the simulations so we return the output of the 'set_parameter' call since it returns the param/value pair we set Args: simulation: Simulation we are configuring param: Param string passed to use value: Value to set param to Returns: \"\"\" return simulation . task . set_parameter ( param , value ) Let\u2019s sweep the parameter \u2018a\u2019 for the values 0-2. Since our utility function requires a Simulation, param, and value, the sweep framework calls our function with a Simulation and value. Let\u2019s use the partial function to define that we want the param value to always be \u201ca\u201d so we can perform our sweep. setA = partial ( param_update , param = \"a\" ) Now add the sweep to our builder: builder . add_sweep_definition ( setA , range ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 # Example Python Experiment with JSON Configuration # In this example, we will demonstrate how to run a python experiment with JSON Configuration # First, import some necessary system and idmtools packages. # - TemplatedSimulations: A utility that builds simulations from a template # - SimulationBuilder: An interface to different types of sweeps. It is used in conjunction with TemplatedSimulations # - Platform: To specify the platform you want to run your experiment on # - JSONConfiguredPythonTask: We want to run an task executing a Python script. We will run a task in each simulation # using this object. This particular task has a json config that is generated as well. There are other python task # we either different or no configuration formats. import os import sys from functools import partial from typing import Any , Dict from idmtools.builders import SimulationBuilder from idmtools.core.platform_factory import Platform from idmtools.entities.experiment import Experiment from idmtools.entities.simulation import Simulation from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask # We have python model defined in \"model.py\" which has 3 parameters: a, b, c and supports # a json config from a file named \"config\".json. We want to sweep the parameters a for the values 0-2 and b for the # values 1-3 and keep c as value 0. # To accomplish this, we are going to proceed in a few high-level steps. See https://bit.ly/37DHUf0 for workflow # 1. Define our base task. This task is the common configuration across all our tasks. For us, that means some basic # run info like script path as well as our parameter/value we don't plan on sweeping, c # 2. Then we will define our TemplateSimulations object that will use our task to build a series of simulations # 3. Then we will define a SimulationBuilder and define our sweeps. This will invlove also writing some callback # functions that update the each task's config with the swep values # 4. Then we will add our simulation builder to our TemplateSimulation object. # 5. We will then build our Experiment object using the TemplateSimulations as our simulations list. # 6. Lastly we will run the experiment on the platform # first let's define our base task. Normally, you want to do set any assets/configurations you want across the # all the different Simulations we are going to build for our experiment. Here we set c to 0 since we do not want to # sweep it task = JSONConfiguredPythonTask ( script_path = os . path . join ( \"inputs\" , \"python_model_with_deps\" , \"Assets\" , \"model.py\" ), parameters = ( dict ( c = 0 ))) # now let's use this task to create a TemplatedSimulation builder. This will build new simulations from sweep builders # we will define later. We can also use it to manipulate the base_task or the base_simulation ts = TemplatedSimulations ( base_task = task ) # We can define common metadata like tags across all the simulations using the base_simulation object ts . base_simulation . tags [ 'tag1' ] = 1 # Since we have our templated simulation object now, let's define our sweeps # To do that we need to use a builder builder = SimulationBuilder () # When adding sweep definitions, you need to generally provide two items # See https://bit.ly/314j7xS for a diagram of how the Simulations are built using TemplateSimulations + # SimulationBuilders # 1. A callback function that will be called for every value in the sweep. This function will receive a Simulation # object and a value. You then define how to use those within the simulation. Generally, you want to pass those # to your task's configuration interface. In this example, we are using JSONConfiguredPythonTask which has a # set_parameter function that takes a Simulation, a parameter name, and a value. To pass to this function, we will # user either a class wrapper or function partials # 2. A list/generator of values # Since our models uses a json config let's define an utility function that will update a single parameter at a # time on the model and add that param/value pair as a tag on our simulation. def param_update ( simulation : Simulation , param : str , value : Any ) -> Dict [ str , Any ]: \"\"\" This function is called during sweeping allowing us to pass the generated sweep values to our Task Configuration We always receive a Simulation object. We know that simulations all have tasks and that for our particular set of simulations they will all include JSONConfiguredPythonTask. We configure the model with calls to set_parameter to update the config. In addition, we are can return a dictionary of tags to add to the simulations so we return the output of the 'set_parameter' call since it returns the param/value pair we set Args: simulation: Simulation we are configuring param: Param string passed to use value: Value to set param to Returns: \"\"\" return simulation . task . set_parameter ( param , value ) # Let's sweep the parameter 'a' for the values 0-2. Since our utility function requires a Simulation, param, and value # but the sweep framework all calls our function with Simulation, value, let's use the partial function to define # that we want the param value to always be \"a\" so we can perform our sweep setA = partial ( param_update , param = \"a\" ) # now add the sweep to our builder builder . add_sweep_definition ( setA , range ( 3 )) # An alternative to using partial is define a class that store the param and is callable later. let's use that technique # to perform a sweep one the values 1-3 on parameter b # First define our class. The trick here is we overload __call__ so that after we create the class, and calls to the # instance will be relayed to the task in a fashion identical to the param_update function above. It is generally not # best practice to define a class like this in the body of our main script so it is advised to place this in a library # or at the very least the top of your file. class setParam : def __init__ ( self , param ): self . param = param def __call__ ( self , simulation , value ): return simulation . task . set_parameter ( self . param , value ) # Now add our sweep on a list builder . add_sweep_definition ( setParam ( \"b\" ), [ 1 , 2 , 3 ]) ts . add_builder ( builder ) # Now we can create our Experiment using our template builder experiment = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ]) # Add our own custom tag to simulation experiment . tags [ \"tag1\" ] = 1 # And maybe some custom Experiment Level Assets experiment . assets . add_directory ( assets_directory = os . path . join ( \"inputs\" , \"python_model_with_deps\" , \"Assets\" )) # In order to run the experiment, we need to create a `Platform` # The `Platform` defines where we want to run our simulation. # You can easily switch platforms by changing the Platform to for example 'Local' with Platform ( 'COMPS2' ): # The last step is to call run() on the ExperimentManager to run the simulations. experiment . run ( True ) # use system status as the exit code sys . exit ( 0 if experiment . succeeded else - 1 ) python_model.python_SEIR_sim \u00b6 python_SEIR_sim Example Python Experiment with JSON Configuration In this example, we will demonstrate how to run a python experiment with JSON Configuration. First, import some necessary system and idmtools packages: import os import sys import json from functools import partial from typing import Any , Dict from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.builders import SimulationBuilder from idmtools.core import ItemType from idmtools.core.platform_factory import Platform from idmtools.entities.experiment import Experiment from idmtools.entities.simulation import Simulation from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from inputs.ye_seir_model.custom_csv_analyzer import NodeCSVAnalyzer , InfectiousnessCSVAnalyzer Define some constant string used in this example: class ConfigParameters (): Infectious_Period_Constant = \"Infectious_Period_Constant\" Base_Infectivity_Constant = \"Base_Infectivity_Constant\" Base_Infectivity_Distribution = \"Base_Infectivity_Distribution\" GAUSSIAN_DISTRIBUTION = \"GAUSSIAN_DISTRIBUTION\" Base_Infectivity_Gaussian_Mean = \"Base_Infectivity_Gaussian_Mean\" Base_Infectivity_Gaussian_Std_Dev = \"Base_Infectivity_Gaussian_Std_Dev\" Script need to be in a main block, other wise AnalyzerManager will have issue with multi threads in Windows OS. if __name__ == '__main__' : We have python model defined in \u201cSEIR_model.py\u201d which takes several arguments like \u201c\u2013duration\u201d and \u201c\u2013outbreak_coverage\u201d, and supports a json config from a file named \u201cnd_template.json\u201d. We want to sweep some arguments passed in to \u201cSEIR_model.py\u201d and some parameters in \u201cnd_template.json\u201d. To accomplish this, we are going to proceed in a few high-level steps. See https://bit.ly/37DHUf0 for workflow Define our base task. This task is the common configuration across all our tasks. For us, that means some basic run info like script path as well as our arguments/value and parameter/value we don\u2019t plan on sweeping, \u201c\u2013duration\u201d, and most of the parameters inside \u201cnd_template.json\u201d. Then we will define our TemplateSimulations object that will use our task to build a series of simulations Then we will define a SimulationBuilder and define our sweeps. This will involve also writing some callback functions that update the each task\u2019s config or option with the sweep values Then we will add our simulation builder to our TemplateSimulation object. We will then build our Experiment object using the TemplateSimulations as our simulations list. We will run the experiment on the platform Once and experiment is succeeded, we run two CSV analyzer to analyze results from the python model. First, let\u2019s define our base task. Normally, you want to do set any assets/configurations you want across the all the different Simulations we are going to build for our experiment. Here we load config file from a template json file and rename the config_file_name (default value is config.json). parameters = json . load ( open ( os . path . join ( \"inputs\" , \"ye_seir_model\" , \"Assets\" , \"templates\" , 'seir_configuration_template.json' ), 'r' )) parameters [ ConfigParameters . Base_Infectivity_Distribution ] = ConfigParameters . GAUSSIAN_DISTRIBUTION task = JSONConfiguredPythonTask ( script_path = os . path . join ( \"inputs\" , \"ye_seir_model\" , \"Assets\" , \"SEIR_model.py\" ), parameters = parameters , config_file_name = \"seir_configuration_template.json\" ) We define arguments/value for simulation duration that we don\u2019t want to sweep as an option for the task. task . command . add_option ( \"--duration\" , 40 ) 2. Now, let\u2019s use this task to create a TemplatedSimulation builder. This will build new simulations from sweep builders we will define later. We can also use it to manipulate the base_task or the base_simulation .. code-block:: python ts = TemplatedSimulations(base_task=task) We can define common metadata like tags across all the simulations using the base_simulation object ts . base_simulation . tags [ 'simulation_name_tag' ] = \"SEIR_Model\" Since we have our templated simulation object now, let\u2019s define our sweeps. To do that we need to use a builder: builder = SimulationBuilder () When adding sweep definitions, you need to generally provide two items. See https://bit.ly/314j7xS for a diagram of how the Simulations are built using TemplateSimulations + SimulationBuilders 3.1. A callback function that will be called for every value in the sweep. This function will receive a Simulation object and a value. You then define how to use those within the simulation. Generally, you want to pass those to your task\u2019s configuration interface. In this example, we are using JSONConfiguredPythonTask which has a set_parameter function that takes a Simulation, a parameter name, and a value. To pass to this function, we will user either a class wrapper or function partials 3.2. A list/generator of values Since our models uses a json config let\u2019s define an utility function that will update a single parameter at a time on the model and add that param/value pair as a tag on our simulation. def param_update ( simulation : Simulation , param : str , value : Any ) -> Dict [ str , Any ]: \"\"\" This function is called during sweeping allowing us to pass the generated sweep values to our Task Configuration We always receive a Simulation object. We know that simulations all have tasks and that for our particular set of simulations they will all include JSONConfiguredPythonTask. We configure the model with calls to set_parameter to update the config. In addition, we are can return a dictionary of tags to add to the simulations so we return the output of the 'set_parameter' call since it returns the param/value pair we set Args: simulation: Simulation we are configuring param: Param string passed to use value: Value to set param to Returns: \"\"\" return simulation . task . set_parameter ( param , value ) Let\u2019s sweep the parameter \u2018Base_Infectivity_Gaussian_Mean\u2019 for the values 0.5 and 2. Since our utility function requires a Simulation, param, and value but the sweep framework all calls our function with Simulation, value, let\u2019s use the partial function to define that we want the param value to always be \u201cBase_Infectivity_Gaussian_Mean\u201d so we can perform our sweep set_base_infectivity_gaussian_mean = partial(param_update, param=ConfigParameters.Base_Infectivity_Gaussian_Mean) now add the sweep to our builder builder.add_sweep_definition(set_base_infectivity_gaussian_mean, [0.5, 2]). An alternative to using partial is define a class that store the param and is callable later. let\u2019s use that technique to perform a sweep one the values 1 and 2 on parameter Base_Infectivity_Gaussian_Std_Dev. First define our class. The trick here is we overload __call__ so that after we create the class, and calls to the instance will be relayed to the task in a fashion identical to the param_update function above. It is generally not best practice to define a class like this in the body of our main script so it is advised to place this in a library or at the very least the top of your file. class setParam : def __init__ ( self , param ): self . param = param def __call__ ( self , simulation , value ): return simulation . task . set_parameter ( self . param , value ) Now add our sweep on a list: .. code-block:: python builder.add_sweep_definition(setParam(ConfigParameters.Base_Infectivity_Gaussian_Std_Dev), [0.3, 1]) Using the same methodologies, we can sweep on option/arguments that pass to our Python model. You can uncomment the following code to enable it. 3.3 First method: # def option_update(simulation: Simulation, option: str, value: Any) -> Dict[str, Any]: # simulation.task.command.add_option(option, value) # return {option: value} # set_outbreak_coverage = partial(option_update, option=\"--outbreak_coverage\") # builder.add_sweep_definition(set_outbreak_coverage, [0.01, 0.1]) # # # 3.4 second method: # class setOption: # def __init__(self, option): # self.option = option # # def __call__(self, simulation, value): # simulation.task.command.add_option(self.option, value) # return {self.option: value} # builder.add_sweep_definition(setOption(\"--population\"), [1000, 4000]) Add our builder to the template simulations ts . add_builder ( builder ) Now we can create our Experiment using our template builder experiment = Experiment ( name = os . path . split ( sys . argv [ 0 ])[ 1 ], simulations = ts ) Add our own custom tag to simulation experiment . tags [ 'experiment_name_tag' ] = \"SEIR_Model\" And maybe some custom Experiment Level Assets experiment . assets . add_directory ( assets_directory = os . path . join ( \"inputs\" , \"ye_seir_model\" , \"Assets\" )) In order to run the experiment, we need to create a Platform . The Platform defines where we want to run our simulation. You can easily switch platforms by changing the Platform to for example \u2018Local\u2019 platform = Platform ( 'COMPS2' ) The last step is to call run() on the ExperimentManager to run the simulations. platform . run_items ( experiment ) platform . wait_till_done ( experiment ) Check experiment status, only move to Analyzer step if experiment succeeded. if not experiment . succeeded : print ( f \"Experiment { experiment . uid } failed. \\n \" ) sys . exit ( - 1 ) Now let\u2019s look at the experiment results. Here are two outputs we want to analyze. filenames = [ 'output/individual.csv' ] filenames_2 = [ 'output/node.csv' ] Initialize two analyser classes with the path of the output csv file analyzers = [ InfectiousnessCSVAnalyzer ( filenames = filenames ), NodeCSVAnalyzer ( filenames = filenames_2 )] Specify the id Type, in this case an Experiment on COMPS manager = AnalyzeManager ( configuration = {}, partial_analyze_ok = True , platform = platform , ids = [( experiment . uid , ItemType . EXPERIMENT )], analyzers = analyzers ) Now analyze: manager . analyze () sys . exit ( 0 ) Note To access and use COMPS you must receive approval and credentials from IDM. Send your request to support @ idmod . org . python_model.python_model_allee \u00b6 python_model_allee In this example, we will demonstrate how to run a python experiment. First, import some necessary system and idmtools packages. - ExperimentBuilder: To create sweeps - ExperimentManager: To manage our experiment - Platform: To specify the platform you want to run your experiment on - PythonExperiment: We want to run an experiment executing a Python script import os import sys from functools import partial from idmtools.assets import AssetCollection from idmtools.builders import SimulationBuilder from idmtools.core.platform_factory import Platform In order to run the experiment, we need to create a Platform and an ExperimentManager . The Platform defines where we want to run our simulation. You can easily switch platforms by changing the Platform to for example \u2018Local\u2019 with Platform(\u2018Local\u2019): from idmtools.entities.experiment import Experiment from idmtools.entities.templated_simulation import TemplatedSimulations from idmtools_models.python.json_python_task import JSONConfiguredPythonTask from idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection import RequirementsToAssetCollection platform = Platform ( 'COMPS2' ) pl = RequirementsToAssetCollection ( platform , requirements_path = os . path . join ( \"inputs\" , \"allee_python_model\" , \"requirements.txt\" )) ac_id = pl . run () pandas_assets = AssetCollection . from_id ( ac_id , platform = platform ) base_task = JSONConfiguredPythonTask ( # specify the path to the script. This is most likely a scientific model script_path = os . path . join ( \"inputs\" , \"allee_python_model\" , \"run_emod_sweep.py\" ), envelope = 'parameters' , parameters = dict ( fname = \"runNsim100.json\" , customGrid = 1 , nsims = 100 ), common_assets = pandas_assets ) Update and set simulation configuration parameters. def param_update ( simulation , param , value ): return simulation . task . set_parameter ( param , 'sweepR04_a_' + str ( value ) + '.json' ) setA = partial ( param_update , param = \"infile\" ) Define our template: ts = TemplatedSimulations ( base_task = base_task ) Now that the experiment is created, we can add sweeps to it and set additional params builder = SimulationBuilder () builder . add_sweep_definition ( setA , range ( 7850 , 7855 )) Add sweep builder to template: ts . add_builder ( builder ) Create experiment: e = Experiment . from_template ( ts , name = os . path . split ( sys . argv [ 0 ])[ 1 ], assets = AssetCollection . from_directory ( os . path . join ( \"inputs\" , \"allee_python_model\" )) ) platform . run_items ( e ) Use system status as the exit code: sys . exit ( 0 if e . succeeded else - 1 )"}, {"title": "idmtools.utils package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.html", "text": "idmtools.utils package \u00b6 Subpackages \u00b6 idmtools.utils.display package Submodules idmtools.utils.display.displays module idmtools.utils.display.settings module Module contents idmtools.utils.filters package Submodules idmtools.utils.filters.asset_filters module Module contents Submodules \u00b6 idmtools.utils.collections module idmtools.utils.command_line module idmtools.utils.decorators module idmtools.utils.dropbox_location module idmtools.utils.entities module idmtools.utils.file module idmtools.utils.file_parser module idmtools.utils.filter_simulations module idmtools.utils.gitrepo module idmtools.utils.hashing module idmtools.utils.info module idmtools.utils.json module idmtools.utils.language module idmtools.utils.local_os module idmtools.utils.time module Module contents \u00b6"}, {"title": "idmtools.core.enums module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.enums.html", "text": "idmtools.core.enums module \u00b6 class idmtools.core.enums. EntityStatus \u00b6 Bases: enum.Enum An enumeration. CREATED = 'created' \u00b6 RUNNING = 'running' \u00b6 SUCCEEDED = 'succeeded' \u00b6 FAILED = 'failed' \u00b6 class idmtools.core.enums. FilterMode \u00b6 Bases: enum.Enum Allows user to specify AND/OR for the filtering system. AND = 0 \u00b6 OR = 1 \u00b6 class idmtools.core.enums. ItemType \u00b6 Bases: enum.Enum An enumeration. SUITE = 1 \u00b6 EXPERIMENT = 2 \u00b6 SIMULATION = 3 \u00b6 WORKFLOW_ITEM = 4 \u00b6 ASSETCOLLECTION = 5 \u00b6"}, {"title": "idmtools.assets.file_list module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.file_list.html", "text": "idmtools.assets.file_list module \u00b6 class idmtools.assets.file_list. FileList ( root=None , files_in_root=None , recursive=False , ignore_missing=False , relative_path=None , max_depth=3 ) \u00b6 Bases: object Special utility class to help handling user files add_asset_file ( af ) \u00b6 method used to add asset file :param af: asset file to add Returns: None add_file ( path , relative_path='' ) \u00b6 method used to add a file :param path: file oath :param relative_path: file relative path Returns: None add_path ( path , files_in_dir=None , relative_path=None , recursive=False ) \u00b6 Add a path to the file list. :param path: The path to add (needs to be a dictionary) :param files_in_dir: If we want to only retrieve certain files in this path :param relative_path: relative_path: The relative path prefixed to each added files :param recursive: Do we want to browse recursively Returns: None"}, {"title": "idmtools_models.json_configured_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.json_configured_task.html", "text": "idmtools_models.json_configured_task module \u00b6 class idmtools_models.json_configured_task. JSONConfiguredTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[Simulation, IWorkflowItem]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, parameters: dict = <factory>, envelope: str = None, config_file_name: str = 'config.json', is_config_common: bool = False, command_line_argument: str = None, command_line_argument_no_filename: bool = True ) \u00b6 Bases: idmtools.entities.itask.ITask Defines an extensible simple task that implements functionality through optional supplied use hooks parameters : dict = None \u00b6 envelope : str = None \u00b6 config_file_name : str = 'config.json' \u00b6 is_config_common : bool = False \u00b6 command_line_argument : str = None \u00b6 command_line_argument_no_filename : bool = True \u00b6 gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather assets common across an Experiment(Set of Simulations) Returns Common AssetCollection gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather assets that are unique to this simulation/worktiem Returns Simulation/workitem level AssetCollection set_parameter ( key: Union[str, int, float], value: Union[str, int, float, Dict[Union[str, int, float], Any]] ) \u00b6 Update a parameter. The type hinting encourages JSON supported types Parameters key \u2013 Config value \u2013 Returns: get_parameter ( key: Union[str, int, float] ) \u2192 Union[str, int, float, Dict[Union[str, int, float], Any]] \u00b6 Returns a parameter value Parameters key \u2013 Key of parameter Returns Value of parameter Raises KeyError \u2013 update_parameters ( values: Dict[Union[str, int, float], Union[str, int, float, Dict[Union[str, int, float], Any]]] ) \u00b6 Perform bulk update from another dictionary Parameters values \u2013 Returns: reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation , config_file_name: Optional[str] = None , envelope: Optional[str] = None , **kwargs ) \u00b6 Reload from Simulation. To do this, the process is First check for a configfile name from arguments, then tags, or the default name Load the json config file Check if we got an envelope argument from parameters or the simulation tags, or on the task object Parameters simulation \u2013 Simulation object with metadata to load info from config_file_name \u2013 Optional name of config file envelope \u2013 Optional name of envelope Returns Populates the config with config from object pre_creation ( parent: Union[Simulation, WorkflowItem] ) \u00b6 Optional Hook called at the time of creation of task. Can be used to setup simulation and experiment level hooks :param parent: Returns: static set_parameter_sweep_callback ( simulation: idmtools.entities.simulation.Simulation , param: str , value: Any ) \u2192 Dict[str, Any] \u00b6 classmethod set_parameter_partial ( parameter: str ) \u00b6 class idmtools_models.json_configured_task. JSONConfiguredTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.json_configured_task.JSONConfiguredTask \u00b6 Get instance of JSONConfiguredTask with configuration specified Parameters configuration \u2013 Configuration for configuration Returns JSONConfiguredTask with configuration get_description ( ) \u2192 str \u00b6 Get description for plugin Returns Description of plugin get_example_urls ( ) \u2192 List[str] \u00b6 Get list of urls with examples for JSONConfiguredTask Returns List of urls that point to examples relating to JSONConfiguredTask get_type ( ) \u2192 Type[idmtools_models.json_configured_task.JSONConfiguredTask] \u00b6 Get task type provided by plugin Returns JSONConfiguredTask"}, {"title": "Index \u2014 IDM-Tools  documentation", "tags": "", "url": "./genindex.html", "text": "Index A | B | C | D | E | F | G | H | I | J | L | M | N | O | P | R | S | T | U | V | W | Y A AboveNormal (idmtools_platform_comps.comps_platform.COMPSPriority attribute) absolute_path (idmtools.assets.asset.Asset attribute) abstractstatic (class in idmtools.utils.decorators) add_analyzer() (idmtools.analysis.analyze_manager.AnalyzeManager method) add_argument() (idmtools.entities.command_line.CommandLine method) add_arm() (idmtools.builders.arm_simulation_builder.ArmSimulationBuilder method) add_asset() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.core.interfaces.iassets_enabled.IAssetsEnabled method) add_asset_file() (idmtools.assets.file_list.FileList method) add_assets() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.core.interfaces.iassets_enabled.IAssetsEnabled method) add_builder() (idmtools.entities.templated_simulation.TemplatedSimulations method) add_directory() (idmtools.assets.asset_collection.AssetCollection method) add_experiment() (idmtools.entities.suite.Suite method) add_file() (idmtools.assets.file_list.FileList method) (idmtools.entities.iworkflow_item.IWorkflowItem method) add_item() (idmtools.analysis.analyze_manager.AnalyzeManager method) add_option() (idmtools.entities.command_line.CommandLine method) add_or_replace_asset() (idmtools.assets.asset_collection.AssetCollection method) add_path() (idmtools.assets.file_list.FileList method) add_platform_requirement() (idmtools.entities.itask.ITask method) add_post_creation_hook() (idmtools.entities.itask.ITask method) add_pre_creation_hook() (idmtools.entities.itask.ITask method) add_simulation() (idmtools.entities.templated_simulation.TemplatedSimulations method) add_sweep_definition() (idmtools.builders.arm_simulation_builder.SweepArm method) (idmtools.builders.simulation_builder.SimulationBuilder method) add_sweeps_from_file() (idmtools.builders.csv_simulation_builder.CsvExperimentBuilder method) (idmtools.builders.yaml_simulation_builder.YamlSimulationBuilder method) add_tags() (idmtools.assets.asset_collection.AssetCollection method) add_wheels_to_assets() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) AddAnalyzer (class in idmtools.analysis.add_analyzer) adjust_values_length() (idmtools.builders.arm_simulation_builder.SweepArm method) all_files() (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) analyze() (idmtools.analysis.analyze_manager.AnalyzeManager method) (idmtools.analysis.platform_anaylsis.PlatformAnalysis method) ANALYZE_TIMEOUT (idmtools.analysis.analyze_manager.AnalyzeManager attribute) AnalyzeManager (class in idmtools.analysis.analyze_manager) AnalyzeManager.ItemsNotReady AnalyzeManager.TimeOutException AND (idmtools.core.enums.FilterMode attribute) api_example_url() (idmtools.utils.gitrepo.GitRepo property) append() (idmtools.utils.collections.ParentIterator method) are_requirements_met() (idmtools.entities.iplatform.IPlatform method) arguments() (idmtools.entities.command_line.CommandLine property) ArmSimulationBuilder (class in idmtools.builders.arm_simulation_builder) ArmType (class in idmtools.builders.arm_simulation_builder) as_dict() (in module idmtools.utils.entities) Asset (class in idmtools.assets.asset) asset collection asset_collection_id (idmtools.entities.iworkflow_item.IWorkflowItem attribute) asset_files (idmtools.entities.iworkflow_item.IWorkflowItem attribute) asset_in_directory() (in module idmtools.utils.filters.asset_filters) AssetCollection (class in idmtools.assets.asset_collection) ASSETCOLLECTION (idmtools.core.enums.ItemType attribute) assets (idmtools.assets.asset_collection.AssetCollection attribute) (idmtools.core.interfaces.iassets_enabled.IAssetsEnabled attribute) assets_from_directory() (idmtools.assets.asset_collection.AssetCollection static method) auto_remove_worker_containers (idmtools_platform_local.local_platform.LocalPlatform attribute) autoindex() (in module idmtools_platform_local.internals.ui.app) B base_simulation (idmtools.entities.templated_simulation.TemplatedSimulations attribute) base_task (idmtools.entities.templated_simulation.TemplatedSimulations attribute) base_url (idmtools_platform_local.client.base.BaseClient attribute) BaseAnalyzer (class in idmtools.entities.ianalyzer) BaseClient (class in idmtools_platform_local.client.base) BaseServiceContainer (class in idmtools_platform_local.infrastructure.base_service_container) batch_create() (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) batch_create_items() (in module idmtools.entities.iplatform_ops.utils) batch_items() (in module idmtools.entities.iplatform_ops.utils) batch_size (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) BelowNormal (idmtools_platform_comps.comps_platform.COMPSPriority attribute) branch() (idmtools.utils.gitrepo.GitRepo property) build (idmtools.core.docker_task.DockerTask attribute) build_asset_file_list() (in module idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection) build_image() (idmtools.core.docker_task.DockerTask method) build_path (idmtools.core.docker_task.DockerTask attribute) builder builder() (idmtools.entities.templated_simulation.TemplatedSimulations property) builders (idmtools.entities.templated_simulation.TemplatedSimulations attribute) bytes() (idmtools.assets.asset.Asset property) C cache() (idmtools.core.cache_enabled.CacheEnabled property) cache_directory (idmtools.services.ipersistance_service.IPersistenceService attribute) cache_for() (in module idmtools.utils.decorators) cache_name (idmtools.services.ipersistance_service.IPersistenceService attribute) (idmtools.services.platforms.PlatformPersistService attribute) CacheEnabled (class in idmtools.core.cache_enabled) cancel() (idmtools_platform_local.client.simulations_client.SimulationsClient class method) canceled (idmtools_platform_local.status.Status attribute) checksum() (idmtools.assets.asset.Asset property) (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection property) clean_experiment_name() (in module idmtools_platform_comps.utils.general) cleanup() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) (idmtools_platform_local.local_platform.LocalPlatform method) cleanup_cache() (idmtools.core.cache_enabled.CacheEnabled method) clear() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.services.ipersistance_service.IPersistenceService class method) clear_instance() (idmtools.config.idm_config_parser.IdmConfigParser class method) clear_user_files() (idmtools.entities.iworkflow_item.IWorkflowItem method) clear_wo_args() (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem method) cli_command_type (in module idmtools_platform_local.cli.local) client (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer attribute) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) cmd() (idmtools.entities.command_line.CommandLine property) colorize_status() (in module idmtools_platform_local.cli.utils) command (idmtools.entities.itask.ITask attribute) (idmtools.entities.task_proxy.TaskProxy attribute) (idmtools_platform_comps.ssmt_work_items.comps_workitems.SSMTWorkItem attribute) command() (idmtools_models.python.python_task.PythonTask property) (idmtools_models.r.r_task.RTask property) command_line_argument (idmtools_models.json_configured_task.JSONConfiguredTask attribute) command_line_argument_no_filename (idmtools_models.json_configured_task.JSONConfiguredTask attribute) CommandLine (class in idmtools.entities.command_line) CommandTask (class in idmtools.entities.command_task) CommandTaskSpecification (class in idmtools.entities.command_task) common_assets (idmtools.entities.itask.ITask attribute) comps_batch_worker() (in module idmtools_platform_comps.comps_operations.simulation_operations) CompsCLI (class in idmtools_platform_comps.comps_cli) COMPSCLISpecification (class in idmtools_platform_comps.comps_cli) COMPSPlatform (class in idmtools_platform_comps.comps_platform) CompsPlatformAssetCollectionOperations (class in idmtools_platform_comps.comps_operations.asset_collection_operations) CompsPlatformExperimentOperations (class in idmtools_platform_comps.comps_operations.experiment_operations) CompsPlatformSimulationOperations (class in idmtools_platform_comps.comps_operations.simulation_operations) COMPSPlatformSpecification (class in idmtools_platform_comps.plugin_info) CompsPlatformSuiteOperations (class in idmtools_platform_comps.comps_operations.suite_operations) CompsPlatformWorkflowItemOperations (class in idmtools_platform_comps.comps_operations.workflow_item_operations) COMPSPriority (class in idmtools_platform_comps.comps_platform) config_file_name (idmtools_models.json_configured_task.JSONConfiguredTask attribute) config_prefix (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer attribute) (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) configfile_argument (idmtools_models.python.json_python_task.JSONConfiguredPythonTask attribute) (idmtools_models.r.json_r_task.JSONConfiguredRTask attribute) consolidate_requirements() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) container_name (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer attribute) (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) container_status_text() (in module idmtools_platform_local.cli.local) content() (idmtools.assets.asset.Asset property) convert_comps_status() (in module idmtools_platform_comps.utils.general) convert_comps_workitem_status() (in module idmtools_platform_comps.utils.general) copy_multiple_to_container() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) copy_simulation() (idmtools.entities.itask.ITask method) copy_to_container() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) count() (idmtools.assets.asset_collection.AssetCollection property) create() (idmtools.core.experiment_factory.ExperimentFactory method) (idmtools.core.task_factory.TaskFactory method) (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) (idmtools_platform_local.infrastructure.postgres.PostgresContainer method) (idmtools_platform_local.infrastructure.workers.WorkersContainer method) create_archive_from_bytes() (idmtools_platform_local.infrastructure.docker_io.DockerIO static method) create_db() (in module idmtools_platform_local.internals.workers.database) create_directory() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) create_items() (idmtools.entities.iplatform.IPlatform method) create_or_update_status() (in module idmtools_platform_local.internals.workers.utils) create_postgres_volume() (idmtools_platform_local.infrastructure.postgres.PostgresContainer method) create_services() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) CREATED (idmtools.core.enums.EntityStatus attribute) Created (idmtools.entities.relation_type.RelationType attribute) created (idmtools_platform_local.internals.data.job_status.JobStatus attribute) (idmtools_platform_local.status.Status attribute) cross (idmtools.builders.arm_simulation_builder.ArmType attribute) CSVAnalyzer (class in idmtools.analysis.csv_analyzer) CsvExperimentBuilder (class in idmtools.builders.csv_simulation_builder) cut_iterable_to() (in module idmtools.utils.collections) cwd (idmtools.core.system_information.SystemInformation attribute) D data_directory (idmtools.core.system_information.SystemInformation attribute) data_path (idmtools_platform_local.internals.data.job_status.JobStatus attribute) data_volume_name (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) DateTimeEncoder (class in idmtools_platform_local.internals.ui.utils) debug_api (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) default() (idmtools.utils.json.DefaultEncoder method) (idmtools.utils.json.IDMJSONEncoder method) (idmtools_platform_comps.utils.disk_usage.DiskEncoder method) (idmtools_platform_local.internals.ui.utils.DateTimeEncoder method) default_asset_file_filter() (in module idmtools.utils.filters.asset_filters) default_docket_socket_path (idmtools.core.system_information.SystemInformation attribute) (idmtools.core.system_information.WindowsSystemInformation attribute) DEFAULT_KEY (idmtools.core.experiment_factory.ExperimentFactory attribute) (idmtools.core.task_factory.TaskFactory attribute) default_timeout (idmtools_platform_local.local_platform.LocalPlatform attribute) DefaultEncoder (class in idmtools.utils.json) delete() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.services.ipersistance_service.IPersistenceService class method) (idmtools_platform_local.client.base.BaseClient class method) (idmtools_platform_local.client.experiments_client.ExperimentsClient class method) (idmtools_platform_local.client.healthcheck_client.HealthcheckClient class method) (idmtools_platform_local.internals.ui.controllers.experiments.Experiments method) delete_files_below_level() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) DependsOn (idmtools.entities.relation_type.RelationType attribute) dequeue() (idmtools.core.logging.IDMQueueListener method) description (idmtools.entities.suite.Suite attribute) (idmtools.registry.plugin_specification.ProjectTemplate attribute) destroy() (idmtools.entities.ianalyzer.IAnalyzer method) DictDisplaySetting (class in idmtools.utils.display.displays) discover_plugins_from (in module idmtools.registry.utils) DiskEncoder (class in idmtools_platform_comps.utils.disk_usage) DiskSpaceUsage (class in idmtools_platform_comps.utils.disk_usage) display() (idmtools.core.interfaces.iitem.IItem method) (idmtools.entities.experiment.Experiment method) (idmtools.entities.suite.Suite method) (idmtools.entities.templated_simulation.TemplatedSimulations method) (idmtools.utils.display.displays.DictDisplaySetting method) (idmtools.utils.display.displays.IDisplaySetting method) (idmtools.utils.display.displays.StringDisplaySetting method) (idmtools.utils.display.displays.TableDisplay method) (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) (in module idmtools.utils.display) display_config_block_details() (idmtools.config.idm_config_parser.IdmConfigParser class method) display_config_path() (idmtools.config.idm_config_parser.IdmConfigParser class method) do (idmtools_platform_local.cli.local.LocalCliContext attribute) DOCKER (idmtools.entities.platform_requirements.PlatformRequirements attribute) docker_image (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) (idmtools_platform_comps.ssmt_work_items.comps_workitems.SSMTWorkItem attribute) Dockerfile (idmtools.core.docker_task.DockerTask attribute) DockerIO (class in idmtools_platform_local.infrastructure.docker_io) DockerServiceManager (class in idmtools_platform_local.infrastructure.service_manager) DockerTask (class in idmtools.core.docker_task) DockerTaskSpecification (class in idmtools.core.docker_task) done (idmtools_platform_local.status.Status attribute) done() (idmtools.core.interfaces.ientity.IEntity property) (idmtools.entities.experiment.Experiment property) (idmtools.entities.suite.Suite property) download() (idmtools.utils.gitrepo.GitRepo method) download_generator() (idmtools.assets.asset.Asset method) download_generator_hook (idmtools.assets.asset.Asset attribute) download_lp_file() (in module idmtools_platform_local.platform_operations.uitils) download_stream() (idmtools.assets.asset.Asset method) download_to_path() (idmtools.assets.asset.Asset method) DownloadAnalyzer (class in idmtools.analysis.download_analyzer) duplicate_list_of_generators() (in module idmtools.utils.collections) DuplicatedAssetError DynamicTaskSpecification (class in idmtools.core.task_factory) E endpoint (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) (idmtools_platform_local.internals.ui.controllers.experiments.Experiments attribute) (idmtools_platform_local.internals.ui.controllers.healthcheck.HealthCheck attribute) (idmtools_platform_local.internals.ui.controllers.simulations.Simulations attribute) ensure_container_is_running() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer static method) ensure_created() (idmtools.utils.decorators.LoadOnCallSingletonDecorator method) ensure_init() (idmtools.config.idm_config_parser.IdmConfigParser class method) EntityContainer (class in idmtools.core.interfaces.entity_container) EntityStatus (class in idmtools.core.enums) envelope (idmtools_models.json_configured_task.JSONConfiguredTask attribute) environment (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) environment_list() (in module idmtools_platform_comps.cli.cli_functions) environment_variables (idmtools.core.system_information.SystemInformation attribute) example_configuration() (idmtools.registry.platform_specification.PlatformSpecification method) (idmtools_platform_comps.plugin_info.COMPSPlatformSpecification method) (idmtools_platform_comps.plugin_info.SSMTPlatformSpecification method) (idmtools_platform_local.plugin_info.LocalPlatformSpecification method) EXCEPTION_KEY (idmtools.analysis.analyze_manager.AnalyzeManager attribute) exclude_logging_classes() (in module idmtools.core.logging) exclusive (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) executable() (idmtools.entities.command_line.CommandLine property) exp_str() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) experiment Experiment (class in idmtools.entities.experiment) EXPERIMENT (idmtools.core.enums.ItemType attribute) experiment() (idmtools.entities.simulation.Simulation property) experiment_filter() (in module idmtools_platform_local.internals.ui.controllers.experiments) ExperimentDict (class in idmtools_platform_local.platform_operations.uitils) ExperimentFactory (class in idmtools.core.experiment_factory) ExperimentInfo (class in idmtools_platform_comps.utils.disk_usage) ExperimentNotFound ExperimentPlugins (class in idmtools.registry.experiment_specification) ExperimentPluginSpecification (class in idmtools.registry.experiment_specification) Experiments (class in idmtools_platform_local.internals.ui.controllers.experiments) experiments (idmtools.entities.suite.Suite attribute) ExperimentsClient (class in idmtools_platform_local.client.experiments_client) ExperimentSpecification (class in idmtools.entities.experiment) extend() (idmtools.assets.asset_collection.AssetCollection method) extension() (idmtools.assets.asset.Asset property) extra_command_arguments (idmtools_models.templated_script_task.TemplatedScriptTask attribute) extra_commands() (in module idmtools_platform_local.cli.experiment) extra_details (idmtools_platform_local.internals.data.job_status.JobStatus attribute) extra_libraries (idmtools_models.r.r_task.RTask attribute) F FAILED (idmtools.core.enums.EntityStatus attribute) failed (idmtools_platform_local.status.Status attribute) fatal_code() (in module idmtools_platform_comps.utils.general) file_contents_to_generator() (in module idmtools.utils.file) file_extension_is() (in module idmtools.utils.filters.asset_filters) file_name_is() (in module idmtools.utils.filters.asset_filters) FileList (class in idmtools.assets.file_list) filename (idmtools.assets.asset.Asset attribute) FileParser (class in idmtools.utils.file_parser) filter() (idmtools.analysis.add_analyzer.AddAnalyzer method) (idmtools.entities.ianalyzer.IAnalyzer method) filter_item() (idmtools.utils.filter_simulations.FilterItem static method) filter_item_by_id() (idmtools.utils.filter_simulations.FilterItem class method) FilterItem (class in idmtools.utils.filter_simulations) FilterMode (class in idmtools.core.enums) find_index_of_asset() (idmtools.assets.asset_collection.AssetCollection method) flatten_item() (idmtools.entities.iplatform.IPlatform method) found_ini() (idmtools.config.idm_config_parser.IdmConfigParser class method) from_builder() (idmtools.entities.experiment.Experiment class method) from_directory() (idmtools.assets.asset_collection.AssetCollection class method) from_experiment() (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations static method) from_id() (idmtools.core.interfaces.ientity.IEntity class method) (idmtools.entities.experiment.Experiment class method) from_task() (idmtools.entities.experiment.Experiment class method) (idmtools.entities.simulation.Simulation class method) (idmtools.entities.task_proxy.TaskProxy static method) (idmtools.entities.templated_simulation.TemplatedSimulations class method) from_template() (idmtools.entities.experiment.Experiment class method) frozen (idmtools.entities.experiment.Experiment attribute) G gather_all_assets() (idmtools.entities.itask.ITask method) gather_assets() (idmtools.core.interfaces.iassets_enabled.IAssetsEnabled method) (idmtools.entities.experiment.Experiment method) (idmtools.entities.iworkflow_item.IWorkflowItem method) (idmtools.entities.simulation.Simulation method) gather_common_asset_hooks (idmtools.entities.command_task.CommandTask attribute) (idmtools_models.templated_script_task.TemplatedScriptTask attribute) gather_common_assets() (idmtools.core.docker_task.DockerTask method) (idmtools.entities.command_task.CommandTask method) (idmtools.entities.itask.ITask method) (idmtools_models.json_configured_task.JSONConfiguredTask method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTask method) (idmtools_models.python.python_task.PythonTask method) (idmtools_models.r.json_r_task.JSONConfiguredRTask method) (idmtools_models.r.r_task.RTask method) (idmtools_models.templated_script_task.ScriptWrapperTask method) (idmtools_models.templated_script_task.TemplatedScriptTask method) gather_common_assets_from_task (idmtools.entities.experiment.Experiment attribute) gather_experiment_info() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) gather_transient_asset_hooks (idmtools.entities.command_task.CommandTask attribute) (idmtools_models.templated_script_task.TemplatedScriptTask attribute) gather_transient_assets() (idmtools.core.docker_task.DockerTask method) (idmtools.entities.command_task.CommandTask method) (idmtools.entities.itask.ITask method) (idmtools_models.json_configured_task.JSONConfiguredTask method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTask method) (idmtools_models.python.python_task.PythonTask method) (idmtools_models.r.json_r_task.JSONConfiguredRTask method) (idmtools_models.r.r_task.RTask method) (idmtools_models.templated_script_task.ScriptWrapperTask method) (idmtools_models.templated_script_task.TemplatedScriptTask method) GenericWorkItem (class in idmtools.entities.generic_workitem) get() (idmtools.core.docker_task.DockerTaskSpecification method) (idmtools.core.task_factory.DynamicTaskSpecification method) (idmtools.entities.command_task.CommandTaskSpecification method) (idmtools.entities.experiment.ExperimentSpecification method) (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools.registry.experiment_specification.ExperimentPluginSpecification method) (idmtools.registry.platform_specification.PlatformSpecification method) (idmtools.registry.task_specification.TaskSpecification method) (idmtools_models.json_configured_task.JSONConfiguredTaskSpecification method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTaskSpecification method) (idmtools_models.python.python_task.PythonTaskSpecification method) (idmtools_models.r.json_r_task.JSONConfiguredRTaskSpecification method) (idmtools_models.r.r_task.RTaskSpecification method) (idmtools_models.templated_script_task.ScriptWrapperTaskSpecification method) (idmtools_models.templated_script_task.TemplatedScriptTaskSpecification method) (idmtools_platform_comps.comps_cli.COMPSCLISpecification method) (idmtools_platform_comps.comps_operations.asset_collection_operations.CompsPlatformAssetCollectionOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_comps.plugin_info.COMPSPlatformSpecification method) (idmtools_platform_comps.plugin_info.SSMTPlatformSpecification method) (idmtools_platform_local.client.base.BaseClient class method) (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) (idmtools_platform_local.internals.ui.controllers.experiments.Experiments method) (idmtools_platform_local.internals.ui.controllers.healthcheck.HealthCheck method) (idmtools_platform_local.internals.ui.controllers.simulations.Simulations method) (idmtools_platform_local.local_cli.LocalCLISpecification method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) (idmtools_platform_local.plugin_info.LocalPlatformSpecification method) get_additional_commands() (idmtools_platform_comps.comps_cli.COMPSCLISpecification method) (idmtools_platform_local.local_cli.LocalCLISpecification method) get_all() (idmtools_platform_local.client.experiments_client.ExperimentsClient class method) (idmtools_platform_local.client.healthcheck_client.HealthcheckClient class method) (idmtools_platform_local.client.simulations_client.SimulationsClient class method) get_all_experiments_for_user() (in module idmtools_platform_comps.utils.lookups) get_api_path() (in module idmtools_platform_local.config) get_asset_collection_from_comps_simulation() (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) get_asset_for_comps_item() (in module idmtools_platform_comps.utils.general) get_assets() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_comps.ssmt_operations.simulation_operations.SSMTPlatformSimulationOperations method) (idmtools_platform_comps.ssmt_operations.workflow_item_operations.SSMTPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) get_assets_from_comps_experiment() (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) get_base_work_order() (idmtools_platform_comps.ssmt_work_items.comps_workitems.SSMTWorkItem method) (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem method) get_cache_key() (idmtools.entities.iplatform.IPlatform method) get_caller() (idmtools.entities.iplatform.IPlatform static method) get_children() (idmtools.entities.iplatform.IPlatform method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) get_children_by_object() (idmtools.entities.iplatform.IPlatform method) get_common_config() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer static method) get_comps_ssmt_image_name() (idmtools_platform_comps.ssmt_work_items.comps_workitems.SSMTWorkItem method) get_config_path() (idmtools.config.idm_config_parser.IdmConfigParser class method) get_configuration() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) (idmtools_platform_local.infrastructure.postgres.PostgresContainer method) (idmtools_platform_local.infrastructure.redis.RedisContainer method) (idmtools_platform_local.infrastructure.workers.WorkersContainer method) get_container_config() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) get_current_user() (in module idmtools.utils.dropbox_location) get_data() (in module idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection) get_data_directory() (in module idmtools.core.system_information) get_dataclass_common_fields() (in module idmtools.utils.entities) get_db() (in module idmtools_platform_local.internals.workers.database) get_default_tags() (in module idmtools.utils.entities) get_description() (idmtools.core.docker_task.DockerTaskSpecification method) (idmtools.core.task_factory.DynamicTaskSpecification method) (idmtools.entities.command_task.CommandTaskSpecification method) (idmtools.entities.experiment.ExperimentSpecification method) (idmtools.registry.plugin_specification.PluginSpecification method) (idmtools_models.json_configured_task.JSONConfiguredTaskSpecification method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTaskSpecification method) (idmtools_models.python.python_task.PythonTaskSpecification method) (idmtools_models.r.json_r_task.JSONConfiguredRTaskSpecification method) (idmtools_models.r.r_task.RTaskSpecification method) (idmtools_models.templated_script_task.ScriptWrapperTaskSpecification method) (idmtools_models.templated_script_task.TemplatedScriptTaskSpecification method) (idmtools_platform_comps.comps_cli.COMPSCLISpecification method) (idmtools_platform_comps.plugin_info.COMPSPlatformSpecification method) (idmtools_platform_comps.plugin_info.SSMTPlatformSpecification method) (idmtools_platform_local.local_cli.LocalCLISpecification method) (idmtools_platform_local.plugin_info.LocalPlatformSpecification method) get_dropbox_location() (in module idmtools.utils.dropbox_location) get_example_urls() (idmtools.entities.command_task.CommandTaskSpecification method) (idmtools.registry.plugin_specification.PluginSpecification method) (idmtools_models.json_configured_task.JSONConfiguredTaskSpecification method) (idmtools_models.python.python_task.PythonTaskSpecification method) (idmtools_models.r.json_r_task.JSONConfiguredRTaskSpecification method) (idmtools_models.templated_script_task.ScriptWrapperTaskSpecification method) (idmtools_models.templated_script_task.TemplatedScriptTaskSpecification method) (idmtools_platform_comps.plugin_info.COMPSPlatformSpecification method) (idmtools_platform_comps.plugin_info.SSMTPlatformSpecification method) get_experiment_by_id() (in module idmtools_platform_comps.utils.lookups) get_experiment_info() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) get_experiment_status() (idmtools_platform_comps.comps_cli.CompsCLI method) (idmtools_platform_local.local_cli.LocalCLI method) get_file_as_generator() (in module idmtools_platform_comps.utils.general) get_file_from_collection() (in module idmtools_platform_comps.utils.general) get_files() (idmtools.entities.iplatform.IPlatform method) get_files_by_id() (idmtools.entities.iplatform.IPlatform method) get_filtered_environment_vars() (in module idmtools.core.system_information) get_first_simulation_of_experiment() (in module idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection) get_help_urls() (idmtools.registry.plugin_specification.PluginSpecification method) get_host_data_bind() (in module idmtools_platform_local.internals.workers.utils) get_item() (idmtools.entities.iplatform.IPlatform method) get_latest_package_version_from_artifactory() (in module idmtools_platform_comps.utils.package_version) get_latest_package_version_from_pypi() (in module idmtools_platform_comps.utils.package_version) get_latest_ssmt_image_version_from_artifactory() (in module idmtools_platform_comps.utils.package_version) get_latest_version() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection static method) get_latest_version_from_site() (in module idmtools_platform_comps.utils.package_version) get_logs() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) get_max_values_count() (idmtools.builders.arm_simulation_builder.SweepArm method) get_name() (idmtools.registry.experiment_specification.ExperimentPluginSpecification class method) (idmtools.registry.platform_specification.PlatformSpecification class method) (idmtools.registry.plugin_specification.PluginSpecification class method) (idmtools.registry.task_specification.TaskSpecification class method) get_network() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) get_object() (idmtools.utils.display.displays.IDisplaySetting method) get_one() (idmtools.assets.asset_collection.AssetCollection method) (idmtools_platform_local.client.experiments_client.ExperimentsClient class method) (idmtools_platform_local.client.healthcheck_client.HealthcheckClient class method) (idmtools_platform_local.client.simulations_client.SimulationsClient class method) get_option() (idmtools.config.idm_config_parser.IdmConfigParser class method) get_or_create() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) (in module idmtools_platform_local.internals.workers.database) get_packages_from_pip() (in module idmtools.utils.info) get_packages_list() (in module idmtools.utils.info) get_parameter() (idmtools_models.json_configured_task.JSONConfiguredTask method) get_parent() (idmtools.entities.iplatform.IPlatform method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) get_parent_by_object() (idmtools.entities.iplatform.IPlatform method) get_pip_packages_10_to_6() (in module idmtools.utils.info) get_pip_packages_10_to_current() (in module idmtools.utils.info) get_pip_packages_6_to_9() (in module idmtools.utils.info) get_platform_information() (idmtools_platform_comps.comps_cli.CompsCLI method) (idmtools_platform_local.local_cli.LocalCLI method) get_platform_object() (idmtools.core.interfaces.ientity.IEntity method) get_plugin_map() (idmtools.registry.experiment_specification.ExperimentPlugins method) (idmtools.registry.master_plugin_registry.MasterPluginRegistry method) (idmtools.registry.platform_specification.PlatformPlugins method) (idmtools.registry.task_specification.TaskPlugins method) get_plugins() (idmtools.registry.experiment_specification.ExperimentPlugins method) (idmtools.registry.master_plugin_registry.MasterPluginRegistry method) (idmtools.registry.platform_specification.PlatformPlugins method) (idmtools.registry.task_specification.TaskPlugins method) get_project_templates() (idmtools.registry.plugin_specification.PluginSpecification method) get_qualified_class_name() (in module idmtools.utils.language) get_qualified_class_name_from_obj() (in module idmtools.utils.language) get_related_items() (idmtools.entities.iplatform.IPlatform method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) get_results() (idmtools.utils.decorators.ParallelizeDecorator method) get_script_wrapper_task() (in module idmtools_models.templated_script_task) get_script_wrapper_unix_task() (in module idmtools_models.templated_script_task) get_script_wrapper_windows_task() (in module idmtools_models.templated_script_task) get_section() (idmtools.config.idm_config_parser.IdmConfigParser class method) get_service_info() (in module idmtools_platform_local.cli.utils) get_session() (in module idmtools_platform_local.internals.workers.database) get_sim_folder() (idmtools.analysis.download_analyzer.DownloadAnalyzer method) get_simulation_by_id() (in module idmtools_platform_comps.utils.lookups) get_simulation_config_from_simulation() (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations static method) get_simulation_status() (idmtools_platform_comps.comps_cli.CompsCLI method) (idmtools_platform_local.local_cli.LocalCLI method) get_simulations_from_big_experiments() (in module idmtools_platform_comps.utils.lookups) get_system_information() (in module idmtools.core.system_information) get_type() (idmtools.core.docker_task.DockerTaskSpecification method) (idmtools.core.task_factory.DynamicTaskSpecification method) (idmtools.entities.command_task.CommandTaskSpecification method) (idmtools.entities.experiment.ExperimentSpecification method) (idmtools.registry.experiment_specification.ExperimentPluginSpecification method) (idmtools.registry.platform_specification.PlatformSpecification method) (idmtools.registry.task_specification.TaskSpecification method) (idmtools_models.json_configured_task.JSONConfiguredTaskSpecification method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTaskSpecification method) (idmtools_models.python.python_task.PythonTaskSpecification method) (idmtools_models.r.json_r_task.JSONConfiguredRTaskSpecification method) (idmtools_models.r.r_task.RTaskSpecification method) (idmtools_models.templated_script_task.ScriptWrapperTaskSpecification method) (idmtools_models.templated_script_task.TemplatedScriptTaskSpecification method) (idmtools_platform_comps.plugin_info.COMPSPlatformSpecification method) (idmtools_platform_comps.plugin_info.SSMTPlatformSpecification method) (idmtools_platform_local.plugin_info.LocalPlatformSpecification method) get_version_url() (idmtools.registry.plugin_specification.PluginSpecification static method) get_work_item() (idmtools.analysis.platform_anaylsis.PlatformAnalysis method) get_worker_image_default() (in module idmtools_platform_local.infrastructure.workers) GitRepo (class in idmtools.utils.gitrepo) GPU (idmtools.entities.platform_requirements.PlatformRequirements attribute) H handle_backoff_exc() (in module idmtools_platform_local.internals.ui.controllers.experiments) handle_starttag() (idmtools_platform_comps.utils.package_version.LinkHTMLParser method) handler (idmtools.assets.asset.Asset attribute) has_asset() (idmtools.assets.asset_collection.AssetCollection method) has_option() (idmtools.config.idm_config_parser.IdmConfigParser class method) has_section() (idmtools.config.idm_config_parser.IdmConfigParser class method) hash() (idmtools.utils.hashing.Hasher method) hash_obj() (in module idmtools.utils.hashing) Hasher (class in idmtools.utils.hashing) HealthCheck (class in idmtools_platform_local.internals.ui.controllers.healthcheck) HealthcheckClient (class in idmtools_platform_local.client.healthcheck_client) heartbeat_timeout (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) high-performance computing (HPC) Highest (idmtools_platform_comps.comps_platform.COMPSPriority attribute) host_data_directory (idmtools_platform_local.infrastructure.docker_io.DockerIO attribute) (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) hostname (idmtools.core.system_information.SystemInformation attribute) I IAnalyzer (class in idmtools.entities.ianalyzer) IAssetsEnabled (class in idmtools.core.interfaces.iassets_enabled) ICOMPSWorkflowItem (class in idmtools_platform_comps.ssmt_work_items.icomps_workflowitem) id() (idmtools.core.interfaces.iitem.IItem property) IDisplaySetting (class in idmtools.utils.display.displays) IdmConfigParser (class in idmtools.config.idm_config_parser) IDMJSONEncoder (class in idmtools.utils.json) IDMQueueHandler (class in idmtools.core.logging) IDMQueueListener (class in idmtools.core.logging) idmtools (module) idmtools.analysis (module) idmtools.analysis.add_analyzer (module) idmtools.analysis.analyze_manager (module) idmtools.analysis.csv_analyzer (module) idmtools.analysis.download_analyzer (module) idmtools.analysis.map_worker_entry (module) idmtools.analysis.platform_analysis_bootstrap (module) idmtools.analysis.platform_anaylsis (module) idmtools.analysis.tags_analyzer (module) idmtools.assets (module) idmtools.assets.asset (module) idmtools.assets.asset_collection (module) idmtools.assets.content_handlers (module) idmtools.assets.errors (module) idmtools.assets.file_list (module) idmtools.builders (module) idmtools.builders.arm_simulation_builder (module) idmtools.builders.csv_simulation_builder (module) idmtools.builders.simulation_builder (module) idmtools.builders.yaml_simulation_builder (module) idmtools.config (module) idmtools.config.idm_config_parser (module) idmtools.core (module) idmtools.core.cache_enabled (module) idmtools.core.context (module) idmtools.core.docker_task (module) idmtools.core.enums (module) idmtools.core.exceptions (module) idmtools.core.experiment_factory (module) idmtools.core.interfaces (module) idmtools.core.interfaces.entity_container (module) idmtools.core.interfaces.iassets_enabled (module) idmtools.core.interfaces.ientity (module) idmtools.core.interfaces.iitem (module) idmtools.core.interfaces.inamed_entity (module) idmtools.core.logging (module) idmtools.core.platform_factory (module) idmtools.core.system_information (module) idmtools.core.task_factory (module) idmtools.entities (module) idmtools.entities.command_line (module) idmtools.entities.command_task (module) idmtools.entities.experiment (module) idmtools.entities.generic_workitem (module) idmtools.entities.ianalyzer (module) idmtools.entities.iplatform (module) idmtools.entities.iplatform_ops (module) idmtools.entities.iplatform_ops.iplatform_asset_collection_operations (module) idmtools.entities.iplatform_ops.iplatform_experiment_operations (module) idmtools.entities.iplatform_ops.iplatform_simulation_operations (module) idmtools.entities.iplatform_ops.iplatform_suite_operations (module) idmtools.entities.iplatform_ops.iplatform_workflowitem_operations (module) idmtools.entities.iplatform_ops.utils (module) idmtools.entities.itask (module) idmtools.entities.iworkflow_item (module) idmtools.entities.platform_requirements (module) idmtools.entities.relation_type (module) idmtools.entities.simulation (module) idmtools.entities.suite (module) idmtools.entities.task_proxy (module) idmtools.entities.templated_simulation (module) idmtools.registry (module) idmtools.registry.experiment_specification (module) idmtools.registry.master_plugin_registry (module) idmtools.registry.platform_specification (module) idmtools.registry.plugin_specification (module) idmtools.registry.task_specification (module) idmtools.registry.utils (module) idmtools.services (module) idmtools.services.ipersistance_service (module) idmtools.services.platforms (module) idmtools.utils (module) idmtools.utils.collections (module) idmtools.utils.command_line (module) idmtools.utils.decorators (module) idmtools.utils.display (module) idmtools.utils.display.displays (module) idmtools.utils.display.settings (module) idmtools.utils.dropbox_location (module) idmtools.utils.entities (module) idmtools.utils.file (module) idmtools.utils.file_parser (module) idmtools.utils.filter_simulations (module) idmtools.utils.filters (module) idmtools.utils.filters.asset_filters (module) idmtools.utils.gitrepo (module) idmtools.utils.hashing (module) idmtools.utils.info (module) idmtools.utils.json (module) idmtools.utils.language (module) idmtools.utils.local_os (module) idmtools.utils.time (module) idmtools_models (module) idmtools_models.json_configured_task (module) idmtools_models.python (module) idmtools_models.python.json_python_task (module) idmtools_models.python.python_task (module) idmtools_models.r (module) idmtools_models.r.json_r_task (module) idmtools_models.r.r_task (module) idmtools_models.templated_script_task (module) idmtools_platform_comps (module) idmtools_platform_comps.cli (module) idmtools_platform_comps.cli.cli_functions (module) idmtools_platform_comps.cli.comps (module) idmtools_platform_comps.cli.utils (module) idmtools_platform_comps.comps_cli (module) idmtools_platform_comps.comps_operations (module) idmtools_platform_comps.comps_operations.asset_collection_operations (module) idmtools_platform_comps.comps_operations.experiment_operations (module) idmtools_platform_comps.comps_operations.simulation_operations (module) idmtools_platform_comps.comps_operations.suite_operations (module) idmtools_platform_comps.comps_operations.workflow_item_operations (module) idmtools_platform_comps.comps_platform (module) idmtools_platform_comps.plugin_info (module) idmtools_platform_comps.ssmt_operations (module) idmtools_platform_comps.ssmt_operations.simulation_operations (module) idmtools_platform_comps.ssmt_operations.workflow_item_operations (module) idmtools_platform_comps.ssmt_platform (module) idmtools_platform_comps.ssmt_work_items (module) idmtools_platform_comps.ssmt_work_items.comps_workitems (module) idmtools_platform_comps.ssmt_work_items.icomps_workflowitem (module) idmtools_platform_comps.utils (module) idmtools_platform_comps.utils.disk_usage (module) idmtools_platform_comps.utils.general (module) idmtools_platform_comps.utils.lookups (module) idmtools_platform_comps.utils.package_version (module) idmtools_platform_comps.utils.python_requirements_ac (module) idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection (module) idmtools_platform_comps.utils.python_requirements_ac.install_requirements (module) idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection (module) idmtools_platform_comps.utils.python_version (module) idmtools_platform_local (module) idmtools_platform_local.cli (module) idmtools_platform_local.cli.experiment (module) idmtools_platform_local.cli.local (module) idmtools_platform_local.cli.simulation (module) idmtools_platform_local.cli.utils (module) idmtools_platform_local.client (module) idmtools_platform_local.client.base (module) idmtools_platform_local.client.experiments_client (module) idmtools_platform_local.client.healthcheck_client (module) idmtools_platform_local.client.simulations_client (module) idmtools_platform_local.config (module) idmtools_platform_local.infrastructure (module) idmtools_platform_local.infrastructure.base_service_container (module) idmtools_platform_local.infrastructure.docker_io (module) idmtools_platform_local.infrastructure.postgres (module) idmtools_platform_local.infrastructure.redis (module) idmtools_platform_local.infrastructure.service_manager (module) idmtools_platform_local.infrastructure.workers (module) idmtools_platform_local.internals (module) idmtools_platform_local.internals.data (module) idmtools_platform_local.internals.data.job_status (module) idmtools_platform_local.internals.ui (module) idmtools_platform_local.internals.ui.app (module) idmtools_platform_local.internals.ui.config (module) idmtools_platform_local.internals.ui.controllers (module) idmtools_platform_local.internals.ui.controllers.experiments (module) idmtools_platform_local.internals.ui.controllers.healthcheck (module) idmtools_platform_local.internals.ui.controllers.simulations (module) idmtools_platform_local.internals.ui.controllers.utils (module) idmtools_platform_local.internals.ui.utils (module) idmtools_platform_local.internals.workers (module) idmtools_platform_local.internals.workers.database (module) idmtools_platform_local.internals.workers.run (module) idmtools_platform_local.internals.workers.run_broker (module) idmtools_platform_local.internals.workers.utils (module) idmtools_platform_local.local_cli (module) idmtools_platform_local.local_platform (module) idmtools_platform_local.platform_operations (module) idmtools_platform_local.platform_operations.experiment_operations (module) idmtools_platform_local.platform_operations.simulation_operations (module) idmtools_platform_local.platform_operations.uitils (module) idmtools_platform_local.plugin_info (module) idmtools_platform_local.status (module) IEntity (class in idmtools.core.interfaces.ientity) ignore_fields_in_dataclass_on_pickle() (in module idmtools.utils.hashing) IItem (class in idmtools.core.interfaces.iitem) image (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer attribute) (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) image_name (idmtools.core.docker_task.DockerTask attribute) in_progress (idmtools_platform_local.status.Status attribute) INamedEntity (class in idmtools.core.interfaces.inamed_entity) info (idmtools.registry.plugin_specification.ProjectTemplate attribute) init_services() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) initialization() (in module idmtools.config.idm_config_parser) initialize() (idmtools.analysis.add_analyzer.AddAnalyzer method) (idmtools.analysis.csv_analyzer.CSVAnalyzer method) (idmtools.analysis.download_analyzer.DownloadAnalyzer method) (idmtools.analysis.tags_analyzer.TagsAnalyzer method) (idmtools.entities.ianalyzer.IAnalyzer method) initialize_cache() (idmtools.core.cache_enabled.CacheEnabled method) InputDataWorkItem (class in idmtools_platform_comps.ssmt_work_items.comps_workitems) install_packages_from_requirements() (in module idmtools_platform_comps.utils.python_requirements_ac.install_requirements) IPersistenceService (class in idmtools.services.ipersistance_service) IPlatform (class in idmtools.entities.iplatform) IPlatformAssetCollectionOperations (class in idmtools.entities.iplatform_ops.iplatform_asset_collection_operations) IPlatformExperimentOperations (class in idmtools.entities.iplatform_ops.iplatform_experiment_operations) IPlatformSimulationOperations (class in idmtools.entities.iplatform_ops.iplatform_simulation_operations) IPlatformSuiteOperations (class in idmtools.entities.iplatform_ops.iplatform_suite_operations) IPlatformWorkflowItemOperations (class in idmtools.entities.iplatform_ops.iplatform_workflowitem_operations) is_a_plugin_of_type() (in module idmtools.registry.utils) is_config_common (idmtools_models.json_configured_task.JSONConfiguredTask attribute) is_docker (idmtools.entities.task_proxy.TaskProxy attribute) is_gpu (idmtools.entities.task_proxy.TaskProxy attribute) is_port_open() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager static method) is_task_supported() (idmtools.entities.iplatform.IPlatform method) is_window() (idmtools.utils.local_os.LocalOS static method) ITask (class in idmtools.entities.itask) item_batch_worker_thread() (in module idmtools.entities.iplatform_ops.utils) item_name (idmtools.entities.iworkflow_item.IWorkflowItem attribute) (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem attribute) item_type (idmtools.assets.asset_collection.AssetCollection attribute) (idmtools.core.interfaces.ientity.IEntity attribute) (idmtools.entities.experiment.Experiment attribute) (idmtools.entities.iworkflow_item.IWorkflowItem attribute) (idmtools.entities.simulation.Simulation attribute) (idmtools.entities.suite.Suite attribute) ItemType (class in idmtools.core.enums) IWorkflowItem (class in idmtools.entities.iworkflow_item) J JobStatus (class in idmtools_platform_local.internals.data.job_status) join() (idmtools.utils.decorators.ParallelizeDecorator method) json_handler() (in module idmtools.assets.content_handlers) JSONConfiguredPythonTask (class in idmtools_models.python.json_python_task) JSONConfiguredPythonTaskSpecification (class in idmtools_models.python.json_python_task) JSONConfiguredRTask (class in idmtools_models.r.json_r_task) JSONConfiguredRTaskSpecification (class in idmtools_models.r.json_r_task) JSONConfiguredTask (class in idmtools_models.json_configured_task) JSONConfiguredTaskSpecification (class in idmtools_models.json_configured_task) L launch_created_experiments_in_browser (idmtools_platform_local.local_platform.LocalPlatform attribute) length() (idmtools.assets.asset.Asset property) (idmtools.services.ipersistance_service.IPersistenceService class method) LinkHTMLParser (class in idmtools_platform_comps.utils.package_version) LINUX (idmtools.entities.platform_requirements.PlatformRequirements attribute) LinuxSystemInformation (class in idmtools.core.system_information) list() (idmtools.services.ipersistance_service.IPersistenceService class method) list_assets() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) list_public_repos() (idmtools.utils.gitrepo.GitRepo method) list_repo_releases() (idmtools.utils.gitrepo.GitRepo method) list_static_assets() (idmtools.entities.experiment.Experiment method) (idmtools.entities.simulation.Simulation method) load_bin_file() (idmtools.utils.file_parser.FileParser class method) load_csv_file() (idmtools.utils.file_parser.FileParser class method) load_json_file() (idmtools.utils.file_parser.FileParser class method) (in module idmtools.utils.json) load_plugin_map() (in module idmtools.registry.utils) load_raw_file() (idmtools.utils.file_parser.FileParser class method) load_txt_file() (idmtools.utils.file_parser.FileParser class method) load_work_order() (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem method) load_xlsx_file() (idmtools.utils.file_parser.FileParser class method) LoadOnCallSingletonDecorator (class in idmtools.utils.decorators) local_status_to_common() (in module idmtools_platform_local.platform_operations.uitils) local_wheels (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection attribute) LocalCLI (class in idmtools_platform_local.local_cli) LocalCliContext (class in idmtools_platform_local.cli.local) LocalCLISpecification (class in idmtools_platform_local.local_cli) LocalOS (class in idmtools.utils.local_os) LocalOS.UnknownOS LocalPlatform (class in idmtools_platform_local.local_platform) LocalPlatformExperimentOperations (class in idmtools_platform_local.platform_operations.experiment_operations) LocalPlatformSimulationOperations (class in idmtools_platform_local.platform_operations.simulation_operations) LocalPlatformSpecification (class in idmtools_platform_local.plugin_info) Lowest (idmtools_platform_comps.comps_platform.COMPSPriority attribute) M main() (in module idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection) map() (idmtools.analysis.add_analyzer.AddAnalyzer method) (idmtools.analysis.csv_analyzer.CSVAnalyzer method) (idmtools.analysis.download_analyzer.DownloadAnalyzer method) (idmtools.analysis.tags_analyzer.TagsAnalyzer method) (idmtools.entities.ianalyzer.IAnalyzer method) map_item() (in module idmtools.analysis.map_worker_entry) MasterPluginRegistry (class in idmtools.registry.master_plugin_registry) MAX_SUBDIRECTORY_LENGTH (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) max_workers (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) mediatypes() (idmtools_platform_local.internals.ui.controllers.experiments.Experiments method) (idmtools_platform_local.internals.ui.controllers.healthcheck.HealthCheck method) (idmtools_platform_local.internals.ui.controllers.simulations.Simulations method) mem_limit (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) mem_reservation (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) memoize() (idmtools.utils.hashing.Hasher method) metadata() (idmtools.core.interfaces.iitem.IItem property) metadata_fields() (idmtools.core.interfaces.iitem.IItem property) methods (idmtools_platform_local.internals.ui.controllers.experiments.Experiments attribute) (idmtools_platform_local.internals.ui.controllers.healthcheck.HealthCheck attribute) (idmtools_platform_local.internals.ui.controllers.simulations.Simulations attribute) N name (idmtools.core.interfaces.inamed_entity.INamedEntity attribute) (idmtools.registry.plugin_specification.ProjectTemplate attribute) (idmtools.utils.local_os.LocalOS attribute) NativeBinary (idmtools.entities.platform_requirements.PlatformRequirements attribute) network (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer attribute) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) new_simulation() (idmtools.entities.templated_simulation.TemplatedSimulations method) next_gen() (idmtools.utils.collections.ResetGenerator method) node_group (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) NoPlatformException Normal (idmtools_platform_comps.comps_platform.COMPSPriority attribute) NoTaskFound num_cores (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) num_retries (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) O on_off() (in module idmtools.utils.language) optional_decorator() (in module idmtools.utils.decorators) optional_yaspin_load() (in module idmtools.utils.decorators) options() (idmtools.entities.command_line.CommandLine property) OR (idmtools.core.enums.FilterMode attribute) os_mapping (idmtools.utils.local_os.LocalOS attribute) os_name (idmtools.core.system_information.SystemInformation attribute) OWNERS (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage attribute) P pair (idmtools.builders.arm_simulation_builder.ArmType attribute) parallelize() (idmtools.utils.decorators.ParallelizeDecorator method) ParallelizeDecorator (class in idmtools.utils.decorators) parameters (idmtools_models.json_configured_task.JSONConfiguredTask attribute) parent (idmtools.entities.templated_simulation.TemplatedSimulations attribute) parent() (idmtools.core.interfaces.ientity.IEntity property) parent_id (idmtools.core.interfaces.ientity.IEntity attribute) parent_status_to_progress() (in module idmtools_platform_local.cli.utils) parent_uuid (idmtools_platform_local.internals.data.job_status.JobStatus attribute) ParentIterator (class in idmtools.utils.collections) parse() (idmtools.utils.file_parser.FileParser class method) parse_url() (idmtools.utils.gitrepo.GitRepo method) password (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) path() (idmtools.utils.gitrepo.GitRepo property) path_sep (idmtools_models.templated_script_task.TemplatedScriptTask attribute) path_url (idmtools_platform_local.client.experiments_client.ExperimentsClient attribute) (idmtools_platform_local.client.healthcheck_client.HealthcheckClient attribute) (idmtools_platform_local.client.simulations_client.SimulationsClient attribute) peep() (idmtools.utils.gitrepo.GitRepo method) per_group() (idmtools.entities.ianalyzer.IAnalyzer method) persisted (idmtools.assets.asset.Asset attribute) pickle_ignore_fields() (idmtools.core.interfaces.iitem.IItem property) (idmtools.entities.itask.ITask property) (idmtools.entities.templated_simulation.TemplatedSimulations property) pkg_list (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection attribute) pkg_version (idmtools_platform_comps.utils.package_version.LinkHTMLParser attribute) Platform (class in idmtools.core.platform_factory) platform (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations attribute) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations attribute) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations attribute) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations attribute) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations attribute) (idmtools_platform_comps.comps_operations.asset_collection_operations.CompsPlatformAssetCollectionOperations attribute) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations attribute) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations attribute) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations attribute) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations attribute) (idmtools_platform_comps.ssmt_operations.simulation_operations.SSMTPlatformSimulationOperations attribute) (idmtools_platform_comps.ssmt_operations.workflow_item_operations.SSMTPlatformWorkflowItemOperations attribute) (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection attribute) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations attribute) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations attribute) platform() (idmtools.core.interfaces.ientity.IEntity property) (in module idmtools.core.platform_factory) platform_create() (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.asset_collection_operations.CompsPlatformAssetCollectionOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) platform_id (idmtools.core.interfaces.ientity.IEntity attribute) platform_list_asset() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) platform_requirements (idmtools.entities.experiment.Experiment attribute) (idmtools.entities.itask.ITask attribute) (idmtools_models.python.python_task.PythonTask attribute) platform_run_item() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) platform_task_hooks() (in module idmtools_platform_comps.utils.python_version) platform_type (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations attribute) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations attribute) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations attribute) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations attribute) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations attribute) (idmtools_platform_comps.comps_operations.asset_collection_operations.CompsPlatformAssetCollectionOperations attribute) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations attribute) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations attribute) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations attribute) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations attribute) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations attribute) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations attribute) platform_type_map (idmtools.entities.iplatform.IPlatform attribute) PlatformAnalysis (class in idmtools.analysis.platform_anaylsis) PlatformPersistService (class in idmtools.services.platforms) PlatformPlugins (class in idmtools.registry.platform_specification) PlatformRequirements (class in idmtools.entities.platform_requirements) PlatformSpecification (class in idmtools.registry.platform_specification) plugin_key (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem attribute) plugins_loader() (in module idmtools.registry.utils) PluginSpecification (class in idmtools.registry.plugin_specification) pluralize() (in module idmtools.utils.language) pool_worker_initializer() (in module idmtools.analysis.analyze_manager) pop() (idmtools.assets.asset_collection.AssetCollection method) port (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) post() (idmtools_platform_local.client.base.BaseClient class method) (idmtools_platform_local.client.healthcheck_client.HealthcheckClient class method) post_create() (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) post_creation() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.core.interfaces.ientity.IEntity method) (idmtools.core.interfaces.iitem.IItem method) (idmtools.entities.itask.ITask method) (idmtools.entities.simulation.Simulation method) (idmtools.entities.suite.Suite method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTask method) (idmtools_models.r.json_r_task.JSONConfiguredRTask method) (idmtools_models.templated_script_task.ScriptWrapperTask method) post_run_item() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) post_setstate() (idmtools.core.interfaces.iitem.IItem method) (idmtools.entities.itask.ITask method) (idmtools_platform_comps.comps_platform.COMPSPlatform method) (idmtools_platform_local.local_platform.LocalPlatform method) postgres_image (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) postgres_mem_limit (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) postgres_mem_reservation (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) postgres_port (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) PostgresContainer (class in idmtools_platform_local.infrastructure.postgres) pre_create() (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) pre_creation() (idmtools.assets.asset_collection.AssetCollection method) (idmtools.core.interfaces.iitem.IItem method) (idmtools.entities.experiment.Experiment method) (idmtools.entities.itask.ITask method) (idmtools.entities.iworkflow_item.IWorkflowItem method) (idmtools.entities.simulation.Simulation method) (idmtools.entities.suite.Suite method) (idmtools_models.json_configured_task.JSONConfiguredTask method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTask method) (idmtools_models.python.python_task.PythonTask method) (idmtools_models.r.json_r_task.JSONConfiguredRTask method) (idmtools_models.r.r_task.RTask method) (idmtools_models.templated_script_task.ScriptWrapperTask method) (idmtools_models.templated_script_task.TemplatedScriptTask method) pre_creation_hooks (idmtools.entities.simulation.Simulation attribute) pre_getstate() (idmtools.core.interfaces.iitem.IItem method) (idmtools.entities.experiment.Experiment method) (idmtools.entities.itask.ITask method) (idmtools.entities.simulation.Simulation method) pre_run_item() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) prepare() (idmtools.core.logging.IDMQueueHandler method) prettify_experiment() (in module idmtools_platform_local.cli.experiment) prettify_simulation() (in module idmtools_platform_local.cli.simulation) previous_tag (idmtools_platform_comps.utils.package_version.LinkHTMLParser attribute) print() (idmtools.entities.experiment.Experiment method) priority (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) progress_to_status_str() (in module idmtools_platform_local.internals.ui.controllers.experiments) ProjectTemplate (class in idmtools.registry.plugin_specification) pull_before_build (idmtools.core.docker_task.DockerTask attribute) put() (idmtools_platform_local.client.base.BaseClient class method) (idmtools_platform_local.internals.ui.controllers.simulations.Simulations method) PYTHON (idmtools.entities.platform_requirements.PlatformRequirements attribute) python_build (idmtools.core.system_information.SystemInformation attribute) python_implementation (idmtools.core.system_information.SystemInformation attribute) python_packages (idmtools.core.system_information.SystemInformation attribute) python_path (idmtools_models.python.python_task.PythonTask attribute) python_version (idmtools.core.system_information.SystemInformation attribute) PythonTask (class in idmtools_models.python.python_task) PythonTaskSpecification (class in idmtools_models.python.python_task) R r_path (idmtools_models.r.r_task.RTask attribute) read_templates_from_json_stream() (idmtools.registry.plugin_specification.ProjectTemplate static method) redis_image (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) redis_mem_limit (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) redis_mem_reservation (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) redis_port (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) RedisContainer (class in idmtools_platform_local.infrastructure.redis) reduce() (idmtools.analysis.add_analyzer.AddAnalyzer method) (idmtools.analysis.csv_analyzer.CSVAnalyzer method) (idmtools.analysis.download_analyzer.DownloadAnalyzer method) (idmtools.analysis.tags_analyzer.TagsAnalyzer method) (idmtools.entities.ianalyzer.IAnalyzer method) refresh_simulations() (idmtools.entities.experiment.Experiment method) refresh_simulations_status() (idmtools.entities.experiment.Experiment method) refresh_status() (idmtools.entities.iplatform.IPlatform method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) register() (idmtools.core.task_factory.TaskFactory method) register_stop_logger_signal_handler() (in module idmtools.core.logging) register_task() (idmtools.core.task_factory.TaskFactory method) related_asset_collections (idmtools.entities.iworkflow_item.IWorkflowItem attribute) related_experiments (idmtools.entities.iworkflow_item.IWorkflowItem attribute) related_simulations (idmtools.entities.iworkflow_item.IWorkflowItem attribute) related_suites (idmtools.entities.iworkflow_item.IWorkflowItem attribute) related_work_items (idmtools.entities.iworkflow_item.IWorkflowItem attribute) RelationType (class in idmtools.entities.relation_type) relative_path() (idmtools.assets.asset.Asset property) reload_from_simulation() (idmtools.core.docker_task.DockerTask method) (idmtools.entities.command_task.CommandTask method) (idmtools.entities.itask.ITask method) (idmtools_models.json_configured_task.JSONConfiguredTask method) (idmtools_models.python.json_python_task.JSONConfiguredPythonTask method) (idmtools_models.python.python_task.PythonTask method) (idmtools_models.r.json_r_task.JSONConfiguredRTask method) (idmtools_models.r.r_task.RTask method) (idmtools_models.templated_script_task.ScriptWrapperTask method) (idmtools_models.templated_script_task.TemplatedScriptTask method) remove_current_platform() (in module idmtools.core.context) repo_example_url() (idmtools.utils.gitrepo.GitRepo property) repo_home_url() (idmtools.utils.gitrepo.GitRepo property) repo_name (idmtools.utils.gitrepo.GitRepo attribute) repo_owner (idmtools.utils.gitrepo.GitRepo attribute) requirements() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection property) requirements_path (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection attribute) RequirementsToAssetCollection (class in idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection) reset_db() (in module idmtools_platform_local.internals.workers.database) ResetGenerator (class in idmtools.utils.collections) restart() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) restart_all() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) restart_brokers() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager static method) retrieve() (idmtools.services.ipersistance_service.IPersistenceService class method) retrieve_ac_by_tag() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) retrieve_ac_from_wi() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) retrieve_dict_config_block() (idmtools.config.idm_config_parser.IdmConfigParser class method) retrieve_python_dependencies() (idmtools_models.python.python_task.PythonTask method) retrieve_settings() (idmtools.config.idm_config_parser.IdmConfigParser class method) RTask (class in idmtools_models.r.r_task) RTaskSpecification (class in idmtools_models.r.r_task) run() (idmtools.entities.experiment.Experiment method) (idmtools.entities.iworkflow_item.IWorkflowItem method) (idmtools.entities.suite.Suite method) (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) run_as (idmtools_platform_local.infrastructure.postgres.PostgresContainer attribute) (idmtools_platform_local.infrastructure.redis.RedisContainer attribute) (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) run_experiment_to_install_lib() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) run_item() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) run_items() (idmtools.entities.iplatform.IPlatform method) run_wi_to_create_ac() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) RUNNING (idmtools.core.enums.EntityStatus attribute) runtime (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) S save() (idmtools.services.ipersistance_service.IPersistenceService class method) (idmtools.utils.hashing.Hasher method) save_set() (idmtools.utils.hashing.Hasher method) save_to_file() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) save_updated_requirements() (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) scan_directory() (in module idmtools.utils.file) script_path (idmtools_models.python.python_task.PythonTask attribute) (idmtools_models.r.r_task.RTask attribute) (idmtools_models.templated_script_task.TemplatedScriptTask attribute) ScriptWrapperTask (class in idmtools_models.templated_script_task) ScriptWrapperTaskSpecification (class in idmtools_models.templated_script_task) send_assets() (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) set_all_persisted() (idmtools.assets.asset_collection.AssetCollection method) set_current_platform() (in module idmtools.core.context) set_parameter() (idmtools_models.json_configured_task.JSONConfiguredTask method) set_parameter_partial() (idmtools_models.json_configured_task.JSONConfiguredTask class method) set_parameter_sweep_callback() (idmtools_models.json_configured_task.JSONConfiguredTask static method) set_status() (idmtools.core.interfaces.entity_container.EntityContainer method) set_status_for_item() (idmtools.core.interfaces.entity_container.EntityContainer method) set_tags() (idmtools.assets.asset_collection.AssetCollection method) set_work_order() (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem method) setup_broker() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager static method) setup_handlers() (in module idmtools.core.logging) setup_logging() (in module idmtools.core.logging) SHELL (idmtools.entities.platform_requirements.PlatformRequirements attribute) show_progress_of_batch() (in module idmtools.entities.iplatform_ops.utils) sim_status() (in module idmtools_platform_local.internals.ui.controllers.simulations) Simulation (class in idmtools.entities.simulation) SIMULATION (idmtools.core.enums.ItemType attribute) SIMULATION_ATTR (idmtools.builders.simulation_builder.SimulationBuilder attribute) simulation_count() (idmtools.entities.experiment.Experiment property) simulation_generator() (in module idmtools.entities.templated_simulation) simulation_root (idmtools_platform_comps.comps_platform.COMPSPlatform attribute) SimulationBuilder (class in idmtools.builders.simulation_builder) SimulationDict (class in idmtools_platform_local.platform_operations.uitils) Simulations (class in idmtools_platform_local.internals.ui.controllers.simulations) simulations() (idmtools.entities.experiment.Experiment property) (idmtools.entities.templated_simulation.TemplatedSimulations method) SimulationsClient (class in idmtools_platform_local.client.simulations_client) SingletonDecorator (class in idmtools.utils.decorators) SINGULARITY (idmtools.entities.platform_requirements.PlatformRequirements attribute) sm (idmtools_platform_local.cli.local.LocalCliContext attribute) SSMTPlatform (class in idmtools_platform_comps.ssmt_platform) SSMTPlatformSimulationOperations (class in idmtools_platform_comps.ssmt_operations.simulation_operations) SSMTPlatformSpecification (class in idmtools_platform_comps.plugin_info) SSMTPlatformWorkflowItemOperations (class in idmtools_platform_comps.ssmt_operations.workflow_item_operations) SSMTWorkItem (class in idmtools_platform_comps.ssmt_work_items.comps_workitems) start_db() (in module idmtools_platform_local.internals.ui.config) Status (class in idmtools_platform_local.status) status (idmtools.core.interfaces.ientity.IEntity attribute) (idmtools_platform_local.internals.data.job_status.JobStatus attribute) status() (in module idmtools_platform_local.cli.experiment) (in module idmtools_platform_local.cli.simulation) stop() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer method) stop_service_and_wait() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager static method) stop_services() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) (in module idmtools_platform_local.cli.local) StringDisplaySetting (class in idmtools.utils.display.displays) SUCCEEDED (idmtools.core.enums.EntityStatus attribute) succeeded() (idmtools.core.interfaces.ientity.IEntity property) (idmtools.entities.experiment.Experiment property) (idmtools.entities.suite.Suite property) Suite (class in idmtools.entities.suite) SUITE (idmtools.core.enums.ItemType attribute) suite() (idmtools.entities.experiment.Experiment property) suite_id (idmtools.entities.experiment.Experiment attribute) supported_types (idmtools.entities.iplatform.IPlatform attribute) suppress_output() (in module idmtools.utils.command_line) SweepArm (class in idmtools.builders.arm_simulation_builder) sync_copy() (idmtools_platform_local.infrastructure.docker_io.DockerIO method) system_architecture (idmtools.core.system_information.SystemInformation attribute) system_architecture_details (idmtools.core.system_information.SystemInformation attribute) system_processor (idmtools.core.system_information.SystemInformation attribute) system_version (idmtools.core.system_information.SystemInformation attribute) SystemInformation (class in idmtools.core.system_information) T TableDisplay (class in idmtools.utils.display.displays) tags (idmtools.core.interfaces.ientity.IEntity attribute) (idmtools.entities.generic_workitem.GenericWorkItem attribute) (idmtools.entities.iworkflow_item.IWorkflowItem attribute) (idmtools_platform_local.internals.data.job_status.JobStatus attribute) tags() (idmtools.entities.templated_simulation.TemplatedSimulations property) TagsAnalyzer (class in idmtools.analysis.tags_analyzer) task (idmtools.entities.simulation.Simulation attribute) (idmtools_models.templated_script_task.ScriptWrapperTask attribute) task_type (idmtools.entities.experiment.Experiment attribute) TaskFactory (class in idmtools.core.task_factory) TaskPlugins (class in idmtools.registry.task_specification) TaskProxy (class in idmtools.entities.task_proxy) TaskSpecification (class in idmtools.registry.task_specification) template (idmtools_models.templated_script_task.TemplatedScriptTask attribute) template_file (idmtools_models.templated_script_task.TemplatedScriptTask attribute) template_is_common (idmtools_models.templated_script_task.TemplatedScriptTask attribute) template_script_task (idmtools_models.templated_script_task.ScriptWrapperTask attribute) TemplatedScriptTask (class in idmtools_models.templated_script_task) TemplatedScriptTaskSpecification (class in idmtools_models.templated_script_task) TemplatedSimulations (class in idmtools.entities.templated_simulation) timestamp() (in module idmtools.utils.time) to_comps_sim() (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) to_dict() (idmtools.entities.experiment.Experiment method) (idmtools.entities.itask.ITask method) (idmtools.entities.iworkflow_item.IWorkflowItem method) (idmtools.entities.simulation.Simulation method) (idmtools.entities.suite.Suite method) (idmtools_platform_local.internals.data.job_status.JobStatus method) to_entity() (idmtools.entities.iplatform_ops.iplatform_asset_collection_operations.IPlatformAssetCollectionOperations method) (idmtools.entities.iplatform_ops.iplatform_experiment_operations.IPlatformExperimentOperations method) (idmtools.entities.iplatform_ops.iplatform_simulation_operations.IPlatformSimulationOperations method) (idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations method) (idmtools.entities.iplatform_ops.iplatform_workflowitem_operations.IPlatformWorkflowItemOperations method) (idmtools_platform_comps.comps_operations.asset_collection_operations.CompsPlatformAssetCollectionOperations method) (idmtools_platform_comps.comps_operations.experiment_operations.CompsPlatformExperimentOperations method) (idmtools_platform_comps.comps_operations.simulation_operations.CompsPlatformSimulationOperations method) (idmtools_platform_comps.comps_operations.suite_operations.CompsPlatformSuiteOperations method) (idmtools_platform_comps.comps_operations.workflow_item_operations.CompsPlatformWorkflowItemOperations method) (idmtools_platform_local.platform_operations.experiment_operations.LocalPlatformExperimentOperations method) (idmtools_platform_local.platform_operations.simulation_operations.LocalPlatformSimulationOperations method) to_simulation() (idmtools.entities.itask.ITask method) TOP_COUNT (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage attribute) top_count_experiments() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) top_count_experiments_per_user() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) TopLevelItem total_size_per_user() (idmtools_platform_comps.utils.disk_usage.DiskSpaceUsage static method) transient_assets (idmtools.entities.itask.ITask attribute) U ui_port (idmtools_platform_local.infrastructure.workers.WorkersContainer attribute) uid() (idmtools.assets.asset_collection.AssetCollection property) (idmtools.core.interfaces.iitem.IItem property) UnknownItemException UnsupportedPlatformType update_parameters() (idmtools_models.json_configured_task.JSONConfiguredTask method) update_tags() (idmtools.core.interfaces.ientity.IEntity method) update_work_order() (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem method) updated (idmtools_platform_local.internals.data.job_status.JobStatus attribute) url (idmtools.registry.plugin_specification.ProjectTemplate attribute) urlize_data_path() (in module idmtools_platform_local.cli.utils) use_nvidia_run (idmtools.core.docker_task.DockerTask attribute) user (idmtools.core.system_information.SystemInformation attribute) user_files (idmtools.entities.iworkflow_item.IWorkflowItem attribute) user_group_str (idmtools.core.system_information.SystemInformation attribute) username (idmtools.utils.local_os.LocalOS attribute) uuid (idmtools_platform_local.internals.data.job_status.JobStatus attribute) V validate_args() (idmtools.analysis.platform_anaylsis.PlatformAnalysis method) validate_inputs_types() (idmtools.entities.iplatform.IPlatform method) validate_range() (in module idmtools_platform_comps.cli.cli_functions) validate_tags() (in module idmtools_platform_local.internals.ui.controllers.utils) validate_user_inputs_against_dataclass() (in module idmtools.utils.entities) variables (idmtools_models.templated_script_task.TemplatedScriptTask attribute) verbose() (idmtools.utils.gitrepo.GitRepo property) verbose_timedelta() (in module idmtools.utils.language) version (idmtools.core.system_information.SystemInformation attribute) view_config_file() (idmtools.config.idm_config_parser.IdmConfigParser class method) VisToolsWorkItem (class in idmtools_platform_comps.ssmt_work_items.comps_workitems) W wait() (idmtools.entities.experiment.Experiment method) (idmtools.entities.iworkflow_item.IWorkflowItem method) (idmtools.entities.suite.Suite method) wait_on_ports_to_open() (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager method) wait_on_status() (idmtools_platform_local.infrastructure.base_service_container.BaseServiceContainer static method) wait_till_done() (idmtools.entities.iplatform.IPlatform method) (idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.RequirementsToAssetCollection method) wait_till_done_progress() (idmtools.entities.iplatform.IPlatform method) WAIT_TIME (idmtools.analysis.analyze_manager.AnalyzeManager attribute) WINDOWS (idmtools.entities.platform_requirements.PlatformRequirements attribute) WindowsSystemInformation (class in idmtools.core.system_information) work_item_type (idmtools.entities.iworkflow_item.IWorkflowItem attribute) (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem attribute) work_order (idmtools_platform_comps.ssmt_work_items.comps_workitems.InputDataWorkItem attribute) (idmtools_platform_comps.ssmt_work_items.comps_workitems.VisToolsWorkItem attribute) (idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem attribute) workers_image (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) workers_mem_limit (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) workers_mem_reservation (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) workers_ui_port (idmtools_platform_local.infrastructure.service_manager.DockerServiceManager attribute) (idmtools_platform_local.local_platform.LocalPlatform attribute) WorkersContainer (class in idmtools_platform_local.infrastructure.workers) WORKFLOW_ITEM (idmtools.core.enums.ItemType attribute) Y YamlSimulationBuilder (class in idmtools.builders.yaml_simulation_builder)"}, {"title": "idmtools.analysis.csv_analyzer module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.csv_analyzer.html", "text": "idmtools.analysis.csv_analyzer module \u00b6 class idmtools.analysis.csv_analyzer. CSVAnalyzer ( filenames , parse=True ) \u00b6 Bases: idmtools.entities.ianalyzer.IAnalyzer Provides an analyzer for CSV output Examples Simple Example This example covers the basic usage of the CSVAnalyzer # Example CSVAnalyzer for any experiment # In this example, we will demonstrate how to use a CSVAnalyzer to analyze csv files for experiments # First, import some necessary system and idmtools packages. from logging import getLogger from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.csv_analyzer import CSVAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : # Set the platform where you want to run your analysis # In this case we are running in COMPS since the Work Item we are analyzing was run on COMPS logger = getLogger () with Platform ( 'COMPS2' ) as platform : # Arg option for analyzer init are uid, working_dir, data in the method map (aka select_simulation_data), # and filenames # In this case, we want to provide a filename to analyze filenames = [ 'output/c.csv' ] # Initialize the analyser class with the path of the output csv file analyzers = [ CSVAnalyzer ( filenames = filenames )] # Set the experiment id you want to analyze experiment_id = '9311af40-1337-ea11-a2be-f0921c167861' # staging exp id simple sim and csv example # Specify the id Type, in this case an Experiment on COMPS manager = AnalyzeManager ( configuration = {}, partial_analyze_ok = True , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () Multiple CSVs This example covers analyzing multiple CSVs # Example CSVAnalyzer for any experiment with multiple csv outputs # In this example, we will demonstrate how to use a CSVAnalyzer to analyze csv files for experiments # First, import some necessary system and idmtools packages. from idmtools.analysis.analyze_manager import AnalyzeManager from idmtools.analysis.csv_analyzer import CSVAnalyzer from idmtools.core import ItemType from idmtools.core.platform_factory import Platform if __name__ == '__main__' : # Set the platform where you want to run your analysis # In this case we are running in COMPS since the Work Item we are analyzing was run on COMPS platform = Platform ( 'COMPS2' ) # Arg option for analyzer init are uid, working_dir, data in the method map (aka select_simulation_data), # and filenames # In this case, we have multiple csv files to analyze filenames = [ 'output/a.csv' , 'output/b.csv' ] # Initialize the analyser class with the path of the output csv file analyzers = [ CSVAnalyzer ( filenames = filenames )] # Set the experiment id you want to analyze experiment_id = '1bddce22-0c37-ea11-a2be-f0921c167861' # staging exp id with multiple csv file outputs # Specify the id Type, in this case an Experiment on COMPS manager = AnalyzeManager ( configuration = {}, partial_analyze_ok = True , platform = platform , ids = [( experiment_id , ItemType . EXPERIMENT )], analyzers = analyzers ) manager . analyze () initialize ( ) \u00b6 Call once after the analyzer has been added to the AnalyzeManager . Add everything depending on the working directory or unique ID here instead of in __init__. map ( data , simulation ) \u00b6 In parallel for each simulation, consume raw data from filenames and emit selected data. Parameters data \u2013 A dictionary associating filename with content for simulation data. item \u2013 IItem object that the passed data is associated with. Returns Selected data for the given item. reduce ( all_data ) \u00b6 Combine the map() data for a set of items into an aggregate result. Parameters all_data \u2013 A dictionary with entries for the item ID and selected data."}, {"title": "idmtools.core.interfaces.iassets_enabled module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.iassets_enabled.html", "text": "idmtools.core.interfaces.iassets_enabled module \u00b6 class idmtools.core.interfaces.iassets_enabled. IAssetsEnabled ( assets: idmtools.assets.asset_collection.AssetCollection = <factory> ) \u00b6 Bases: object Base class for objects containing an asset collection. assets : AssetCollection = None \u00b6 abstract gather_assets ( ) \u2192 NoReturn \u00b6 Function called at runtime to gather all assets in the collection. add_assets ( assets: List[TAsset] = None , fail_on_duplicate: bool = True ) \u2192 NoReturn \u00b6 Add more assets to AssetCollection . add_asset ( asset: Optional[TAsset] = None , fail_on_duplicate: bool = True ) \u2192 NoReturn \u00b6"}, {"title": "idmtools_models.r.r_task module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.r.r_task.html", "text": "idmtools_models.r.r_task module \u00b6 class idmtools_models.r.r_task. RTask ( command: Union[str, idmtools.entities.command_line.CommandLine] = None, platform_requirements: Set[idmtools.entities.platform_requirements.PlatformRequirements] = <factory>, _ITask__pre_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, _ITask__post_creation_hooks: List[Callable[[Union[ForwardRef('Simulation'), ForwardRef('IWorkflowItem')]], NoReturn]] = <factory>, common_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, transient_assets: idmtools.assets.asset_collection.AssetCollection = <factory>, _task_log: logging.Logger = <factory>, image_name: str = None, build: bool = False, build_path: Union[str, NoneType] = None, Dockerfile: Union[str, NoneType] = None, pull_before_build: bool = True, use_nvidia_run: bool = False, _DockerTask__image_built: bool = False, script_path: str = None, r_path: str = 'Rscript', extra_libraries: list = <factory> ) \u00b6 Bases: idmtools.core.docker_task.DockerTask script_path : str = None \u00b6 r_path : str = 'Rscript' \u00b6 extra_libraries : list = None \u00b6 property command \u00b6 Update executable with new python_path Returns: re-build command reload_from_simulation ( simulation: idmtools.entities.simulation.Simulation , **kwargs ) \u00b6 Optional hook that is called when loading simulations from a platform gather_common_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather R Assets Returns: gather_transient_assets ( ) \u2192 idmtools.assets.asset_collection.AssetCollection \u00b6 Gather transient assets. Generally this is the simulation level assets Returns: pre_creation ( parent: Union[idmtools.entities.simulation.Simulation, idmtools.entities.iworkflow_item.IWorkflowItem] ) \u00b6 Called before creation of parent Parameters parent \u2013 Parent Returns None Raise: ValueError if script name is not provided class idmtools_models.r.r_task. RTaskSpecification \u00b6 Bases: idmtools.registry.task_specification.TaskSpecification get ( configuration: dict ) \u2192 idmtools_models.r.r_task.RTask \u00b6 Get instance of RTask Parameters configuration \u2013 configuration for task Returns RTask with configuration get_description ( ) \u2192 str \u00b6 Returns the Description of the plugin Returns Plugin Description get_type ( ) \u2192 Type[idmtools_models.r.r_task.RTask] \u00b6 Get Type for Plugin Returns RTask"}, {"title": "idmtools_platform_comps.ssmt_platform module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_platform.html", "text": "idmtools_platform_comps.ssmt_platform module \u00b6 class idmtools_platform_comps.ssmt_platform. SSMTPlatform ( _uid: uuid.UUID = None , _simulations: idmtools_platform_comps.ssmt_operations.simulation_operations.SSMTPlatformSimulationOperations = None , _workflow_items: idmtools_platform_comps.ssmt_operations.workflow_item_operations.SSMTPlatformWorkflowItemOperations = None , endpoint: str = 'https://comps2.idmod.org' , environment: str = 'Bayesian' , priority: str = 'Lowest' , simulation_root: str = '$COMPS_PATH(USER)\\output' , node_group: str = None , num_retries: int = 0 , num_cores: int = 1 , max_workers: int = 16 , batch_size: int = 10 , exclusive: bool = False , docker_image: str = None ) \u00b6 Bases: idmtools_platform_comps.comps_platform.COMPSPlatform Represents the platform allowing to run simulations on SSMT."}, {"title": "idmtools.entities.simulation module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.simulation.html", "text": "idmtools.entities.simulation module \u00b6 class idmtools.entities.simulation. Simulation ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , item_type: idmtools.core.enums.ItemType = <ItemType.SIMULATION: 3> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , task: ITask = None , pre_creation_hooks: List[Callable[[] , NoReturn]] = <factory> , _Simulation__assets_gathered: bool = False ) \u00b6 Bases: idmtools.core.interfaces.iassets_enabled.IAssetsEnabled , idmtools.core.interfaces.inamed_entity.INamedEntity Class that represents a generic simulation. This class needs to be implemented for each model type with specifics. task : ITask = None \u00b6 Task representing the configuration of the command to be executed item_type : idmtools.core.enums.ItemType = 3 \u00b6 Item Type. Should not be changed from Simulation pre_creation_hooks : List[Callable[[], NoReturn]] = None \u00b6 List of hooks that we can modify to add additional behaviour before creation of simulations property experiment \u00b6 pre_creation ( ) \u00b6 Called before the actual creation of the entity. post_creation ( ) \u2192 None \u00b6 Called after the actual creation of the entity. pre_getstate ( ) \u00b6 Return default values for pickle_ignore_fields() . Call before pickling. gather_assets ( ) \u00b6 Gather all the assets for the simulation. classmethod from_task ( task: ITask , tags: Dict[str , Any] = None , asset_collection: idmtools.assets.asset_collection.AssetCollection = None ) \u00b6 Create a simulation from a task Parameters task \u2013 Task to create from tags \u2013 Tags to create on the simulation asset_collection \u2013 Simulation Assets Returns: list_static_assets ( platform: IPlatform = None , **kwargs ) \u2192 List[idmtools.assets.asset.Asset] \u00b6 List assets that have been uploaded to a server already Parameters children \u2013 When set to true, simulation assets will be loaded as well platform \u2013 Optional platform to load assets list from **kwargs \u2013 Returns List of assets to_dict ( ) \u2192 Dict \u00b6 Do a lightweight conversation to json :returns: Dict representing json of object"}, {"title": "idmtools_platform_local.local_platform module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.local_platform.html", "text": "idmtools_platform_local.local_platform module \u00b6 class idmtools_platform_local.local_platform. LocalPlatform ( _uid: uuid.UUID = None , host_data_directory: str = '/home/runner/.local_data' , network: str = 'idmtools' , redis_image: str = 'redis:5.0.4-alpine' , redis_port: int = 6379 , runtime: Optional[str] = None , redis_mem_limit: str = '128m' , redis_mem_reservation: str = '64m' , postgres_image: str = 'postgres:11.4' , postgres_mem_limit: str = '64m' , postgres_mem_reservation: str = '32m' , postgres_port: Optional[str] = 5432 , workers_mem_limit: str = '16g' , workers_mem_reservation: str = '128m' , workers_image: str = None , workers_ui_port: int = 5000 , heartbeat_timeout: int = 15 , default_timeout: int = 45 , launch_created_experiments_in_browser: bool = False , auto_remove_worker_containers: bool = True ) \u00b6 Bases: idmtools.entities.iplatform.IPlatform Represents the platform allowing to run simulations locally. host_data_directory : str = '/home/runner/.local_data' \u00b6 network : str = 'idmtools' \u00b6 redis_image : str = 'redis:5.0.4-alpine' \u00b6 redis_port : int = 6379 \u00b6 runtime : Optional[str] = None \u00b6 redis_mem_limit : str = '128m' \u00b6 redis_mem_reservation : str = '64m' \u00b6 postgres_image : str = 'postgres:11.4' \u00b6 postgres_mem_limit : str = '64m' \u00b6 postgres_mem_reservation : str = '32m' \u00b6 postgres_port : Optional[str] = 5432 \u00b6 workers_mem_limit : str = '16g' \u00b6 workers_mem_reservation : str = '128m' \u00b6 workers_image : str = None \u00b6 workers_ui_port : int = 5000 \u00b6 heartbeat_timeout : int = 15 \u00b6 default_timeout : int = 45 \u00b6 launch_created_experiments_in_browser : bool = False \u00b6 auto_remove_worker_containers : bool = True \u00b6 cleanup ( delete_data: bool = False , shallow_delete: bool = False , tear_down_brokers: bool = False ) \u00b6 post_setstate ( ) \u00b6 Function called after restoring the state if additional initialization is required"}, {"title": "idmtools.registry.experiment_specification module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.experiment_specification.html", "text": "idmtools.registry.experiment_specification module \u00b6 class idmtools.registry.experiment_specification. ExperimentPluginSpecification \u00b6 Bases: idmtools.registry.plugin_specification.PluginSpecification , abc.ABC classmethod get_name ( strip_all: bool = True ) \u2192 str \u00b6 Get name of plugin. By default we remove the PlatformSpecification portion. :param strip_all: When true, ExperimentPluginSpecification and ExperimentPluginSpec is stripped from name. :param When false only Specification and Spec is Stripped: Returns: get ( configuration: dict ) \u2192 Experiment \u00b6 Return a new model using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new model. get_type ( ) \u2192 Type[Experiment] \u00b6 class idmtools.registry.experiment_specification. ExperimentPlugins ( strip_all: bool = True ) \u00b6 Bases: object get_plugins ( ) \u2192 Set[idmtools.registry.experiment_specification.ExperimentPluginSpecification] \u00b6 get_plugin_map ( ) \u2192 Dict[str, idmtools.registry.experiment_specification.ExperimentPluginSpecification] \u00b6"}, {"title": "idmtools.utils.filters.asset_filters module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.filters.asset_filters.html", "text": "idmtools.utils.filters.asset_filters module \u00b6 This module contains all the default filters for the assets. A filter function needs to take only one argument: an asset. It returns True/False indicating whether to add or filter out the asset. You can notice functions taking more than only an asset. To use those functions, use must create a partial before adding it to a filters list. For example: python fname = partial ( file_name_is , filenames = [ \"a.txt\" , \"b.txt\" ]) AssetCollection . from_directory ( ... filters = [ fname ], ... ) idmtools.utils.filters.asset_filters. default_asset_file_filter ( asset: TAsset ) \u2192 bool \u00b6 Default filter to leave out Python caching. This filter is used in the creation of AssetCollection , regardless of user filters. idmtools.utils.filters.asset_filters. file_name_is ( asset: TAsset, filenames: List[str] ) \u2192 bool \u00b6 Restrict filtering to assets with the indicated filenames. Parameters asset \u2013 The asset to filter. filenames \u2013 List of filenames to filter on. idmtools.utils.filters.asset_filters. file_extension_is ( asset: TAsset, extensions: List[str] ) \u2192 bool \u00b6 Restrict filtering to assets with the indicated filetypes. Parameters asset \u2013 The asset to filter. extensions \u2013 List of extensions to filter on. idmtools.utils.filters.asset_filters. asset_in_directory ( asset: TAsset, directories: List[str] ) \u2192 bool \u00b6 Restrict filtering to assets within a given directory. This filter is not strict and simply checks if the directory portion is present in the assets absolute path. Parameters asset \u2013 The asset to filter. directories \u2013 List of directory portions to include."}, {"title": "idmtools_platform_comps package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.html", "text": "idmtools_platform_comps package \u00b6 Subpackages \u00b6 idmtools_platform_comps.cli package Submodules idmtools_platform_comps.cli.cli_functions module idmtools_platform_comps.cli.comps module idmtools_platform_comps.cli.utils module Module contents idmtools_platform_comps.comps_operations package Submodules idmtools_platform_comps.comps_operations.asset_collection_operations module idmtools_platform_comps.comps_operations.experiment_operations module idmtools_platform_comps.comps_operations.simulation_operations module idmtools_platform_comps.comps_operations.suite_operations module idmtools_platform_comps.comps_operations.workflow_item_operations module Module contents idmtools_platform_comps.ssmt_operations package Submodules idmtools_platform_comps.ssmt_operations.simulation_operations module idmtools_platform_comps.ssmt_operations.workflow_item_operations module Module contents idmtools_platform_comps.ssmt_work_items package Submodules idmtools_platform_comps.ssmt_work_items.comps_workitems module idmtools_platform_comps.ssmt_work_items.icomps_workflowitem module Module contents idmtools_platform_comps.utils package Subpackages idmtools_platform_comps.utils.python_requirements_ac package Submodules idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection module idmtools_platform_comps.utils.python_requirements_ac.install_requirements module idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection module Module contents Submodules idmtools_platform_comps.utils.disk_usage module idmtools_platform_comps.utils.general module idmtools_platform_comps.utils.lookups module idmtools_platform_comps.utils.package_version module idmtools_platform_comps.utils.python_version module Module contents Submodules \u00b6 idmtools_platform_comps.comps_cli module idmtools_platform_comps.comps_platform module idmtools_platform_comps.plugin_info module idmtools_platform_comps.ssmt_platform module Module contents \u00b6"}, {"title": "Installation \u2014 IDM-Tools  documentation", "tags": "", "url": "./installation.html", "text": "Installation \u00b6 You can install IDM Modeling Tools in two different ways. If you intend to use IDM-Tools as IDM builds it, follow the instructions in Basic installation . However, if you intend to modify the IDM-Tools source code to add new functionality, follow the instructions in Developer installation . Whichever installation method you choose, the prerequisites are the same. Prerequisites \u00b6 IDM-Tools uses Docker to run IDM-Tools within a container to keep the IDM-Tools environment securely isolated. You must also have Python 3.6 or 3.7 64-bit and Python virtual environments installed to isolate your IDM-Tools installation in a separate Python environment. If you do not already have these installed, see the links below for instructions. Windows 10 Pro or Enterprise Python 3.6 or 3.7 64-bit ( https://www.python.org/downloads/release ) Warning Do not install Python 3.8, which includes breaking changes. Python virtual environments Python virtual environments enable you to isolate your Python environments from one another and give you the option to run multiple versions of Python on the same computer. When using a virtual environment, you can indicate the version of Python you want to use and the packages you want to install, which will remain separate from other Python environments. You may use virtualenv , which requires a separate installation, but venv is recommended and included with Python 3.3+. Docker ( https://docs.docker.com/ ) Docker is optional for the basic installation of IDM-Tools; it is needed only for running simulations or analysis locally. It is required for the developer installation. Basic installation Developer installation Install IDM-Tools Start the Docker client Run tests"}, {"title": "idmtools_platform_comps.comps_platform module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_platform.html", "text": "idmtools_platform_comps.comps_platform module \u00b6 class idmtools_platform_comps.comps_platform. COMPSPriority \u00b6 Bases: enum.Enum An enumeration. Lowest = 'Lowest' \u00b6 BelowNormal = 'BelowNormal' \u00b6 Normal = 'Normal' \u00b6 AboveNormal = 'AboveNormal' \u00b6 Highest = 'Highest' \u00b6 class idmtools_platform_comps.comps_platform. COMPSPlatform ( _uid: uuid.UUID = None , endpoint: str = 'https://comps2.idmod.org' , environment: str = 'Bayesian' , priority: str = 'Lowest' , simulation_root: str = '$COMPS_PATH(USER)\\output' , node_group: str = None , num_retries: int = 0 , num_cores: int = 1 , max_workers: int = 16 , batch_size: int = 10 , exclusive: bool = False , docker_image: str = None ) \u00b6 Bases: idmtools.entities.iplatform.IPlatform , idmtools.core.cache_enabled.CacheEnabled Represents the platform allowing to run simulations on COMPS. MAX_SUBDIRECTORY_LENGTH = 35 \u00b6 endpoint : str = 'https://comps2.idmod.org' \u00b6 environment : str = 'Bayesian' \u00b6 priority : str = 'Lowest' \u00b6 simulation_root : str = '$COMPS_PATH(USER)\\\\output' \u00b6 node_group : str = None \u00b6 num_retries : int = 0 \u00b6 num_cores : int = 1 \u00b6 max_workers : int = 16 \u00b6 batch_size : int = 10 \u00b6 exclusive : bool = False \u00b6 docker_image : str = None \u00b6 post_setstate ( ) \u00b6 Function called after restoring the state if additional initialization is required"}, {"title": "idmtools.registry.task_specification module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.registry.task_specification.html", "text": "idmtools.registry.task_specification module \u00b6 class idmtools.registry.task_specification. TaskSpecification \u00b6 Bases: idmtools.registry.plugin_specification.PluginSpecification , abc.ABC classmethod get_name ( strip_all: bool = True ) \u2192 str \u00b6 Get name of plugin. By default we remove the PlatformSpecification portion. :param strip_all: When true, TaskSpecification and TaskSpec is stripped from name. When false only :param Specification and Spec is Stripped: Returns: get ( configuration: dict ) \u2192 idmtools.entities.itask.ITask \u00b6 Return a new model using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new model. get_type ( ) \u2192 Type[idmtools.entities.itask.ITask] \u00b6 class idmtools.registry.task_specification. TaskPlugins ( strip_all: bool = True ) \u00b6 Bases: object get_plugins ( ) \u2192 Set[idmtools.registry.task_specification.TaskSpecification] \u00b6 get_plugin_map ( ) \u2192 Dict[str, idmtools.registry.task_specification.TaskSpecification] \u00b6"}, {"title": "idmtools_platform_local.internals.workers package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.workers.html", "text": "idmtools_platform_local.internals.workers package \u00b6 Submodules \u00b6 idmtools_platform_local.internals.workers.brokers module idmtools_platform_local.internals.workers.database module idmtools_platform_local.internals.workers.run module idmtools_platform_local.internals.workers.run_broker module idmtools_platform_local.internals.workers.utils module Module contents \u00b6"}, {"title": "idmtools_platform_comps.ssmt_work_items package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_work_items.html", "text": "idmtools_platform_comps.ssmt_work_items package \u00b6 Submodules \u00b6 idmtools_platform_comps.ssmt_work_items.comps_workitems module idmtools_platform_comps.ssmt_work_items.icomps_workflowitem module Module contents \u00b6"}, {"title": "idmtools.analysis.map_worker_entry module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.analysis.map_worker_entry.html", "text": "idmtools.analysis.map_worker_entry module \u00b6 idmtools.analysis.map_worker_entry. map_item ( item: idmtools.core.interfaces.iitem.IItem ) \u2192 NoReturn \u00b6 Initialize some worker-global values; a worker process entry point for analyzer item-mapping. Parameters item \u2013 The item (often simulation) to process. Returns None"}, {"title": "Configuration \u2014 IDM-Tools  documentation", "tags": "", "url": "./configuration.html", "text": "Configuration \u00b6 The configuration of IDM-Tools is set in the idmtools.ini file. This file is normally located in the project directory but IDM-Tools will search up through the directory hierachy. An idmtools.ini file must be included when using IDM-Tools. Below is an example configuration file: [COMMON] # Number of threads idm-tools will use for analysis and other multi-threaded activities max_threads = 16 # How many simulations per threads during simulation creation sims_per_thread = 20 # Maximum number of LOCAL simulation ran simultaneously max_local_sims = 6 # Maxium number of workers processing in parallel max_workers = 16 # Maxium batch size to retrieve simulations batch_size = 10 [COMPS] type = COMPS endpoint = https://comps.idmod.org environment = Belegost priority = Lowest simulation_root = $COMPS_PATH(USER)\\output node_group = emod_abcd num_retries = 0 num_cores = 1 max_workers = 16 batch_size = 10 exclusive = False [COMPS2] type = COMPS endpoint = https://comps2.idmod.org environment = Bayesian priority = Lowest simulation_root = $COMPS_PATH(USER)\\output node_group = emod_abcd num_retries = 0 num_cores = 1 max_workers = 16 batch_size = 10 exclusive = False [Logging] # Options are is descending order. The lower the item in the list, the more verbose the logging will be # CRITICAL, ERROR, WARNING, INFO, DEBUG level = DEBUG console = off log_filename = idmtools.log # This is a test we used to validate loading local from section block [Custom_Local] type = Local [SLURM] type = COMPS endpoint = https://comps2.idmod.org environment = SlurmStage priority = Highest simulation_root = $COMPS_PATH(USER)\\output num_retries = 0 num_cores = 1 exclusive = False max_workers = 16 batch_size = 10 Specific configuration items Global parameters Logging"}, {"title": "idmtools_platform_comps.plugin_info module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.plugin_info.html", "text": "idmtools_platform_comps.plugin_info module \u00b6 class idmtools_platform_comps.plugin_info. COMPSPlatformSpecification \u00b6 Bases: idmtools.registry.platform_specification.PlatformSpecification get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get ( **configuration ) \u2192 idmtools_platform_comps.comps_platform.COMPSPlatform \u00b6 Return a new platform using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new platform. example_configuration ( ) \u00b6 Example configuration for the platform. This is useful in help or error messages. Returns: get_type ( ) \u2192 Type[idmtools_platform_comps.comps_platform.COMPSPlatform] \u00b6 get_example_urls ( ) \u2192 List[str] \u00b6 Returns a list of URLs that a series of Examples for plugin can be downloaded from Returns List of urls class idmtools_platform_comps.plugin_info. SSMTPlatformSpecification \u00b6 Bases: idmtools.registry.platform_specification.PlatformSpecification get_description ( ) \u2192 str \u00b6 Get a brief description of the plugin and its functionality. Returns The plugin description. get ( **configuration ) \u2192 idmtools_platform_comps.comps_platform.COMPSPlatform \u00b6 Return a new platform using the passed in configuration. Parameters configuration \u2013 The INI configuration file to use. Returns The new platform. example_configuration ( ) \u00b6 Example configuration for the platform. This is useful in help or error messages. Returns: get_type ( ) \u2192 Type[idmtools_platform_comps.ssmt_platform.SSMTPlatform] \u00b6 get_example_urls ( ) \u2192 List[str] \u00b6 Returns a list of URLs that a series of Examples for plugin can be downloaded from Returns List of urls"}, {"title": "idmtools package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.html", "text": "idmtools package \u00b6 Subpackages \u00b6 idmtools.analysis package Submodules idmtools.analysis.add_analyzer module idmtools.analysis.analyze_manager module idmtools.analysis.csv_analyzer module idmtools.analysis.download_analyzer module idmtools.analysis.map_worker_entry module idmtools.analysis.platform_analysis_bootstrap module idmtools.analysis.platform_anaylsis module idmtools.analysis.tags_analyzer module Module contents idmtools.assets package Submodules idmtools.assets.asset module idmtools.assets.asset_collection module idmtools.assets.content_handlers module idmtools.assets.errors module idmtools.assets.file_list module Module contents idmtools.builders package Submodules idmtools.builders.arm_simulation_builder module idmtools.builders.csv_simulation_builder module idmtools.builders.simulation_builder module idmtools.builders.yaml_simulation_builder module Module contents idmtools.config package Submodules idmtools.config.idm_config_parser module Module contents idmtools.core package Subpackages idmtools.core.interfaces package Submodules idmtools.core.interfaces.entity_container module idmtools.core.interfaces.iassets_enabled module idmtools.core.interfaces.ientity module idmtools.core.interfaces.iitem module idmtools.core.interfaces.inamed_entity module Module contents Submodules idmtools.core.cache_enabled module idmtools.core.context module idmtools.core.docker_task module idmtools.core.enums module idmtools.core.exceptions module idmtools.core.experiment_factory module idmtools.core.logging module idmtools.core.platform_factory module idmtools.core.system_information module idmtools.core.task_factory module Module contents idmtools.entities package Subpackages idmtools.entities.iplatform_ops package Submodules idmtools.entities.iplatform_ops.iplatform_asset_collection_operations module idmtools.entities.iplatform_ops.iplatform_experiment_operations module idmtools.entities.iplatform_ops.iplatform_simulation_operations module idmtools.entities.iplatform_ops.iplatform_suite_operations module idmtools.entities.iplatform_ops.iplatform_workflowitem_operations module idmtools.entities.iplatform_ops.utils module Module contents Submodules idmtools.entities.command_line module idmtools.entities.command_task module idmtools.entities.experiment module idmtools.entities.generic_workitem module idmtools.entities.ianalyzer module idmtools.entities.iplatform module idmtools.entities.itask module idmtools.entities.iworkflow_item module idmtools.entities.platform_requirements module idmtools.entities.relation_type module idmtools.entities.simulation module idmtools.entities.suite module idmtools.entities.task_proxy module idmtools.entities.templated_simulation module Module contents idmtools.registry package Submodules idmtools.registry.experiment_specification module idmtools.registry.master_plugin_registry module idmtools.registry.platform_specification module idmtools.registry.plugin_specification module idmtools.registry.task_specification module idmtools.registry.utils module Module contents idmtools.services package Submodules idmtools.services.ipersistance_service module idmtools.services.platforms module Module contents idmtools.utils package Subpackages idmtools.utils.display package Submodules idmtools.utils.display.displays module idmtools.utils.display.settings module Module contents idmtools.utils.filters package Submodules idmtools.utils.filters.asset_filters module Module contents Submodules idmtools.utils.collections module idmtools.utils.command_line module idmtools.utils.decorators module idmtools.utils.dropbox_location module idmtools.utils.entities module idmtools.utils.file module idmtools.utils.file_parser module idmtools.utils.filter_simulations module idmtools.utils.gitrepo module idmtools.utils.hashing module idmtools.utils.info module idmtools.utils.json module idmtools.utils.language module idmtools.utils.local_os module idmtools.utils.time module Module contents Module contents \u00b6"}, {"title": "Create EMOD simulations \u2014 IDM-Tools  documentation", "tags": "", "url": "./create-sims-emod.html", "text": "Create EMOD simulations \u00b6 To create simulations using EMOD you must use the emodpy package included with IDM-Tools. Included with emodpy is the emodpy.emod_task.EMODTask class, inheriting from the ITask abstract class, and used for the running and configuration of EMOD simulations and experiments. For more information about the architecture of job (simulation/experiment) creation and how EMOD leverages IDM-Tools plugin architecture, see Architecture and packages reference . The following Python excerpt shows an example of using EMODTask class and from_default method to create a task object using default config, campaign, and demographic values from EMODSir class and to use the Eradication.exe from local directory: task = EMODTask . from_default ( default = EMODSir (), eradication_path = os . path . join ( BIN_PATH , \"Eradication\" )) Another option, instead of using from_default , is to use the from_files method: task = EMODTask . from_files ( config_path = os . path . join ( INPUT_PATH , \"config.json\" ), campaign_path = os . path . join ( INPUT_PATH , \"campaign.json\" ), demographics_paths = os . path . join ( INPUT_PATH , \"demographics.json\" ), eradication_path = eradication_path ) For complete examples of the above see the following Python scripts: (from_default) emodpy.examples.create_sims_from_default_run_analyzer (from_files) emodpy.examples.create_sims_eradication_from_github_url"}, {"title": "idmtools.utils.file module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.file.html", "text": "idmtools.utils.file module \u00b6 idmtools.utils.file. scan_directory ( basedir: str , recursive: bool = True ) \u2192 Iterable[posix.DirEntry] \u00b6 Scan a directory recursively or not. Parameters basedir \u2013 The root directory to start from. recursive \u2013 True to search the subfolders recursively; False to stay in the root directory. Returns An iterator yielding all the files found. idmtools.utils.file. file_contents_to_generator ( filename , chunk_size=128 ) \u2192 Generator[bytearray, None, None] \u00b6 Create a generator from file contents in chunks(useful for streaming binary data and piping) :param filename: :param chunk_size: Returns:"}, {"title": "Basic installation \u2014 IDM-Tools  documentation", "tags": "", "url": "./basic-installation.html", "text": "Basic installation \u00b6 Follow the steps below if you will use IDM-Tools to run and analyze simulations, but will not make source code changes. Open a command prompt and create a virtual environment in any directory you choose. The command below names the environment \u201cidmtools\u201d, but you may use any desired name: python - m venv idmtools Activate the virtual environment: On Windows, enter the following: idmtools \\ Scripts \\ activate On Linux, enter the following: source idmtools / bin / activate Install IDM-Tools packages: pip install idmtools [ idm ] -- index - url = https : // packages . idmod . org / api / pypi / pypi - production / simple If you are on Python 3.6, also run: pip install dataclasses Note When reinstalling IDM-Tools you should use the --no-cache-dir and --force-reinstall options, such as: pip install idmtools[idm] --index-url=https://packages.idmod.org/api/pypi/pipi-production/simple --no-cache-dir --force-reinstall . Otherwise, you may see the error, idmtools not found , when attempting to open and run one of the example Python scripts. Verify installation by pulling up IDM-Tools help: idmtools -- help When you are finished, deactivate the virtual environment by entering the following at a command prompt: deactivate"}, {"title": "Search \u2014 IDM-Tools  documentation", "tags": "", "url": "./search.html", "text": "Please activate JavaScript to enable the search functionality."}, {"title": "idmtools_platform_comps.ssmt_work_items.comps_workitems module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.ssmt_work_items.comps_workitems.html", "text": "idmtools_platform_comps.ssmt_work_items.comps_workitems module \u00b6 class idmtools_platform_comps.ssmt_work_items.comps_workitems. SSMTWorkItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None , work_order: dict = <factory> , plugin_key: str = '1.0.0.0_RELEASE' , docker_image: str = None , command: str = None ) \u00b6 Bases: idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem Idm SSMTWorkItem docker_image : str = None \u00b6 command : str = None \u00b6 get_base_work_order ( ) \u00b6 builder basic work order Returns: work order as a dictionary get_comps_ssmt_image_name ( ) \u00b6 build comps ssmt docker image name :param user_image: the image name provided by user Returns: final validated name class idmtools_platform_comps.ssmt_work_items.comps_workitems. InputDataWorkItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None , work_order: dict = <factory> , plugin_key: str = '1.0.0.0_RELEASE' ) \u00b6 Bases: idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem Idm InputDataWorkItem work_order = None \u00b6 class idmtools_platform_comps.ssmt_work_items.comps_workitems. VisToolsWorkItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None , work_order: dict = <factory> , plugin_key: str = '1.0.0.0_RELEASE' ) \u00b6 Bases: idmtools_platform_comps.ssmt_work_items.icomps_workflowitem.ICOMPSWorkflowItem Idm VisToolsWorkItem work_order = None \u00b6"}, {"title": "idmtools.core.exceptions module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.exceptions.html", "text": "idmtools.core.exceptions module \u00b6 exception idmtools.core.exceptions. ExperimentNotFound ( experiment_id: uuid.UUID , platform: TPlatform = None ) \u00b6 Bases: Exception exception idmtools.core.exceptions. UnknownItemException ( err: str ) \u00b6 Bases: Exception exception idmtools.core.exceptions. NoPlatformException \u00b6 Bases: Exception Cannot find a platform matching the one requested by user exception idmtools.core.exceptions. TopLevelItem \u00b6 Bases: Exception Thrown when a parent of a top-level item is requested by the platform exception idmtools.core.exceptions. UnsupportedPlatformType \u00b6 Bases: Exception Occurs when an item is not supported by a platform but is requested exception idmtools.core.exceptions. NoTaskFound \u00b6 Bases: Exception"}, {"title": "idmtools.entities.iworkflow_item module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iworkflow_item.html", "text": "idmtools.entities.iworkflow_item module \u00b6 class idmtools.entities.iworkflow_item. IWorkflowItem ( _uid: uuid.UUID = None , platform_id: uuid.UUID = None , _platform: IPlatform = None , parent_id: uuid.UUID = None , _parent: IEntity = None , status: idmtools.core.enums.EntityStatus = None , tags: Dict[str , Any] = <factory> , _platform_object: Any = None , name: str = None , assets: idmtools.assets.asset_collection.AssetCollection = <factory> , item_name: str = 'Idm WorkItem Test' , asset_collection_id: uuid.UUID = None , asset_files: idmtools.assets.file_list.FileList = None , user_files: idmtools.assets.file_list.FileList = None , related_experiments: list = None , related_simulations: list = None , related_suites: list = None , related_work_items: list = None , related_asset_collections: list = None , work_item_type: str = None ) \u00b6 Bases: idmtools.core.interfaces.iassets_enabled.IAssetsEnabled , idmtools.core.interfaces.inamed_entity.INamedEntity , abc.ABC Interface of idmtools work item item_name : str = 'Idm WorkItem Test' \u00b6 tags : Dict[str, Any] = None \u00b6 asset_collection_id : uuid.UUID = None \u00b6 asset_files : idmtools.assets.file_list.FileList = None \u00b6 user_files : idmtools.assets.file_list.FileList = None \u00b6 related_experiments : list = None \u00b6 related_simulations : list = None \u00b6 related_suites : list = None \u00b6 related_work_items : list = None \u00b6 related_asset_collections : list = None \u00b6 work_item_type : str = None \u00b6 item_type : ItemType = 4 \u00b6 gather_assets ( ) \u2192 NoReturn \u00b6 Function called at runtime to gather all assets in the collection. add_file ( af ) \u00b6 Methods used to add new file :param af: file to add Returns: None clear_user_files ( ) \u00b6 Clear all existing user files Returns: None pre_creation ( ) \u2192 None \u00b6 Called before the actual creation of the entity. run ( wait_on_done: bool = False , wait_on_done_progress: bool = True , platform: IPlatform = None ) \u00b6 Run the item on specified platform Parameters wait_on_done \u2013 Should we wait on item to finish running? Default is false wait_on_done_progress \u2013 When waiting, should we try to show progress platform \u2013 optional platform object Returns: wait ( wait_on_done_progress: bool = True , platform: IPlatform = None ) \u00b6 Wait on item to finish Parameters wait_on_done_progress \u2013 Should we show progress as we wait? platform \u2013 Optional platform object Returns: to_dict ( ) \u2192 Dict \u00b6"}, {"title": "idmtools.assets package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.assets.html", "text": "idmtools.assets package \u00b6 Submodules \u00b6 idmtools.assets.asset module idmtools.assets.asset_collection module idmtools.assets.content_handlers module idmtools.assets.errors module idmtools.assets.file_list module Module contents \u00b6"}, {"title": "idmtools_models.python package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_models.python.html", "text": "idmtools_models.python package \u00b6 Submodules \u00b6 idmtools_models.python.json_python_task module idmtools_models.python.python_task module Module contents \u00b6"}, {"title": "idmtools.entities.iplatform_ops.utils module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.entities.iplatform_ops.utils.html", "text": "idmtools.entities.iplatform_ops.utils module \u00b6 idmtools.entities.iplatform_ops.utils. batch_items ( items: Union[Iterable, Generator], batch_size=16 ) \u00b6 Batch items Parameters items \u2013 batch_size \u2013 Returns: idmtools.entities.iplatform_ops.utils. item_batch_worker_thread ( create_func: Callable , items: List ) \u2192 List \u00b6 Default batch worker thread function. It just calls create on each item Parameters create_func \u2013 Create function for item items \u2013 Items to create Returns List of items created idmtools.entities.iplatform_ops.utils. batch_create_items ( items: Union[Iterable, Generator], batch_worker_thread_func: Callable[[List], List] = None, create_func: Callable[[...], Any] = None, display_progress: bool = True, progress_description: str = 'Commissioning items', **kwargs ) \u00b6 Batch create items. You must specify either batch_worker_thread_func or create_func Parameters items \u2013 Items to create batch_worker_thread_func \u2013 Optional Function to execute. Should take a list and return a list create_func \u2013 Optional Create function display_progress \u2013 Enable progress bar progress_description \u2013 Description to show in progress bar **kwargs \u2013 Returns: idmtools.entities.iplatform_ops.utils. show_progress_of_batch ( futures: List[concurrent.futures._base.Future], progress_description: str, total: int ) \u2192 List \u00b6 Show progress bar for batch Parameters futures \u2013 List of futures that are still running/queued progress_description \u2013 Progress description total \u2013 Total items being loaded(since we are loading in batches) Returns:"}, {"title": "idmtools.core.logging module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.logging.html", "text": "idmtools.core.logging module \u00b6 class idmtools.core.logging. IDMQueueListener ( queue , *handlers , respect_handler_level=False ) \u00b6 Bases: logging.handlers.QueueListener dequeue ( block ) \u00b6 Dequeue a record and return it, optionally blocking. The base implementation uses get. You may want to override this method if you want to use timeouts or work with custom queue implementations. class idmtools.core.logging. IDMQueueHandler ( queue ) \u00b6 Bases: logging.handlers.QueueHandler prepare ( record ) \u00b6 Prepares a record for queuing. The object returned by this method is enqueued. The base implementation formats the record to merge the message and arguments, and removes unpickleable items from the record in-place. You might want to override this method if you want to convert the record to a dict or JSON string, or send a modified copy of the record while leaving the original intact. idmtools.core.logging. setup_logging ( level: Union[int , str] = 30 , log_filename: str = 'idmtools.log' , console: Union[str , bool] = False ) \u2192 logging.handlers.QueueListener \u00b6 Set up logging. Parameters level \u2013 Log level. Default to warning. This should be either a string that matches a log level from logging or an int that represent that level. log_filename \u2013 Name of file to log messages to. console \u2013 When set to True or the strings \u201c1\u201d, \u201cy\u201d, \u201cyes\u201d, or \u201con\u201d, console logging will be enabled. Returns Returns the QueueListener created that writes the log messages. In advanced scenarios with multi-processing, you may need to manually stop the logger. See also For logging levels, see https://coloredlogs.readthedocs.io/en/latest/api.html#id26 idmtools.core.logging. setup_handlers ( level , log_filename , console: bool = False ) \u00b6 idmtools.core.logging. exclude_logging_classes ( items_to_exclude=None ) \u00b6 idmtools.core.logging. register_stop_logger_signal_handler ( listener ) \u2192 NoReturn \u00b6 Register a signal watcher that will stop our logging gracefully in the case of queue based logging. Parameters listener \u2013 The log listener object. Returns None"}, {"title": "idmtools_platform_comps \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps_index.html", "text": "idmtools_platform_comps \u00b6 idmtools_platform_comps package Subpackages idmtools_platform_comps.cli package Submodules Module contents idmtools_platform_comps.comps_operations package Submodules Module contents idmtools_platform_comps.ssmt_operations package Submodules Module contents idmtools_platform_comps.ssmt_work_items package Submodules Module contents idmtools_platform_comps.utils package Subpackages Submodules Module contents Submodules idmtools_platform_comps.comps_cli module idmtools_platform_comps.comps_platform module idmtools_platform_comps.plugin_info module idmtools_platform_comps.ssmt_platform module Module contents"}, {"title": "idmtools.utils.entities module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.entities.html", "text": "idmtools.utils.entities module \u00b6 idmtools.utils.entities. get_dataclass_common_fields ( src , dest , exclude_none: bool = True ) \u2192 Dict \u00b6 Extracts fields from a dataclass source object who are also defined on destination object. Useful for situations like nested configurations of data class options Parameters src \u2013 Source dataclass object dest \u2013 Dest dataclass object exclude_none \u2013 When true, values of None will be excluded Returns: idmtools.utils.entities. as_dict ( src , exclude: List[str] = None , exclude_private_fields: bool = True ) \u00b6 Converts a dataclass to a dict while also obeys rules for exclusion :param src: :param exclude: List of fields to exclude :param exclude_private_fields: Should fields that star Returns: idmtools.utils.entities. validate_user_inputs_against_dataclass ( field_type , field_value ) \u00b6 idmtools.utils.entities. get_default_tags ( ) \u2192 Dict[str, str] \u00b6 Get common default tags. Currently this is the version of idmtools Returns:"}, {"title": "idmtools_platform_comps.utils.disk_usage module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.disk_usage.html", "text": "idmtools_platform_comps.utils.disk_usage module \u00b6 class idmtools_platform_comps.utils.disk_usage. ExperimentInfo ( id , name , owner , size , sims ) \u00b6 Bases: object class idmtools_platform_comps.utils.disk_usage. DiskSpaceUsage \u00b6 Bases: object TOP_COUNT = 15 \u00b6 OWNERS = [] \u00b6 static get_experiment_info ( experiment: COMPS.Data.Experiment.Experiment , cache , refresh ) \u00b6 Adds the experiment information for a given experiment to the cache: - raw_size: the size in bytes - size: the formatted size (in KB, MB or GB) - sims: the number of simulations This function is used by the process pool to parallelize the retrieval of experiment info :param experiment: The experiment to analyze :param cache: :param refresh: Returns: static exp_str ( info , display_owner=True ) \u00b6 Format an experiment and its information to a string. static top_count_experiments ( experiments_info ) \u00b6 Displays the top count of all experiments analyzed static total_size_per_user ( experiments_info ) \u00b6 Displays the total disk space occupied per user static top_count_experiments_per_user ( experiments_info ) \u00b6 Display the top count biggest experiments per user static gather_experiment_info ( refresh=False , max_workers: int = 6 ) \u00b6 static display ( platform: idmtools_platform_comps.comps_platform.COMPSPlatform , users , top=15 , save=False , refresh=False ) \u00b6 static save_to_file ( experiments_info ) \u00b6 class idmtools_platform_comps.utils.disk_usage. DiskEncoder ( * , skipkeys=False , ensure_ascii=True , check_circular=True , allow_nan=True , sort_keys=False , indent=None , separators=None , default=None ) \u00b6 Bases: json.encoder.JSONEncoder default ( o ) \u00b6 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this: def default ( self , o ): try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) # Let the base class default method raise the TypeError return JSONEncoder . default ( self , o )"}, {"title": "idmtools.core.interfaces.iitem module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.interfaces.iitem.html", "text": "idmtools.core.interfaces.iitem module \u00b6 class idmtools.core.interfaces.iitem. IItem ( _uid: uuid.UUID = None ) \u00b6 Bases: object property uid \u00b6 property id \u00b6 property metadata \u00b6 property pickle_ignore_fields \u00b6 property metadata_fields \u00b6 display ( ) \u00b6 pre_creation ( ) \u2192 None \u00b6 Called before the actual creation of the entity. post_creation ( ) \u2192 None \u00b6 Called after the actual creation of the entity. post_setstate ( ) \u00b6 Function called after restoring the state if additional initialization is required pre_getstate ( ) \u00b6 Function called before picking and return default values for \u201cpickle-ignore\u201d fields"}, {"title": "idmtools_platform_local.infrastructure.base_service_container module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.infrastructure.base_service_container.html", "text": "idmtools_platform_local.infrastructure.base_service_container module \u00b6 class idmtools_platform_local.infrastructure.base_service_container. BaseServiceContainer ( container_name: str = None , image: str = None , client: docker.client.DockerClient = None , config_prefix: str = None , network: str = None ) \u00b6 Bases: abc.ABC container_name : str = None \u00b6 image : str = None \u00b6 client : docker.client.DockerClient = None \u00b6 config_prefix : str = None \u00b6 network : str = None \u00b6 static get_common_config ( container_name: str , image: str , network: str , port_bindings: Optional[Dict] = None , volumes: Optional[Dict] = None , mem_limit: Optional[str] = None , mem_reservation: Optional[str] = None , environment: Optional[List[str]] = None , extra_labels: Optional[Dict] = None , **extras ) \u2192 dict \u00b6 Returns portions of docker container configs that are common between all the different containers used within our platform Parameters mem_limit ( Optional [ str ] ) \u2013 Limit memory mem_reservation ( Optional [ str ] ) \u2013 Reserve memory Returns: Notes Memory strings should match those used by docker. See \u2013memory details at https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources get ( ) \u2192 Optional[docker.models.containers.Container] \u00b6 get_or_create ( spinner=None ) \u2192 docker.models.containers.Container \u00b6 Get or Create a container Parameters spinner \u2013 Optional spinner to display Returns Docker container object representing service container static ensure_container_is_running ( container: docker.models.containers.Container ) \u2192 docker.models.containers.Container \u00b6 Ensures is running :param container: Returns: create ( spinner=None ) \u2192 docker.models.containers.Container \u00b6 static wait_on_status ( container , sleep_interval: float = 0.2 , max_time: float = 2 , statutes_to_wait_for: List[str] = None ) \u00b6 stop ( remove=False ) \u00b6 restart ( ) \u00b6 get_logs ( ) \u00b6 abstract get_configuration ( ) \u2192 Dict \u00b6"}, {"title": "idmtools_platform_local.internals.ui.controllers.healthcheck module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.controllers.healthcheck.html", "text": "idmtools_platform_local.internals.ui.controllers.healthcheck module \u00b6 class idmtools_platform_local.internals.ui.controllers.healthcheck. HealthCheck \u00b6 Bases: flask_restful.Resource get ( ) \u00b6 endpoint = 'healthcheck' \u00b6 mediatypes ( ) \u00b6 methods = {'GET'} \u00b6"}, {"title": "idmtools_platform_local.internals package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.html", "text": "idmtools_platform_local.internals package \u00b6 Subpackages \u00b6 idmtools_platform_local.internals.data package Submodules idmtools_platform_local.internals.data.job_status module Module contents idmtools_platform_local.internals.tasks package idmtools_platform_local.internals.ui package Subpackages idmtools_platform_local.internals.ui.controllers package Submodules idmtools_platform_local.internals.ui.controllers.experiments module idmtools_platform_local.internals.ui.controllers.healthcheck module idmtools_platform_local.internals.ui.controllers.simulations module idmtools_platform_local.internals.ui.controllers.utils module Module contents Submodules idmtools_platform_local.internals.ui.app module idmtools_platform_local.internals.ui.config module idmtools_platform_local.internals.ui.utils module Module contents idmtools_platform_local.internals.workers package Submodules idmtools_platform_local.internals.workers.brokers module idmtools_platform_local.internals.workers.database module idmtools_platform_local.internals.workers.run module idmtools_platform_local.internals.workers.run_broker module idmtools_platform_local.internals.workers.utils module Module contents Module contents \u00b6"}, {"title": "idmtools.core.platform_factory module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.core.platform_factory.html", "text": "idmtools.core.platform_factory module \u00b6 idmtools.core.platform_factory. platform ( *args , **kwds ) \u00b6 class idmtools.core.platform_factory. Platform \u00b6 Bases: object"}, {"title": "idmtools_platform_comps.comps_operations.suite_operations module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.comps_operations.suite_operations.html", "text": "idmtools_platform_comps.comps_operations.suite_operations module \u00b6 class idmtools_platform_comps.comps_operations.suite_operations. CompsPlatformSuiteOperations ( platform: 'COMPSPlatform' , platform_type: Type = <class 'COMPS.Data.Suite.Suite'> ) \u00b6 Bases: idmtools.entities.iplatform_ops.iplatform_suite_operations.IPlatformSuiteOperations platform : 'COMPSPlatform' = None \u00b6 platform_type \u00b6 alias of COMPS.Data.Suite.Suite get ( suite_id: uuid.UUID , columns: Optional[List[str]] = None , load_children: Optional[List[str]] = None , query_criteria: Optional[COMPS.Data.QueryCriteria.QueryCriteria] = None , **kwargs ) \u2192 COMPS.Data.Suite.Suite \u00b6 Get COMPS Suite Parameters suite_id \u2013 Suite id columns \u2013 Optional list of columns. Defaults to id and name load_children \u2013 Optional list of children to load. Defaults to \u201ctags\u201d, \u201cconfiguration\u201d query_criteria \u2013 Optional query criteria **kwargs \u2013 Returns: COMPSSuite platform_create ( suite: idmtools.entities.suite.Suite , **kwargs ) \u2192 Tuple[COMPS.Data.Suite.Suite, uuid.UUID] \u00b6 Create suite on COMPS Parameters suite \u2013 Suite to create **kwargs \u2013 Returns COMPS Suite object and a UUID get_parent ( suite: COMPS.Data.Suite.Suite , **kwargs ) \u2192 Any \u00b6 Get parent of suite. We always return None on COMPS Parameters suite \u2013 **kwargs \u2013 Returns None get_children ( suite: COMPS.Data.Suite.Suite , **kwargs ) \u2192 List[Union[COMPS.Data.Experiment.Experiment, COMPS.Data.WorkItem.WorkItem]] \u00b6 Get children for a suite :param suite: Suite to get children for :param **kwargs: Any arguments to pass on to loading functions Returns List of COMPS Experiments/Workitems that are part of the suite refresh_status ( suite: idmtools.entities.suite.Suite , **kwargs ) \u00b6 Refresh the status of a suite. On comps, this is done by refreshing all experiments :param suite: Suite to refresh status of :param **kwargs: Returns: to_entity ( suite: COMPS.Data.Suite.Suite , children: bool = True , **kwargs ) \u2192 idmtools.entities.suite.Suite \u00b6 Convert a COMPS Suite to an IDM Suite Parameters suite \u2013 Suite to Convert children \u2013 When true, load simulations, false otherwise **kwargs \u2013 Returns IDM Suite"}, {"title": "idmtools_platform_local.internals.ui.app module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.app.html", "text": "idmtools_platform_local.internals.ui.app module \u00b6 idmtools_platform_local.internals.ui.app. autoindex ( path='.' ) \u00b6"}, {"title": "idmtools.utils.json module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools.utils.json.html", "text": "idmtools.utils.json module \u00b6 class idmtools.utils.json. DefaultEncoder ( * , skipkeys=False , ensure_ascii=True , check_circular=True , allow_nan=True , sort_keys=False , indent=None , separators=None , default=None ) \u00b6 Bases: json.encoder.JSONEncoder A default JSON encoder to naively make Python objects serializable by using their __dict__. default ( o ) \u00b6 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this: def default ( self , o ): try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) # Let the base class default method raise the TypeError return JSONEncoder . default ( self , o ) class idmtools.utils.json. IDMJSONEncoder ( * , skipkeys=False , ensure_ascii=True , check_circular=True , allow_nan=True , sort_keys=False , indent=None , separators=None , default=None ) \u00b6 Bases: json.encoder.JSONEncoder default ( o ) \u00b6 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this: def default ( self , o ): try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) # Let the base class default method raise the TypeError return JSONEncoder . default ( self , o ) idmtools.utils.json. load_json_file ( path: str ) \u2192 Union[Dict[Any, Any], List] \u00b6 Load a json object from a file Parameters path \u2013 Path to file Returns Contents of file parsed by JSON"}, {"title": "idmtools_platform_comps.utils.python_requirements_ac package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.python_requirements_ac.html", "text": "idmtools_platform_comps.utils.python_requirements_ac package \u00b6 Submodules \u00b6 idmtools_platform_comps.utils.python_requirements_ac.create_asset_collection module idmtools_platform_comps.utils.python_requirements_ac.install_requirements module idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection module Module contents \u00b6"}, {"title": "idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection module \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection.html", "text": "idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection module \u00b6 class idmtools_platform_comps.utils.python_requirements_ac.requirements_to_asset_collection. RequirementsToAssetCollection ( platform: idmtools.entities.iplatform.IPlatform = None , requirements_path: str = None , pkg_list: list = None , local_wheels: list = None ) \u00b6 Bases: object platform : idmtools.entities.iplatform.IPlatform = None \u00b6 requirements_path : str = None \u00b6 pkg_list : list = None \u00b6 local_wheels : list = None \u00b6 property checksum \u00b6 Returns The md5 of the requirements. property requirements \u00b6 Returns Consolidated requirements. run ( rerun=False ) \u00b6 The working logic of this utility: check if asset collection exists for given requirements, return ac id if exists create an Experiment to install the requirements on COMPS create a WorkItem to create a Asset Collection Returns: return ac id based on the requirements if Experiment and WorkItem Succeeded save_updated_requirements ( ) \u00b6 Save consolidated requirements to a file requirements_updated.txt Returns: retrieve_ac_by_tag ( md5_check=None ) \u00b6 Retrieve comps asset collection given ac tag :param md5_check: also can use custom md5 string as search tag Returns: comps asset collection retrieve_ac_from_wi ( wi ) \u00b6 Retrieve ac id from file ac_info.txt saved by WI :param wi: SSMTWorkItem (which was used to create ac from library) Returns: COMPS asset collection add_wheels_to_assets ( experiment ) \u00b6 run_experiment_to_install_lib ( ) \u00b6 Create an Experiment which will run another py script to install requirements Returns: Experiment created run_wi_to_create_ac ( exp_id ) \u00b6 Create an WorkItem which will run another py script to create new asset collection :param exp_id: the Experiment id (which installed requirements) Returns: work item created static get_latest_version ( pkg_name , display_all=False ) \u00b6 Utility to get the latest version for a given package name :param pkg_name: package name given :param display_all: determine if output all package releases Returns: the latest version of ven package consolidate_requirements ( ) \u00b6 Combine requiremtns and dynamic requirements (a list): get the latest version of package if version is not provided dynamic requirements will overwrites the requirements file Returns: the consolidated requirements (as a list) wait_till_done ( item: idmtools.core.interfaces.iitem.IItem , timeout: int = 86400 , refresh_interval: int = 5 ) \u00b6 Wait for the experiment to be done. :param refresh_interval: How long to wait between polling. :param timeout: How long to wait before failing."}, {"title": "idmtools_platform_local.cli package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.cli.html", "text": "idmtools_platform_local.cli package \u00b6 Submodules \u00b6 idmtools_platform_local.cli.experiment module idmtools_platform_local.cli.local module idmtools_platform_local.cli.simulation module idmtools_platform_local.cli.utils module Module contents \u00b6"}, {"title": "Running parameter sweeps with EMOD \u2014 IDM-Tools  documentation", "tags": "", "url": "./sweeps-emod.html", "text": "Running parameter sweeps with EMOD \u00b6 When running parameter sweeps with EMOD, you use the EMODTask class for setting the sweep parameters and passing them to the SimulationBuilder class using the add_sweep_definition method. In addition to the parameters for sweeping, you must also set the Run_Number parameter. This determines the seed for the random number generator. This is particularly important with EMOD in order to explore the stochastic nature of the model. Otherwise, if Run_Number is not changed then each simulation will result in the same output. The following python code excerpt shows an example: # Create TemplatedSimulations with task ts = TemplatedSimulations ( base_task = task ) # Create SimulationBuilder builder = SimulationBuilder () # Add sweep parameter to builder builder . add_sweep_definition ( EMODTask . set_parameter_partial ( \"Run_Number\" ), range ( num_seeds )) # Add another sweep parameter to builder builder . add_sweep_definition ( EMODTask . set_parameter_partial ( \"Base_Infectivity\" ), [ 0.6 , 1.0 , 1.5 , 2.0 ]) # Add builder to templated simulations ts . add_builder ( builder ) You can run a parameter sweep using the above code excerpt by running the included example, create_sims_eradication_from_github_url ."}, {"title": "idmtools_platform_local.internals.ui.controllers package \u2014 IDM-Tools  documentation", "tags": "", "url": "./idmtools_platform_local.internals.ui.controllers.html", "text": "idmtools_platform_local.internals.ui.controllers package \u00b6 Submodules \u00b6 idmtools_platform_local.internals.ui.controllers.experiments module idmtools_platform_local.internals.ui.controllers.healthcheck module idmtools_platform_local.internals.ui.controllers.simulations module idmtools_platform_local.internals.ui.controllers.utils module Module contents \u00b6"}]};
