Index: idmtools_platform_comps/idmtools_platform_comps/ssmt_work_items/comps_workitems.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- idmtools_platform_comps/idmtools_platform_comps/ssmt_work_items/comps_workitems.py	(revision b89611bc6ed13fe324f737d3a69a4afd86617916)
+++ idmtools_platform_comps/idmtools_platform_comps/ssmt_work_items/comps_workitems.py	(revision 8317ebea8de98360deb11e982ccb07020667d1e9)
@@ -50,6 +50,7 @@
         SSMT_STAGING_IMAGE = 'docker-staging.packages.idmod.org/idmtools/comps_ssmt_worker'
 
         from idmtools_platform_comps.utils.package_version import get_latest_ssmt_image_version_from_artifactory
+        from idmtools_platform_comps import __version__
 
         # Determine the default ssmt docker image
         if "comps.idmod.org" in self.platform.endpoint.lower():
@@ -57,7 +58,7 @@
         else:
             ssmt_image = SSMT_STAGING_IMAGE
 
-        release = get_latest_ssmt_image_version_from_artifactory()
+        release = get_latest_ssmt_image_version_from_artifactory(base_version=__version__)
 
         docker_image = f'{ssmt_image}:{release}'
         if logger.isEnabledFor(DEBUG):
Index: idmtools_platform_comps/idmtools_platform_comps/utils/package_version.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- idmtools_platform_comps/idmtools_platform_comps/utils/package_version.py	(revision b89611bc6ed13fe324f737d3a69a4afd86617916)
+++ idmtools_platform_comps/idmtools_platform_comps/utils/package_version.py	(revision 8317ebea8de98360deb11e982ccb07020667d1e9)
@@ -1,11 +1,17 @@
+import functools
 import os
 import json
+from logging import getLogger
+from typing import Optional, List
 from urllib import request
 import requests
 from pkg_resources import parse_version
 from packaging.version import parse
 from html.parser import HTMLParser
 
+IDM_DOCKER_PROD = 'https://packages.idmod.org/artifactory/list/docker-production/idmtools/'
+logger = getLogger(__name__)
+
 
 class LinkHTMLParser(HTMLParser):
     previous_tag = None
@@ -60,39 +66,57 @@
     return get_latest_version_from_site(pkg_url, display_all)
 
 
-def get_latest_ssmt_image_version_from_artifactory(pkg_name='comps_ssmt_worker', display_all=False):
+def get_latest_ssmt_image_version_from_artifactory(pkg_name='comps_ssmt_worker', base_version: Optional[str] = None, display_all=False):
     """
     Utility to get the latest version for a given package name
     Args:
         pkg_name: package name given
+        base_version: Optional base version. Versions above this will not be added.
         display_all: determine if output all package releases
     Returns: the latest version of ven package
     """
-    pkg_path = 'https://packages.idmod.org/artifactory/list/docker-production/idmtools/'
+    pkg_path = IDM_DOCKER_PROD
     pkg_url = os.path.join(pkg_path, pkg_name)
-    return get_latest_version_from_site(pkg_url, display_all)
+    return get_latest_version_from_site(pkg_url, base_version, display_all)
 
 
-def get_latest_version_from_site(pkg_url, display_all=False):
+@functools.lru_cache(1)
+def fetch_versions_from_server(pkg_url: str) -> List[str]:
     """
-    Utility to get the latest version for a given package name
+    Fetch all versions from server
+
     Args:
-        pkg_name: package name given
-        display_all: determine if output all package releases
-    Returns: the latest version of ven package
+        pkg_url: Url to fetch
+
+    Returns:
+
     """
     resp = requests.get(pkg_url)
     if resp.status_code != 200:
+        logger.warning('Could not fetch URL')
         return None
 
-    htmlStr = resp.text
+    html_str = resp.text
 
     parser = LinkHTMLParser()
-    parser.feed(htmlStr)
+    parser.feed(html_str)
     releases = parser.pkg_version
     releases = [v for v in releases if not v.startswith('.')]
 
     all_releases = sorted(releases, key=parse_version, reverse=True)
+    return all_releases
+
+
+def get_latest_version_from_site(pkg_url, base_version: Optional[str] = None, display_all=False):
+    """
+    Utility to get the latest version for a given package name
+    Args:
+        pkg_url: package name given
+        base_version: Optional base version. Versions above this will not be added.
+        display_all: determine if output all package releases
+    Returns: the latest version of ven package
+    """
+    all_releases = fetch_versions_from_server(pkg_url)
 
     if display_all:
         print(all_releases)
@@ -103,6 +127,12 @@
     if 'comps_ssmt_worker' in pkg_url.lower():
         release_versions = [ver for ver in release_versions if len(ver.split('.')) == 4]
 
-    latest_version = release_versions[0] if release_versions else None
-
-    return latest_version
+    if base_version:
+        # only use the longest match latest
+        version_compatible_portion = base_version[:3]
+        for ver in release_versions:
+            if ver[:3] == version_compatible_portion:
+                return ver
+        return None
+    else:
+        return release_versions[0] if release_versions else None
Index: idmtools_platform_comps/tests/test_comps_plugin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- idmtools_platform_comps/tests/test_comps_plugin.py	(revision b89611bc6ed13fe324f737d3a69a4afd86617916)
+++ idmtools_platform_comps/tests/test_comps_plugin.py	(revision 8317ebea8de98360deb11e982ccb07020667d1e9)
@@ -1,19 +1,16 @@
 import tempfile
-
 import os
-
 import unittest
 import dataclasses
-
+from unittest import mock
 import pytest
-
 from idmtools import IdmConfigParser
 from idmtools.core import CacheEnabled
 from idmtools.entities.iplatform import IPlatform
-from idmtools.entities.platform_requirements import PlatformRequirements
 from idmtools.registry.platform_specification import PlatformPlugins
 from idmtools_platform_comps.comps_platform import COMPSPlatform
 from idmtools_platform_comps.plugin_info import COMPSPlatformSpecification
+from idmtools_platform_comps.utils.package_version import IDM_DOCKER_PROD, fetch_versions_from_server, get_latest_ssmt_image_version_from_artifactory
 
 
 class TestCompsPlugin(unittest.TestCase):
@@ -71,3 +68,25 @@
             print(f'Set working directory to {org_directory}')
             os.chdir(org_directory)
             IdmConfigParser.clear_instance()
+
+    def test_get_ssmt_versions(self):
+        url = os.path.join(IDM_DOCKER_PROD, 'comps_ssmt_worker')
+        versions = fetch_versions_from_server(url)
+        prev_major = None
+        pre_minor = None
+        for ver in versions:
+            parts = ver.split(".")
+            if prev_major and prev_major and prev_major <= int(parts[0]) and pre_minor <= int(parts[1]):
+                self.assertGreaterEqual(prev_major, int(parts[0]))
+                self.assertGreaterEqual(pre_minor, int(parts[1]))
+            prev_major = int(parts[0])
+            pre_minor = int(parts[1])
+
+    #
+    def test_get_next_ssmt_version(self):
+        test_versions = ['1.6.0.1', '1.5.1.7', '1.5.1.6', '1.5.0.2', '1.4.0.0', '1.3.0.0', '1.2.2.0', '1.2.0.0', '1.1.0.2', '1.1.0.0', '1.0.1.0', '1.0.0', '1.0.0.0']
+        with mock.patch('idmtools_platform_comps.utils.package_version.fetch_versions_from_server', return_value=test_versions) as mocK_fetch:
+            self.assertEqual(get_latest_ssmt_image_version_from_artifactory(base_version="1.5.1.1"), "1.5.1.7")
+            self.assertEqual(get_latest_ssmt_image_version_from_artifactory(base_version="1.5.1.7"), "1.5.1.7")
+            self.assertEqual(get_latest_ssmt_image_version_from_artifactory(base_version="1.6.0.0"), "1.6.0.1")
+            self.assertEqual(get_latest_ssmt_image_version_from_artifactory(base_version="1.1.0.0"), "1.1.0.2")
